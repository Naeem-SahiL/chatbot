{"feature_name": "Events", "file_type": "Repository", "file_name": "IEventRepository.cs", "file_content": "using Authentix.Digitrax.Model.Models;\nusing Kendo.Mvc.UI;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Authentix.Digitrax.DataAccess.Repositories\n{\n    public interface IEventRepository : IEntityRepository<EventStatusLookup, long>\n    {\n        public DataSourceResult GetAllEventStatus(int tenantId, DataSourceRequest request);\n        public EventStatusLookup GetEventStatusbyId(int tenantId, int Id);\n        public bool AddEventConfiguration(EventConfigurations eventConfig);\n        public DataSourceResult GetAllEventConfigurations(int tenantId, DataSourceRequest request);\n        public EventConfigurations GetEventConfigById(int tenantId, int Id);\n        public void UpdateEventConfig(EventConfigurations eventConfig);\n        public bool AddEventForm(EventForms eventForm);\n        public DataSourceResult GetAllEventForms(int tenantId, DataSourceRequest request);\n        public EventForms GetEventFormById(int tenantId, int Id);\n        public void UpdateEventForm(EventForms eventForm);\n        public EventForms GetEventFormByName(int tenantId, string name);\n        public EventStatusLookup GetEventStatusByColor(int tenantId, string color);\n        public EventStatusLookup GetEventStatusByName(int tenantId, string name, bool ProductJourneyFlag = false);\n        public EventConfigurations GetEventConfigByName(int tenantId, string name);\n        public List<EventConfigurations> GetEventConfig(int tenantId);\n        public bool AddProductNonComplianceForm(ProductNonComplianceForm productNonComplianceForm);\n        bool DelNonComplianceForm(EventForms eventForm);\n        EventForms GetNonComplianceFormById(int tenantId, int Id);\n        EventForms GetNonComplianceFormByProductId(int tenantId, int Id);\n    }\n}\n"}
{"feature_name": "Import Processing", "file_type": "Repository", "file_name": "IImportsRepository.cs", "file_content": "using Authentix.Digitrax.Model.Models;\nusing Kendo.Mvc.UI;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Authentix.Digitrax.DataAccess.Repositories\n{\n    public interface IImportsRepository : IEntityRepository<Imports, int>\n    {\n        public List<Items> GetAllItems(int tenantId, int codeTYpeId);\n\n        DataSourceResult GetImports(DataSourceRequest request, int tenantId);\n\n        Imports GetImportById(long id, int tenantId);\n\n        Imports GetExternalUIDsImportStatusDetails(long id, int tenantId);\n    }\n}\n"}
{"feature_name": "Order Processing", "file_type": "Repository", "file_name": "IOrderRepository.cs", "file_content": "using Authentix.Digitrax.Model.Models;\nusing Kendo.Mvc.UI;\nusing System.Collections.Generic;\n\nnamespace Authentix.Digitrax.DataAccess.Repositories\n{\n    public interface IOrderRepository : IEntityRepository<Orders, long>\n    {\n        IList<Orders> GetAllOrdersByType(int orderType, int codeSourceType);\n        (IList<Orders> data, int total) GetAllOrdersByType(DataSourceRequest request, int tenantId, int orderType, int codeSourceType);\n        IList<Orders> GetAllUploadCodesOrders(int type);\n        (IList<Orders> data, int total) GetAllUploadCodesOrders(DataSourceRequest request, int tenantId, int type);\n        Orders GetOrder(string orderNumber);\n        void SaveOrder(Orders order);\n        bool CheckOrdersAssociatedWithProduct(long productId);\n    }\n}"}
{"feature_name": "UID Management", "file_type": "Repository", "file_name": "IUniqueIdentifiableMarkerRepository.cs", "file_content": "using Authentix.Digitrax.Model.Models;\nusing Kendo.Mvc.UI;\nusing System.Collections.Generic;\n\nnamespace Authentix.Digitrax.DataAccess.Repositories\n{\n    public interface IUniqueIdentifiableMarkerRepository : IEntityRepository<UimFormats, long>\n    {\n        public DataSourceResult GetAllUIMFormats(int tenantId, DataSourceRequest request, bool ActiveOnly = false);\n        public List<UimFormatItems> GetItemstoUIMMappings(int UimFormatId);\n        public CodeSchemas GetCodeSchema(int? CodeSchemaId);\n        public UimFormats GetUIMFormatById(int Id);\n        public void MapItemstoUimFormat(List<UimFormatItems> mapping);\n        public void DeleteItemstoUimFormatMappings(List<UimFormatItems> mapping);\n        public UimFormats GetUimFormatByName(int tenantId, string name);\n        public UimFormatItems GetExistingItem(long itemId);\n        UniqueIdentifiableMarkers GetUIM(string ui, long? ItemId);\n        bool IsUIM(string ui);\n        UniqueIdentifiableMarkers GetUIMDetails(string ui ,int tenantId, bool isItemDetails, bool isUIDEvents, bool isScanHistory, bool isIncidents, bool isNoncompliance,  bool isPrintAggregation, bool isAdmin = false);\n        UniqueIdentifiableMarkers GetUIMData(string ui);\n        UniqueIdentifiableMarkers GetUIMDataOptimized(string ui);\n        List<UniqueIdentifiableMarkers> GetUIMsByOrderId(long OrderId, int currentBatch);\n        public string GetEncodingSchemeByUimId(long uimId, int tenantId);\n        public int GetUrlTypeByItemId(long itemId);\n        List<UniqueIdentifiableMarkers> GetUIMsBatchwise(long OrderId, int currentBatch);\n        public UimFormats GetUIMFormatByUimFormatId(int Id);\n        public bool validateItemForUIM(string uim, long itemId, int tenantId);\n        List<Incidents> GetUIMIncedent(long UIMId);\n        string GetUIMExtension(string uim);\n        int GetProductIdByUID(int uim);\n        public long? GetItemIdByUID(string uid, int? tenantId);\n        public DataSourceResult GetUIDFormats(DataSourceRequest request, int tenantId, bool ActiveOnly = false);\n        public string GetItemNameByUID(string uid, int? tenantId);\n        public string GetProductSkuByUID(string uid, int? tenantId);\n        public bool CheckUIDExistence(string uid, int? tenantId);\n        public UniqueIdentifiableMarkers UIDData(string uid, int? tenantId);\n        public UniqueIdentifiableMarkers UidDataOrderImport(string uid, int? tenantId);\n\n    }\n}"}
{"feature_name": "Events", "file_type": "Repository", "file_name": "EventRepository.cs", "file_content": "using Authentix.Digitrax.DataAccess.Repositories;\nusing Authentix.Digitrax.Model.Data;\nusing Authentix.Digitrax.Model.Models;\nusing Kendo.Mvc;\nusing Kendo.Mvc.Extensions;\nusing Kendo.Mvc.UI;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Configuration;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Authentix.Digitrax.DataAccess.RepositoriesImplementation\n{\n    public class EventRepository : BaseEntityRepository<EventStatusLookup, long>, IEventRepository\n    {\n\n        private DigitraxDbContext _appContext => (DigitraxDbContext)_context;\n\n        public EventRepository(DbContext dbContext, IConfiguration config) : base(dbContext, config)\n        {\n        }\n        public DataSourceResult GetAllEventStatus(int tenantId, DataSourceRequest request)\n        {\n            return _appContext.EventStatusLookup.AsQueryable()\n                .Where(p => p.TenantId.Equals(tenantId) && p.ProductJourneyFlag == false).OrderByDescending(p => p.LastUpdatedDate ?? p.CreatedDate).ToDataSourceResult(request);\n        }\n        public EventStatusLookup GetEventStatusbyId(int tenantId, int Id)\n        {\n            return _appContext.EventStatusLookup.AsQueryable()\n                .Where(p => p.EventStatusLookupId.Equals(Id) && p.TenantId.Equals(tenantId)).FirstOrDefault();\n        }\n\n        public bool AddEventConfiguration(EventConfigurations eventConfig)\n        {\n            _appContext.EventConfigurations.Add(eventConfig);\n            return true;\n        }\n        public DataSourceResult GetAllEventConfigurations(int tenantId, DataSourceRequest request)\n        {\n            var queryObj = _appContext.EventConfigurations.AsQueryable()\n                .Include(p=>p.ConfigurationTypeLkp)\n                .Include(p => p.EventStatusLkp)\n                .Include(p => p.EventForm)\n                .Where(p => p.TenantId.Equals(tenantId));\n\n            if (request.Filters != null)\n            {\n                bool compositeFilter = false;\n                List<FilterDescriptor> filtersToRemove = new List<FilterDescriptor>();\n                List<FilterDescriptor> filterDescriptors = new List<FilterDescriptor>();\n                (filterDescriptors, compositeFilter) = GetFilterDescriptors(request);\n\n                foreach (var filterDesc in filterDescriptors)\n                {\n                    switch (filterDesc.Member)\n                    {\n                        case \"EventType\":\n                            {\n                                filtersToRemove.Add(filterDesc);\n                                queryObj = queryObj.Where(x => x.ConfigurationTypeLkp.VisibleValue.ToLower().Contains((string)filterDesc.Value.ToString().ToLower()));\n                                break;\n                            }\n                        case \"EventStatus\":\n                            {\n                                filtersToRemove.Add(filterDesc);\n                                queryObj = queryObj.Where(x => x.EventStatusLkp.Name.ToLower().Contains((string)filterDesc.Value.ToString().ToLower()));\n                                break;\n                            }\n                        case \"EventForm\":\n                            {\n                                filtersToRemove.Add(filterDesc);\n                                queryObj = queryObj.Where(x => x.EventForm.Name.ToLower().Contains((string)filterDesc.Value.ToString().ToLower()));\n                                break;\n                            }\n                    }\n                }\n                RemoveFilters(request, filtersToRemove, compositeFilter);\n            }\n\n            if (request.Sorts != null)\n            {\n                List<SortDescriptor> sortsToRemove = new List<SortDescriptor>();\n                foreach (var sortDesc in request.Sorts)\n                {\n                    switch (sortDesc.Member)\n                    {\n                        case \"EventType\":\n                            {\n                                sortsToRemove.Add(sortDesc);\n                                if (sortDesc.SortDirection == ListSortDirection.Ascending)\n                                {\n                                    queryObj = queryObj.OrderBy(x => x.ConfigurationTypeLkp.VisibleValue);\n                                }\n                                else\n                                {\n                                    queryObj = queryObj.OrderByDescending(x => x.ConfigurationTypeLkp.VisibleValue);\n                                }\n                                break;\n                            }\n                        case \"EventStatus\":\n                            {\n                                sortsToRemove.Add(sortDesc);\n                                if (sortDesc.SortDirection == ListSortDirection.Ascending)\n                                {\n                                    queryObj = queryObj.OrderBy(x => x.EventStatusLkp.Name);\n                                }\n                                else\n                                {\n                                    queryObj = queryObj.OrderByDescending(x => x.EventStatusLkp.Name);\n                                }\n                                break;\n                            }\n                        case \"EventForm\":\n                            {\n                                sortsToRemove.Add(sortDesc);\n                                if (sortDesc.SortDirection == ListSortDirection.Ascending)\n                                {\n                                    queryObj = queryObj.OrderBy(x => x.EventForm.Name);\n                                }\n                                else\n                                {\n                                    queryObj = queryObj.OrderByDescending(x => x.EventForm.Name);\n                                }\n                                break;\n                            }\n                    }\n                }\n                foreach (var sort in sortsToRemove)\n                {\n                    request.Sorts.Remove(sort);\n                }\n            }\n\n            if (request.Sorts == null)\n                queryObj = queryObj.OrderByDescending(p => p.LastUpdatedDate ?? p.CreatedDate);\n\n            return queryObj.ToDataSourceResult(request);\n        }\n        public EventConfigurations GetEventConfigById(int tenantId, int Id)\n        {\n            return _appContext.EventConfigurations.AsQueryable()\n                .Include(p => p.EventStatusLkp)\n                .Include(p => p.EventForm)\n                .Where(p => p.EventConfigurationId.Equals(Id) && p.TenantId.Equals(tenantId)).FirstOrDefault();\n        }\n\n        public void UpdateEventConfig(EventConfigurations eventConfig)\n        {\n            _appContext.EventConfigurations.Update(eventConfig);\n            \n        }\n        public bool AddEventForm(EventForms eventForm)\n        {\n            _appContext.EventForms.Add(eventForm);\n            return true;\n        }\n        public DataSourceResult GetAllEventForms(int tenantId, DataSourceRequest request)\n        {\n            var queryObj = _appContext.EventForms.AsQueryable()\n                .Include(p => p.EventFormSections)\n                .ThenInclude(p => p.EventFormFields)\n                .Include(p => p.FormTypeLookup)\n                .Where(p => p.TenantId.Equals(tenantId));\n           \n            queryObj = queryObj.OrderByDescending(x => x.LastUpdatedDate ?? x.CreatedDate);\n\n            return queryObj.ToDataSourceResult(request);\n        }\n        public EventForms GetEventFormById(int tenantId, int Id)\n        {\n            return _appContext.EventForms.AsQueryable()\n                .Include(p => p.EventFormSections)\n                    .ThenInclude(p=>p.EventFormFields)\n                        .ThenInclude(p=>p.EventDetail)\n                            .ThenInclude(x=>x.DisplayTypeLkp)\n                 .Include(p => p.EventFormSections)\n                    .ThenInclude(p => p.EventFormFields)\n                        .ThenInclude(p => p.EventDetail)\n                            .ThenInclude(x => x.TypeLkp)\n                 .Include(p => p.EventFormSections)\n                    .ThenInclude(p => p.EventFormFields)\n                        .ThenInclude(p => p.EventDetail)\n                            .ThenInclude(x => x.SymbolLkp)\n                  .Include(p => p.EventFormSections)\n                    .ThenInclude(p => p.EventFormFields)\n                        .ThenInclude(p => p.EventDetail)\n                            .ThenInclude(x => x.EventDetailOptions)\n                                //.ThenInclude(x=>x.EventDetailOptionsMetadata)\n                                //    .ThenInclude(x => x.EventDetails)\n                .Where(p => p.EventFormId.Equals(Id) && p.TenantId.Equals(tenantId)).FirstOrDefault();\n        }\n\n        public EventForms GetNonComplianceFormById(int tenantId, int Id)\n        {\n            return _appContext.EventForms.AsQueryable()\n                .Include(x=>x.ProductNonComplianceForm).AsNoTracking()\n                .Where(p => p.EventFormId.Equals(Id) && p.TenantId.Equals(tenantId)).FirstOrDefault();\n        }\n        public EventForms GetNonComplianceFormByProductId(int tenantId, int Id)\n        {\n            var result = _appContext.EventForms\n                .Include(x => x.ProductNonComplianceForm)\n                .Where(p => p.ProductNonComplianceForm.Any(x => x.EventDetailOptionsId == Id) && p.TenantId.Equals(tenantId)).\n                OrderByDescending(x=>x.CreatedDate).FirstOrDefault();\n\n            return result;\n        }\n        public void UpdateEventForm(EventForms eventForm)\n        {\n            _appContext.EventForms.Update(eventForm);\n        }\n        public EventForms GetEventFormByName(int tenantId, string name)\n        {\n            var query = _appContext.EventForms.Include(x=>x.ProductNonComplianceForm).\n                AsQueryable().AsNoTracking().Where(p => p.Name.Equals(name) && p.TenantId.Equals(tenantId));\n            return query.FirstOrDefault();\n        }\n        public EventStatusLookup GetEventStatusByColor(int tenantId, string color)\n        {\n            var query = _appContext.EventStatusLookup.AsQueryable().Where(p => p.Color.Equals(color) && p.TenantId.Equals(tenantId));\n            return query.FirstOrDefault();\n        }\n\n        public EventStatusLookup GetEventStatusByName(int tenantId, string name, bool ProductJourneyFlag = false)\n        {\n            var query = _appContext.EventStatusLookup.AsQueryable().Where(p => p.Name.Equals(name) && p.TenantId.Equals(tenantId) && p.ProductJourneyFlag == ProductJourneyFlag);\n            return query.FirstOrDefault();\n        }\n        public EventConfigurations GetEventConfigByName(int tenantId, string name)\n        {\n            var query = _appContext.EventConfigurations.AsQueryable().Where(p => p.Name.Equals(name) && p.TenantId.Equals(tenantId));\n            return query.FirstOrDefault();\n        }\n        public List<EventConfigurations> GetEventConfig(int tenantId)\n        {\n            var query = _appContext.EventConfigurations.AsQueryable().Where(p=>p.TenantId.Equals(tenantId));\n            return query.ToList();\n        }\n\n        public bool AddProductNonComplianceForm(ProductNonComplianceForm productNonComplianceForm)\n        {\n            if (productNonComplianceForm.Id > 0)\n                _appContext.ProductNonComplianceForm.Update(productNonComplianceForm);\n            else\n                _appContext.ProductNonComplianceForm.Add(productNonComplianceForm);\n            _appContext.SaveChanges();\n            return true;\n        }\n\n        public bool DelNonComplianceForm(EventForms eventForm)\n        {\n            _appContext.EventForms.Remove(eventForm);\n            _appContext.SaveChanges();\n            return true;\n        }\n    }\n}\n"}
{"feature_name": "Import Processing", "file_type": "Repository", "file_name": "ImportsRepository.cs", "file_content": "using Authentix.Digitrax.DataAccess.Repositories;\nusing Authentix.Digitrax.Model.Data;\nusing Authentix.Digitrax.Model.Models;\nusing Kendo.Mvc;\nusing Kendo.Mvc.Extensions;\nusing Kendo.Mvc.UI;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Configuration;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Authentix.Digitrax.DataAccess.RepositoriesImplementation\n{\n    public class ImportsRepository : BaseEntityRepository<Imports, long>, IImportsRepository\n    {\n        private DigitraxDbContext _appContext => (DigitraxDbContext)_context;\n\n        public ImportsRepository(DbContext context, IConfiguration config) : base(context, config) { }\n\n        public List<Items> GetAllItems(int tenantId, int codeTYpeId)\n        {\n            return  _appContext.Items.AsQueryable()\n                .Include(p => p.ItemDigitalVerficationFeatures)\n                .ThenInclude(m => m.DigitalVerificationFeature)\n                .Include(m => m.UimFormatItems).ThenInclude(m => m.UimFormat).ThenInclude(x=>x.UimFormatSegments).ThenInclude(x=>x.OrderingTypeLkp)\n                .Where(p => p.TenantId.Equals(tenantId) &&  p.UimFormatItems.Any(x => x.UimFormat.Type.Equals(codeTYpeId))).ToList();\n        }\n\n        public Imports Get(int id)\n        {\n            throw new NotImplementedException();\n        }\n\n        public DataSourceResult GetImports(DataSourceRequest request, int tenantId)\n        {\n            try\n            {\n                var imports = _appContext.Imports\n                                        .Include(m => m.TypeNavigation)\n                                        .Include(m => m.StatusNavigation)\n                                        .Include(m => m.MethodNavigation)\n                                        .Where(k => k.ActiveFlag && k.TenantId == tenantId);\n                                        //.OrderByDescending(k => k.LastUpdatedDate ?? k.CreatedDate)\n                                        //.ToDataSourceResult(request);\n\n                if (request.Filters != null)\n                {\n                    bool compositeFilter = false;\n                    List<FilterDescriptor> filtersToRemove = new List<FilterDescriptor>();\n                    List<FilterDescriptor> filterDescriptors = new List<FilterDescriptor>();\n                    (filterDescriptors, compositeFilter) = GetFilterDescriptors(request);\n\n                    foreach (var filterDesc in filterDescriptors)\n                    {\n                        switch (filterDesc.Member)\n                        {\n                            case \"Type\":\n                                {\n                                    filtersToRemove.Add(filterDesc);\n                                    imports = imports.Where(x => x.TypeNavigation.VisibleValue.ToLower().Contains((string)filterDesc.Value.ToString().ToLower()));\n                                    break;\n                                }\n                            case \"Status\":\n                                {\n                                    filtersToRemove.Add(filterDesc);\n                                    imports = imports.Where(x => x.StatusNavigation.VisibleValue.ToLower().Contains((string)filterDesc.Value.ToString().ToLower()));\n                                    break;\n                                }\n                            case \"Method\":\n                                {\n                                    filtersToRemove.Add(filterDesc);\n                                    imports = imports.Where(x => x.MethodNavigation.VisibleValue.ToLower().Contains((string)filterDesc.Value.ToString().ToLower()));\n                                    break;\n                                }\n                        }\n                    }\n                    RemoveFilters(request, filtersToRemove, compositeFilter);\n                }\n\n                if (request.Sorts != null)\n                {\n                    List<SortDescriptor> sortsToRemove = new List<SortDescriptor>();\n                    foreach (var sortDesc in request.Sorts)\n                    {\n                        switch (sortDesc.Member)\n                        {\n                            case \"Type\":\n                                {\n                                    sortsToRemove.Add(sortDesc);\n                                    if (sortDesc.SortDirection == ListSortDirection.Ascending)\n                                    {\n                                        imports = imports.OrderBy(x => x.TypeNavigation.VisibleValue);\n                                    }\n                                    else\n                                    {\n                                        imports = imports.OrderByDescending(x => x.TypeNavigation.VisibleValue);\n                                    }\n                                    break;\n                                }\n                            case \"EventStatus\":\n                                {\n                                    sortsToRemove.Add(sortDesc);\n                                    if (sortDesc.SortDirection == ListSortDirection.Ascending)\n                                    {\n                                        imports = imports.OrderBy(x => x.StatusNavigation.VisibleValue);\n                                    }\n                                    else\n                                    {\n                                        imports = imports.OrderByDescending(x => x.StatusNavigation.VisibleValue);\n                                    }\n                                    break;\n                                }\n                            case \"Method\":\n                                {\n                                    sortsToRemove.Add(sortDesc);\n                                    if (sortDesc.SortDirection == ListSortDirection.Ascending)\n                                    {\n                                        imports = imports.OrderBy(x => x.MethodNavigation.VisibleValue);\n                                    }\n                                    else\n                                    {\n                                        imports = imports.OrderByDescending(x => x.MethodNavigation.VisibleValue);\n                                    }\n                                    break;\n                                }\n                        }\n                    }\n                    foreach (var sort in sortsToRemove)\n                    {\n                        request.Sorts.Remove(sort);\n                    }\n                }\n\n\n                if (request.Sorts == null)\n                    imports = imports.OrderByDescending(p => p.LastUpdatedDate ?? p.CreatedDate);\n\n                return imports.ToDataSourceResult(request);\n            }\n            catch (Exception ex)\n            {\n                throw new Exception(ex.ToString());\n            }\n        }\n\n        public Imports GetImportById(long id, int tenantId)\n        {\n            try\n            {\n                var import = _appContext.Imports\n                                       .Include(m => m.TypeNavigation)\n                                       .Include(k => k.StatusNavigation)\n                                       .Include(k => k.Item)\n                                       .Include(k => k.Product).ThenInclude(m => m.EventDetails).ThenInclude(m => m.EventDetailOptions).ThenInclude(m => m.EventDetailOptionsMetadata.Where(m => !m.EventDetails.IsDeleted)).ThenInclude(m => m.EventDetails)\n                                       .Include(k => k.UimFormat)\n                                       .FirstOrDefault(k => k.ImportId == id && k.TenantId == tenantId);\n\n                return import;\n            }\n            catch (Exception ex)\n            {\n                throw new Exception(ex.ToString());\n            }\n        }\n\n        public Imports GetExternalUIDsImportStatusDetails(long id, int tenantId)\n        {\n            try\n            {\n                var import = _appContext.Imports.Include(x => x.StatusNavigation)\n                             .FirstOrDefault(x => x.ImportId == id && x.TenantId == tenantId);\n                             \n\n                return import;\n            }\n            catch (Exception ex)\n            {\n                throw new Exception(ex.ToString());\n            }\n        }\n    }\n}\n"}
{"feature_name": "Order Processing", "file_type": "Repository", "file_name": "OrderRepository.cs", "file_content": "using Authentix.Digitrax.DataAccess.Repositories;\nusing Authentix.Digitrax.Model.Data;\nusing Authentix.Digitrax.Model.Models;\nusing Kendo.Mvc.Extensions;\nusing Kendo.Mvc.UI;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Configuration;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Authentix.Digitrax.DataAccess.RepositoriesImplementation\n{\n    public class OrderRepository : BaseEntityRepository<Orders, long>, IOrderRepository\n    {\n        private DigitraxDbContext _appContext => (DigitraxDbContext)_context;\n\n        public OrderRepository(DbContext context, IConfiguration config) : base(context, config) { }\n\n        public IList<Orders> GetAllOrdersByType(int orderType, int codeSourceType)\n        {\n            try\n            {\n                var orders = _appContext.Orders.Include(m => m.Tenant).Include(m => m.Product).Include(m => m.CodeFormatLkp)\n                                               .Include(m => m.OrderStatusLkp).Include(m => m.OrderPriorityLkp)\n                                               .Where(k => k.OrderTypeLkpId == orderType && k.CodeSourceLkpId == codeSourceType)\n                                               .OrderByDescending(k => k.LastUpdatedDate ?? k.CreatedDate).ToList();\n\n                return orders;\n            }\n            catch (Exception ex)\n            {\n                throw new Exception(ex.ToString());\n            }\n        }\n\n        public (IList<Orders> data, int total) GetAllOrdersByType(DataSourceRequest request, int tenantId, int orderType, int codeSourceType)\n        {\n            try\n            {\n                var orders = _appContext.Orders.Include(m => m.Tenant).Include(m => m.Product).Include(m => m.CodeFormatLkp)\n                                               .Include(m => m.OrderStatusLkp).Include(m => m.OrderPriorityLkp)\n                                               .Where(k => k.TenantId == tenantId && k.OrderTypeLkpId == orderType && k.CodeSourceLkpId == codeSourceType)\n                                               .OrderByDescending(k => k.LastUpdatedDate ?? k.CreatedDate)\n                                               .ToDataSourceResult(request);\n\n                return (orders.Data.Cast<Orders>().ToList(), orders.Total);\n            }\n            catch (Exception ex)\n            {\n                throw new Exception(ex.ToString());\n            }\n        }\n\n        public IList<Orders> GetAllUploadCodesOrders(int type)\n        {\n            try\n            {\n                var orders = _appContext.Orders.Include(m => m.Tenant).Include(m => m.CodeFormatLkp).Include(m => m.CodeSourceLkp)\n                                               .Include(m => m.OrderTypeLkp).Include(m => m.OrderStatusLkp).Include(m => m.OrderPriorityLkp)\n                                               .Where(k => k.CodeSourceLkpId == type).OrderByDescending(k => k.LastUpdatedDate ?? k.CreatedDate).ToList();\n\n                return orders;\n            }\n            catch (Exception ex)\n            {\n                throw new Exception(ex.ToString());\n            }\n        }\n\n        public (IList<Orders> data, int total) GetAllUploadCodesOrders(DataSourceRequest request, int tenantId, int type)\n        {\n            try\n            {\n                //var orders = _appContext.Orders.Include(m => m.Tenant).Include(m => m.CodeFormatLkp).Include(m => m.CodeSourceLkp)\n                //                               .Include(m => m.OrderTypeLkp).Include(m => m.OrderStatusLkp).Include(m => m.OrderPriorityLkp)\n                //                               .Where(k => k.TenantId == tenantId && k.CodeSourceLkpId == type)\n                //                               .OrderByDescending(k => k.LastUpdatedDate ?? k.CreatedDate)\n                //                               .ToDataSourceResult(request);\n\n                var orders = _appContext.Orders.Include(m => m.Tenant).Include(m => m.CodeFormatLkp).Include(m => m.CodeSourceLkp)\n                                              .Include(m => m.OrderTypeLkp).Include(m => m.OrderStatusLkp).Include(m => m.OrderPriorityLkp)\n                                              .Where(k => k.TenantId == tenantId && !string.IsNullOrEmpty(k.UploadCodesFilename))\n                                              .OrderByDescending(k => k.LastUpdatedDate ?? k.CreatedDate)\n                                              .ToDataSourceResult(request);\n\n                return (orders.Data.Cast<Orders>().ToList(), orders.Total);\n            }\n            catch (Exception ex)\n            {\n                throw new Exception(ex.ToString());\n            }\n        }\n\n        public Orders GetOrder(string orderNumber)\n        {\n            try\n            {\n                var order = _appContext.Orders.Include(m => m.Tenant).Include(m => m.Product).Include(m => m.CodeFormatLkp).Include(m => m.CodeSourceLkp)\n                                              //.Include(m => m.RetailCountry).Include(m => m.FirstShipmentCountry)\n                                              .Include(m => m.OrderStatusLkp).Include(m => m.OrderPriorityLkp)\n                                              .Where(k => k.OrderNumber == orderNumber).FirstOrDefault();\n\n                return order;\n            }\n            catch (Exception ex)\n            {\n                throw new Exception(ex.ToString());\n            }\n        }\n\n        public void SaveOrder(Orders order)\n        {\n            try\n            {\n                if (order.OrderId > 0)\n                    _appContext.Orders.Update(order);\n                else\n                    _appContext.Orders.Add(order);\n            }\n            catch (Exception ex)\n            {\n                throw new Exception(ex.ToString());\n            }\n        }\n\n        public bool CheckOrdersAssociatedWithProduct(long productId)\n        {\n            var ordersExist = _appContext.Orders.Where(m => m.ProductId == productId).Count() > 0;\n\n            return ordersExist;\n        }\n    }\n}"}
{"feature_name": "UID Management", "file_type": "Repository", "file_name": "UniqueIdentifiableMarkerRepository.cs", "file_content": "using Authentix.Digitrax.Common;\nusing Authentix.Digitrax.DataAccess.Repositories;\nusing Authentix.Digitrax.Model.Data;\nusing Authentix.Digitrax.Model.Models;\nusing Kendo.Mvc;\nusing Kendo.Mvc.Extensions;\nusing Kendo.Mvc.UI;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Configuration;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Transactions;\n\nnamespace Authentix.Digitrax.DataAccess.RepositoriesImplementation\n{\n    public class UniqueIdentifiableMarkerRepository : BaseEntityRepository<UimFormats, long>, IUniqueIdentifiableMarkerRepository\n    {\n        private DigitraxDbContext _appContext => (DigitraxDbContext)_context;\n        private readonly IConfiguration _config;\n\n        public UniqueIdentifiableMarkerRepository(DbContext dbContext, IConfiguration config) : base(dbContext, config) \n        {\n            _config = config;\n        }\n\n        public DataSourceResult GetAllUIMFormats(int tenantId, DataSourceRequest request, bool ActiveOnly = false)\n        {\n            var queryObj = _appContext.UimFormats.AsQueryable()\n             .Include(x => x.UimFormatSegments).ThenInclude(x => x.OrderingTypeLkp)\n             .Include(p => p.UimFormatItems)\n             .ThenInclude(m => m.Item)\n             .Where(p => p.TenantId.Equals(tenantId));\n\n            if (ActiveOnly == true)\n                queryObj = queryObj.Where(x => x.ActiveFlag == true);\n\n            if (request.Filters != null)\n            {\n                bool compositeFilter = false;\n                List<FilterDescriptor> filtersToRemove = new List<FilterDescriptor>();\n                List<FilterDescriptor> filterDescriptors = new List<FilterDescriptor>();\n                (filterDescriptors, compositeFilter) = GetFilterDescriptors(request);\n\n                foreach (var filterDesc in filterDescriptors)\n                {\n                    switch (filterDesc.Member)\n                    {\n                        case \"CodeType\":\n                            {\n                                filtersToRemove.Add(filterDesc);\n                                queryObj = queryObj.Where(x => x.TypeNavigation.VisibleValue.ToLower().Contains((string)filterDesc.Value.ToString().ToLower()));\n                                break;\n                            }\n                    }\n                }\n                RemoveFilters(request, filtersToRemove, compositeFilter);\n            }\n\n            if (request.Sorts != null)\n            {\n                List<SortDescriptor> sortsToRemove = new List<SortDescriptor>();\n                foreach (var sortDesc in request.Sorts)\n                {\n                    switch (sortDesc.Member)\n                    {\n                        case \"CodeType\":\n                            {\n                                sortsToRemove.Add(sortDesc);\n                                if (sortDesc.SortDirection == ListSortDirection.Ascending)\n                                {\n                                    queryObj = queryObj.OrderBy(x => x.TypeNavigation.VisibleValue);\n                                }\n                                else\n                                {\n                                    queryObj = queryObj.OrderByDescending(x => x.TypeNavigation.VisibleValue);\n                                }\n                                break;\n                            }\n                    }\n                }\n                foreach (var sort in sortsToRemove)\n                {\n                    request.Sorts.Remove(sort);\n                }\n            }\n\n            if (request.Sorts == null)\n                queryObj = queryObj.OrderByDescending(p => p.LastUpdatedDate ?? p.CreatedDate);\n\n            return queryObj.ToDataSourceResult(request);\n        }\n\n        public List<UimFormatItems> GetItemstoUIMMappings(int UimFormatId)\n        {\n\n            return _appContext.UimFormatItems.Include(map => map.Item).AsQueryable().Where(map => map.UimFormatId == UimFormatId).ToList();\n        }\n\n        public CodeSchemas GetCodeSchema(int? CodeSchemaId)\n        {\n            var codeSchema = _appContext.\n                CodeSchemas.\n                FirstOrDefault(x => x.CodeSchemaId == CodeSchemaId);\n\n            if (codeSchema == null)\n                return null;\n\n            codeSchema.CodeSchemasFields = _appContext.\n                CodeSchemasFields.\n                Where(x => x.CodeSchemaId == CodeSchemaId && x.CodeSchemaFieldName.Equals(\"Pin\")).\n                ToList();\n\n            return codeSchema;\n        }\n\n        public UimFormats GetUIMFormatById(int Id)\n        {\n            return _appContext.UimFormats\n                .Include(x=>x.CodeSchema)\n                    .ThenInclude(x=>x.CodeSchemasFields)\n                       .ThenInclude(x=>x.OrderingTypeLkp)\n                .Include(x=>x.TypeNavigation)\n                .Include(x => x.UimFormatItems)\n                    .ThenInclude(x => x.Item)\n                .Include(x => x.UimFormatSegments)\n                    .ThenInclude(x => x.OrderingTypeLkp)\n                .FirstOrDefault(x => x.UimFormatId == Id);\n        }\n\n        public void MapItemstoUimFormat(List<UimFormatItems> mapping)\n        {\n            _appContext.UimFormatItems.AddRange(mapping);\n        }\n        public void DeleteItemstoUimFormatMappings(List<UimFormatItems> mapping)\n        {\n            _appContext.UimFormatItems.RemoveRange(mapping);\n\n        }\n        public UimFormats GetUimFormatByName(int tenantId, string name)\n        {\n            var query = _appContext.UimFormats.AsQueryable().Where(p => p.FormatName.Equals(name) && p.TenantId==tenantId && p.ActiveFlag==true);\n            return query.FirstOrDefault();\n        }\n\n        public UimFormatItems GetExistingItem(long itemId)\n        {\n            var query = _appContext.UimFormatItems.AsQueryable().Where(p => p.ItemId.Equals(itemId));\n            return query.FirstOrDefault();\n        }\n\n        public UniqueIdentifiableMarkers GetUIM(string ui, long? ItemId)\n        {\n            try\n            {\n                var query = _appContext.UniqueIdentifiableMarkers.AsQueryable();\n                var uim = query.FirstOrDefault(m => m.UniqueIdentifier == ui);\n                if (ItemId.HasValue)\n                    uim = query.Include(x => x.UimOrder).ThenInclude(x => x.UimFormat).ThenInclude(x => x.UimFormatItems)\n                          .Include(x => x.Import).ThenInclude(x => x.UimFormat).ThenInclude(x => x.UimFormatItems)\n                        .FirstOrDefault(m => m.UniqueIdentifier == ui && (m.UimOrder.ItemId == ItemId || m.Import.ItemId == ItemId));\n                return uim;\n            }\n            catch (Exception ex)\n            {\n                throw new Exception(ex.ToString());\n            }\n        }\n        public bool IsUIM(string ui)\n        {\n            try\n            {\n                return _appContext.UniqueIdentifiableMarkers.Any(m => m.UniqueIdentifier == ui);\n            }\n            catch (Exception ex)\n            {\n                throw new Exception(ex.ToString());\n            }\n        }\n\n        public UniqueIdentifiableMarkers GetUIMDetails(string ui ,int tenantId, bool isItemDetails, bool isUIDEvents ,bool isScanHistory , bool isIncidents , bool isNoncompliance, bool isPrintAggregation, bool isAdmin = false)\n        {\n            try\n            {\n                var commandTimeoutValue = _config.GetSection(\"UIEventsSettings\").GetValue<int>(\"SqlCommandTimeout\");\n                _appContext.Database.SetCommandTimeout(commandTimeoutValue);\n                var queryE = new List<NonComplianceReports>();\n                var queryNoncompliance = _appContext.NonComplianceReports.AsQueryable().AsNoTracking().Where(k => k.Uid == ui && k.TenantId == tenantId);\n                var query = _appContext.UniqueIdentifiableMarkers.AsQueryable().Where(k => k.UniqueIdentifier == ui && k.TenantId == tenantId);\n                var queryEvent = _appContext.UniqueIdentifiableMarkers.AsQueryable().Where(k => k.UniqueIdentifier == ui && k.TenantId == tenantId);\n                if (isItemDetails)\n                {\n                    query = query.Include(m => m.UimOrder).ThenInclude(m => m.Item).ThenInclude(m => m.ItemDigitalVerficationFeatures).ThenInclude(m => m.DigitalVerificationFeature)\n                                     .Include(m => m.Import).ThenInclude(m => m.Item); //item Details\n                }\n\n                if (isUIDEvents)\n                {\n                    var commandTimeoutValueEvent = _config.GetSection(\"UIEventsSettings\").GetValue<int>(\"SqlCommandTimeout\");\n                    _appContext.Database.SetCommandTimeout(commandTimeoutValue);\n                    queryEvent = queryEvent.Include(m => m.EventStatusLookup)\n                                         .Include(m => m.CurrentStatusLkp)\n                                         .Include(m => m.UimEvents).ThenInclude(m => m.ProgramEvent).ThenInclude(m => m.EventConfiguration).ThenInclude(m => m.EventStatusLkp)\n                                         .Include(m => m.UimEvents).ThenInclude(m => m.ProgramEvent).ThenInclude(m => m.MethodTypeLkp)\n                                         .Include(m => m.UimEvents).ThenInclude(m => m.ProgramEvent).ThenInclude(m => m.StatusLkp)\n                                         .Include(m => m.UimEvents).ThenInclude(m => m.ProgramEvent).ThenInclude(m => m.ProgramEventFormValues).ThenInclude(m => m.EventDetail).ThenInclude(m => m.TypeLkp)\n                                         //.Include(m => m.UimEvents).ThenInclude(m => m.ProgramEvent).ThenInclude(m => m.ProgramEventFormValues).ThenInclude(m => m.EventDetail).ThenInclude(m => m.EventDetailOptions)\n                                         .Include(m => m.UimEvents).ThenInclude(m => m.ProgramEvent).ThenInclude(m => m.Location).ThenInclude(m => m.LocationTypeLkp)\n                                         .Include(m => m.UimEvents).ThenInclude(m => m.ProgramEvent).ThenInclude(m => m.Location).ThenInclude(m => m.Address).ThenInclude(m => m.Country)\n                                         .Include(m => m.UimEvents).ThenInclude(m => m.ProgramEvent).ThenInclude(m => m.ProgramEventDetails).ThenInclude(m => m.EventUidTypeLkp);\n                }\n                if (isScanHistory)\n                {\n                    query = query.Include(m => m.ScanHistory).ThenInclude(m => m.InspectionFlowLkp) //scan history\n                                     .Include(m => m.ScanHistory).ThenInclude(m => m.InspectionTypeLkp) //scan history\n                                     .Include(m => m.ScanHistory).ThenInclude(m => m.UimScanResultLkp) //scan history\n                                     .Include(m => m.ScanHistory).ThenInclude(m => m.Device) //scan history\n                                     .Include(m => m.ScanHistory).ThenInclude(m => m.DigitalFeature);\n                                     \n                }\n                if (isAdmin)\n                {\n                    query = query.Include(m => m.ScanHistory).ThenInclude(m => m.ApplessImages); //ApplessImages\n                }\n                if (isIncidents)\n                {\n                    query = query.Include(m => m.Incidents).ThenInclude(x => x.IncidentTypeLkp); //incidents\n                }\n\n                if (isNoncompliance)\n                {\n                    queryNoncompliance = queryNoncompliance.Include(m => m.Product)\n                         .Include(m => m.NonComplianceReportImages)\n                         .Include(m => m.Uim)\n                         .Include(m => m.Item);\n\n                    queryE = _appContext.NonComplianceReports.AsNoTracking().Where(m => m.Uid == ui && m.TenantId == tenantId).Include(m => m.Inspection).ThenInclude(m => m.ScanUim).ThenInclude(m => m.UimEvents.Where(m => m.ProgramEvent.EventConfiguration.Name == Constants.PROGRAM_SYSTEM_EVENT_APPLICATION && m.ProgramEvent.EventConfiguration.UserDefinedFlag == false))\n                    .ThenInclude(m => m.ProgramEvent).ThenInclude(m => m.ProgramEventFormValues)\n                    .ThenInclude(m => m.EventDetail).ThenInclude(m => m.EventDetailOptions).ToList();\n                }\n\n                if (isPrintAggregation)\n                {\n                    query = query.Include(m => m.Coil).ThenInclude(m => m.Carton).ThenInclude(m => m.Pallet);// Print Aggregation \n                }\n                var uim = query.SingleOrDefault(k => k.UniqueIdentifier == ui && k.TenantId == tenantId);\n                \n                if (uim != null)\n                {\n                    uim.UimEvents = queryEvent.SingleOrDefault(k => k.UniqueIdentifier == ui && k.TenantId == tenantId)?.UimEvents;\n                    if (uim.UimEvents!=null && uim.UimEvents.Any())\n                    {\n                        foreach (var uimEvent in uim?.UimEvents)\n                        {\n                            int count = 0;\n                            var uimEventFormValues = uimEvent.ProgramEvent?.ProgramEventFormValues;\n                            if (uimEventFormValues != null && uimEventFormValues.Any())\n                            {\n                                foreach (var uimEventFormValue in uimEventFormValues.Where(x=>x.EventDetail?.MasterListFlag == true))\n                                {\n                                    int EventOptionsValue;\n                                    if (int.TryParse(uimEventFormValue.Value, out EventOptionsValue))\n                                    {\n                                        var EventOptionsMetaData = _appContext.EventDetailOptions.FirstOrDefault(x => x.EventDetailOptionsId == EventOptionsValue);\n                                        uimEventFormValue.EventDetail.EventDetailOptions = new List<EventDetailOptions>{ EventOptionsMetaData };\n                                    }\n                                }\n                            }\n                        }\n                    }\n                        uim.ScanHistory = uim.ScanHistory.OrderByDescending(x => x.InspectedOn).ToList();\n\n                    if (queryE != null && queryE.Count() > 0)\n                    {\n                        foreach (var nonCompliance in queryNoncompliance.Where(u => u.Uim != null))\n                        {\n                            var nonComplianceReport = queryE.SingleOrDefault(x => x.Id == nonCompliance.Id);\n                            if (nonComplianceReport != null)\n                            {\n                                nonCompliance.Inspection = nonComplianceReport.Inspection;\n                            }\n                        }\n                    }\n\n                    uim.NonComplianceReports = queryNoncompliance.Where(u => u.Uim != null).ToList();\n\n                    //foreach (var scanHistory in uim.ScanHistory)\n                    //{\n                    //    var nonComplianceReport = queryNoncompliance.Where(x => x.InspectionId == scanHistory.Id);\n                    //    if (nonComplianceReport != null)\n                    //    {\n                    //        scanHistory.NonComplianceReports.AddRange(nonComplianceReport);\n                    //    }\n                    //}\n                    uim.Incidents = uim.Incidents.OrderByDescending(x => x.CreatedDate).ToList();\n                }\n\n                return uim;\n            }\n            catch (Exception ex)\n            {\n                throw new Exception(ex.ToString());\n            }\n        }\n\n        public int GetProductIdByUID(int uim)\n        {\n            var uimDetails = _appContext.UimEvents.Where(m => m.ProgramEvent.EventConfiguration.Name == Constants.PROGRAM_SYSTEM_EVENT_APPLICATION)\n                                      .Include(m => m.ProgramEvent).ThenInclude(m => m.ProgramEventFormValues).ThenInclude(m => m.EventDetail).ThenInclude(m => m.EventDetailOptions)\n                                     .FirstOrDefault(k => k.UimId == uim);\n            return uimDetails?.ProgramEvent?.ProgramEventFormValues?.FirstOrDefault()?.EventDetail?.EventDetailOptions?.FirstOrDefault()?.EventDetailOptionsId??0;\n        }\n\n        public UniqueIdentifiableMarkers GetUIMData(string ui)\n        {\n            try\n            {\n                var uim = _appContext.UniqueIdentifiableMarkers\n                                     .Include(m=>m.Tenant).ThenInclude(m=>m.Programs)\n                                     .Include(m => m.UimOrder).ThenInclude(m => m.Item)\n                                     .Include(m=>m.UimOrder).ThenInclude(m=>m.UimFormat).ThenInclude(m=>m.UimFormatItems)\n                                     .Include(m => m.Import).ThenInclude(m => m.Item)\n                                     .Include(m => m.Import).ThenInclude(m => m.UimFormat).ThenInclude(m => m.UimFormatItems)\n                                     .Include(m => m.UimEvents.Where(m => m.ProgramEvent.EventConfiguration.Name == Constants.PROGRAM_SYSTEM_EVENT_APPLICATION)).\n                                      ThenInclude(m => m.ProgramEvent).ThenInclude(m => m.ProgramEventFormValues).ThenInclude(m => m.EventDetail).ThenInclude(m => m.EventDetailOptions).ThenInclude(m => m.EventDetailOptionsMetadata).ThenInclude(m => m.EventDetails)\n                                     .FirstOrDefault(k => k.UniqueIdentifier == ui);\n                return uim;\n            }\n            catch (Exception ex)\n            {\n                throw new Exception(ex.ToString());\n            }\n        }\n\n        public UniqueIdentifiableMarkers GetUIMDataOptimized(string ui)\n        {\n            try\n            {\n                var uim = _appContext.UniqueIdentifiableMarkers.Where(x => x.UniqueIdentifier == ui && x.UimOrderId != null)\n                                     .Include(m => m.Tenant).ThenInclude(m => m.Programs)\n                                     .Include(m => m.UimOrder).ThenInclude(m => m.Item)\n                                     .Include(m => m.UimOrder).ThenInclude(m => m.UimFormat).ThenInclude(m => m.UimFormatItems)\n                                     .FirstOrDefault();\n                if (uim == null)\n                {\n                    uim = _appContext.UniqueIdentifiableMarkers.Where(x => x.UniqueIdentifier == ui && x.UimOrderId != null)\n                                         .Include(m => m.Tenant).ThenInclude(m => m.Programs)\n                                         .Include(m => m.Import).ThenInclude(m => m.Item)\n                                         .Include(m => m.Import).ThenInclude(m => m.UimFormat).ThenInclude(m => m.UimFormatItems)\n                                         .FirstOrDefault();\n                }\n                                     \n                if (uim != null)\n                {\n                    var events = _appContext.UimEvents.Where(m => m.UimId == uim.UniqueIdentifierId && m.ProgramEvent.EventConfiguration.Name == Constants.PROGRAM_SYSTEM_EVENT_APPLICATION)\n                                     .Include(m => m.ProgramEvent).ThenInclude(m => m.ProgramEventFormValues.Where(m=>m.EventDetail.Name == \"Application Details\"))\n                                     .FirstOrDefault();\n\n                    if (events != null && events.ProgramEvent != null && events.ProgramEvent.ProgramEventFormValues != null)\n                    {\n                        int productId = Convert.ToInt32(events.ProgramEvent.ProgramEventFormValues.FirstOrDefault()?.Value);\n                        if (productId != 0)\n                        {\n                            var eventDetails = _appContext.EventDetails.Where(x => x.EventDetailId == events.ProgramEvent.ProgramEventFormValues.FirstOrDefault().EventDetailId)\n                                               .Include(m => m.EventDetailOptions.Where(m => m.EventDetailOptionsId == productId))\n                                               .ThenInclude(m => m.EventDetailOptionsMetadata).ThenInclude(m => m.EventDetails)\n                                               .FirstOrDefault();\n\n\n                            events.ProgramEvent.ProgramEventFormValues.FirstOrDefault().EventDetail = eventDetails;\n                        }\n                    }\n\n                    if (events != null)\n                    {\n                        uim.UimEvents.Add(events);\n                    }\n                }\n\n                return uim;\n            }\n            catch (Exception ex)\n            {\n                throw new Exception(ex.ToString());\n            }\n        }\n\n        public List<UniqueIdentifiableMarkers> GetUIMsByOrderId(long OrderId, int currentBatch)\n        {\n\n            List<UniqueIdentifiableMarkers> result = default;\n            using (var scope = CreateTrancation())\n            {\n                result =  _appContext.UniqueIdentifiableMarkers.Where(x => x.UimOrderId == OrderId && x.BatchNo == currentBatch).ToList();\n                scope.Complete();\n            }\n            return result;\n\n        }\n\n        public string GetEncodingSchemeByUimId(long uimId, int tenantId)\n        {\n\n            try\n            {\n                UniqueIdentifiableMarkers result = _appContext.UniqueIdentifiableMarkers.\n                           Include(x => x.UimOrder).ThenInclude(x => x.UimFormat).ThenInclude(x => x.UimFormatItems.Where(x => x.HasEncodingSchema == true)).\n                           Include(x => x.Import).ThenInclude(x => x.UimFormat).ThenInclude(x => x.UimFormatItems.Where(x => x.HasEncodingSchema == true))\n                           .FirstOrDefault(x=>x.UniqueIdentifierId == uimId && x.TenantId == tenantId);\n\n                if (result?.UimOrder != null)\n                {\n                    return result.UimOrder.UimFormat?.UimFormatItems?.FirstOrDefault()?.EncodingSchema ?? null;\n                }\n                else\n                {\n                    return result?.Import?.UimFormat?.UimFormatItems?.FirstOrDefault()?.EncodingSchema ?? null;\n                }\n\n\n                //var encodingSchema = (from uim in _appContext.UniqueIdentifiableMarkers\n                //                      join order in _appContext.UimOrders on uim.UimOrderId equals order.Id\n                //                      join format_Items in _appContext.UimFormatItems on order.UimFormatId equals format_Items.UimFormatId\n                //                      where uim.UniqueIdentifierId.Equals(uimId) && uim.TenantId.Equals(tenantId) && format_Items.HasEncodingSchema.Equals(true)\n                //                      select format_Items.EncodingSchema)?.FirstOrDefault();\n\n                //return encodingSchema;\n            }\n            catch (Exception ex)\n            {\n                throw new Exception(ex.ToString());\n            }\n        }\n\n        private static TransactionScope CreateTrancation()\n        {\n            return new TransactionScope(TransactionScopeOption.Required,\n                                        new TransactionOptions()\n                                        {\n                                            IsolationLevel = IsolationLevel.ReadUncommitted\n                                        },\n                                       TransactionScopeAsyncFlowOption.Enabled);\n        }\n        public int GetUrlTypeByItemId(long itemId)\n        {\n            return _appContext.UimFormatItems.Where(s => s.ItemId == itemId && s.HasEncodingSchema).FirstOrDefault()?.UrlType ?? 0;\n        }\n\n        public bool validateItemForUIM(string uim, long itemId, int tenantId)\n        {\n            return _appContext.UniqueIdentifiableMarkers\n                 .Include(x => x.UimOrder).ThenInclude(x => x.Item)\n                 .Include(x => x.Import).ThenInclude(x => x.Item)\n                 .Where(x => x.TenantId == tenantId && x.UniqueIdentifier == uim && (x.UimOrder.ItemId == itemId || x.Import.ItemId == itemId)).Count() > 0;\n\n        }\n\n        public List<UniqueIdentifiableMarkers> GetUIMsBatchwise(long OrderId, int currentBatch)\n        {\n            List<UniqueIdentifiableMarkers> result = default;\n            using (var scope = CreateTrancation())\n            {\n                result = _appContext.UniqueIdentifiableMarkers\n                        .AsNoTracking()\n                        .Where(x => x.UimOrderId == OrderId && x.BatchNo == currentBatch)\n                        .Select(x => new { x.UniqueIdentifierId, x.UniqueIdentifier, x.TenantId })\n                        .ToList()\n                        .Select(x => new UniqueIdentifiableMarkers { UniqueIdentifierId = x.UniqueIdentifierId, UniqueIdentifier = x.UniqueIdentifier, TenantId = x.TenantId }).ToList();\n                scope.Complete();\n            }\n            return result;\n        }\n\n        public UimFormats GetUIMFormatByUimFormatId(int Id)\n        {\n            return _appContext.UimFormats\n                .Include(x => x.UimFormatItems)\n                .Include(x => x.TypeNavigation)\n                .FirstOrDefault(x => x.UimFormatId == Id);\n        }\n        public string GetUIMExtension(string uim)\n        {\n            try \n            {\n                var commandTimeoutValue = _config.GetSection(\"UIEventsSettings\").GetValue<int>(\"SqlCommandTimeout\");\n                _appContext.Database.SetCommandTimeout(commandTimeoutValue);\n                var data = _appContext.UniqueIdentifiableMarkers.FirstOrDefault(x => x.UniqueIdentifier.Equals(uim))?.UniqueIdentifierExtension;\n                return data;\n            }\n            catch (Exception ex)\n            {\n                throw new Exception(ex.ToString());\n            }\n        }\n        public List<Incidents> GetUIMIncedent(long UIMId)\n        {\n            var commandTimeoutValue = _config.GetSection(\"UIEventsSettings\").GetValue<int>(\"SqlCommandTimeout\");\n            _appContext.Database.SetCommandTimeout(commandTimeoutValue);\n            var data = _appContext.Incidents.Include(x => x.IncidentTypeLkp).Where(x => x.UniqueIdentifierId.Equals(UIMId)).ToList(); //incidents;\n            return data;\n        }\n\n        public long? GetItemIdByUID(string uid, int? tenantId)\n        {\n            try\n            {\n                long? itemId = null;\n                var uniqueIdentifiableMarkers = _appContext.UniqueIdentifiableMarkers\n                            .Where(x => x.UniqueIdentifier.Equals(uid) && x.TenantId.Equals(tenantId));\n\n                var uniqueIdentifiableMarker = uniqueIdentifiableMarkers.FirstOrDefault();\n\n                if (uniqueIdentifiableMarker != null && uniqueIdentifiableMarker.UimOrderId != null)\n                {\n                    itemId = uniqueIdentifiableMarkers.Include(x => x.UimOrder)\n                            .Select(x => x.UimOrder.ItemId)\n                            .SingleOrDefault();\n                }\n                else if (uniqueIdentifiableMarker != null && uniqueIdentifiableMarker.ImportId != null)\n                {\n                    itemId = uniqueIdentifiableMarkers.Include(x => x.Import)\n                               .Select(x => x.Import.ItemId)\n                               .SingleOrDefault();\n                }\n                           \n                return itemId;\n            }\n            catch (Exception ex)\n            {\n                throw new Exception(ex.ToString());\n            }\n        }\n\n        public DataSourceResult GetUIDFormats(DataSourceRequest request, int tenantId, bool ActiveOnly = false)\n        {\n            try\n            {\n                DataSourceResult result = new();\n\n                if (ActiveOnly)\n                {\n                    result = _appContext.UimFormats.Where(x => x.TenantId == tenantId && x.ActiveFlag).\n                       Select(x => new UimFormats { UimFormatId = x.UimFormatId, FormatName = x.FormatName }).\n                       ToDataSourceResult(request);\n                }\n                else\n                {\n                    result = _appContext.UimFormats.Where(x => x.TenantId == tenantId).\n                       Select(x => new UimFormats { UimFormatId = x.UimFormatId, FormatName = x.FormatName }).\n                       ToDataSourceResult(request);\n                }\n\n\n                return result;\n            }\n            catch (Exception ex)\n            {\n                throw new Exception(ex.ToString());\n            }\n        \n         }\n\n        public string GetProductSkuByUID(string uid, int? tenantId)\n        {\n\n            var queryEvent = _appContext.UniqueIdentifiableMarkers.AsQueryable().Where(k => k.UniqueIdentifier == uid && k.TenantId == tenantId);\n\n            queryEvent = queryEvent.Include(m => m.UimEvents).ThenInclude(m => m.ProgramEvent).ThenInclude(m => m.EventConfiguration)\n                                   .Include(m => m.UimEvents.Where(m => (m.ProgramEvent.EventConfiguration.Name == Constants.PROGRAM_SYSTEM_EVENT_APPLICATION && m.ProgramEvent.EventConfiguration.UserDefinedFlag == false)))\n                                   .ThenInclude(m => m.ProgramEvent).ThenInclude(m => m.ProgramEventFormValues).ThenInclude(m => m.EventDetail).ThenInclude(m => m.TypeLkp);\n\n            ICollection<UimEvents> uimEvents = queryEvent.SingleOrDefault(k => k.UniqueIdentifier == uid && k.TenantId == tenantId)?.UimEvents;\n\n            if (uimEvents != null && uimEvents.Count > 0)\n            {\n                var ProductId = uimEvents?.FirstOrDefault(x => x.ProgramEvent.EventConfiguration.Name == Constants.PROGRAM_SYSTEM_EVENT_APPLICATION)?.ProgramEvent?.ProgramEventFormValues?.FirstOrDefault(x => x.EventDetail.ProductListFlag == true)?.Value;\n\n                if (!string.IsNullOrEmpty(ProductId))\n                {\n                    var productName = _appContext.EventDetailOptions.Where(x => x.EventDetailOptionsId == Convert.ToInt32(ProductId) && x.TenantId == tenantId).Select(x => x.Name).FirstOrDefault();\n                    return productName;\n                    //List<EventDetailOptionsMetadata> productMetaData = _appContext.EventDetailOptionsMetadata\n                    //                                                    .Include(x => x.EventDetails)\n                    //                                                    .Where(x => x.EventDetailOptionsId == Convert.ToInt32(ProductId) && x.TenantId == tenantId && x.EventDetails.IsDeleted == false).ToList();\n\n                    //foreach (var metaData in productMetaData)\n                    //{\n                    //    if(metaData.EventDetails.Name.Equals(\"SKU\"))\n                    //    {\n                    //        return metaData.Value;\n                    //    }\n                    //}\n                }\n            }\n\n            return string.Empty;\n\n        }\n\n        public string GetItemNameByUID(string uid, int? tenantId)\n        {\n            try\n            {\n                long? itemId = null;\n                string itemName = string.Empty;\n                var uniqueIdentifiableMarkers = _appContext.UniqueIdentifiableMarkers\n                            .Where(x => x.UniqueIdentifier.Equals(uid) && x.TenantId.Equals(tenantId));\n\n                var uniqueIdentifiableMarker = uniqueIdentifiableMarkers.FirstOrDefault();\n\n                if (uniqueIdentifiableMarker != null && uniqueIdentifiableMarker.UimOrderId != null)\n                {\n                    itemId = uniqueIdentifiableMarkers.Include(x => x.UimOrder)\n                            .Select(x => x.UimOrder.ItemId)\n                            .SingleOrDefault();\n                }\n                else if (uniqueIdentifiableMarker != null && uniqueIdentifiableMarker.ImportId != null)\n                {\n                    itemId = uniqueIdentifiableMarkers.Include(x => x.Import)\n                               .Select(x => x.Import.ItemId)\n                               .SingleOrDefault();\n                }\n\n                itemName = _appContext.Items.Where(x => x.Id == itemId && x.TenantId.Equals(tenantId)).Select(x => x.Name).FirstOrDefault();\n                return itemName;\n            }\n            catch (Exception ex)\n            {\n                throw new Exception(ex.ToString());\n            }\n        }\n\n\n        public bool CheckUIDExistence(string uniqueIdentifier, int? tenantId)\n        {\n            var UI = _appContext.UniqueIdentifiableMarkers.Where(w => w.UniqueIdentifier.Equals(uniqueIdentifier) && w.TenantId==(tenantId)).FirstOrDefault();\n            if (UI != null)\n                return true;\n            else\n                return false;\n        }\n\n        public UniqueIdentifiableMarkers UIDData(string uniqueIdentifier, int? tenantId)\n        {\n            var UI = _appContext.UniqueIdentifiableMarkers.Where(w => w.UniqueIdentifier.Equals(uniqueIdentifier) && w.TenantId == (tenantId)).FirstOrDefault();\n            return UI;\n        }\n\n        public UniqueIdentifiableMarkers UidDataOrderImport(string uid, int? tenantId)\n        {\n           var temp =  _appContext.UniqueIdentifiableMarkers\n                                     .Include(m => m.UimOrder)\n                                        .FirstOrDefault(m =>m.UniqueIdentifier ==  uid && m.TenantId == tenantId);\n            if(temp.UimOrder == null)\n            {\n                temp = _appContext.UniqueIdentifiableMarkers\n                                    .Include(m => m.Import)\n                                    .FirstOrDefault(m => m.UniqueIdentifier == uid && m.TenantId == tenantId);\n            }\n\n            return temp;\n           \n        }\n\n    }\n}\n"}
{"feature_name": "Events", "file_type": "Service", "file_name": "IEventService - Ext.cs", "file_content": "using Authentix.Digitrax.Model.Models;\nusing Kendo.Mvc.UI;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Authentix.Digitrax.Services.Services\n{\n    public partial interface IEventService\n    {\n        public void AddEventDetail(EventDetails eventDetails);\n        public void UpdateEventDetail(EventDetails eventDetails);\n        public EventDetails GetEventDetailById(int eventDetailId);\n        public List<EventDetails> GetEventDetailsType(int tenantId);\n        public EventDetailOptionsMetadata GetEventDetailOptionMetadataById(int eventDetailOptionMetadataId);\n        public List<EventDetailOptions> GetEventDetailOptions(int eventDetailsId, int tenantId);\n        public List<ScannedDevices> GetScannedDevices();\n        public List<string> GetScannedDevicesV2();\n\n        public void UpdateEventDetailOptionMetadata(EventDetailOptionsMetadata eventDetailOptionsMetadata);\n        public DataSourceResult GetEventDetails(DataSourceRequest request, int tenantId);\n        public List<MasterLookup> GetEventDetailTypes();\n        public List<MasterLookup> GetSelectEventDetailTypes();\n        public List<MasterLookup> GetCurrencySymbols();\n        public EventDetails GetEventDetailByName(int tenantId, string name);\n        public List<EventDetails> GetSlaveEventDetailsByMasterId(int eventDetailsId);\n        public List<EventDetails> EditSlaveEventDetailsByMasterId(List<KeyValuePair<int, int>> keyValuePairs);\n\n        public List<EventDetailOptionsMetadata> GetEventDetailOptionMetadataByOptionId(int optionId, int tenantId);\n        public EventDetails GetProductsList(int tenantId, bool getDetails = false);\n        public List<string> GetEventDetailOptionsName(List<int> eventDetailsOptionId);\n        public EventDetails GetEventDetailOptionsMetaDataByEventDetailId(int eventDetailsId, int tenantId);\n        public EventDetailOptions GetEventDetailOptionsById(int optionId, int tenantId);\n        public void UpdateEventDetailOptions(List<EventDetailOptions> eventDetailOptions);\n        public EventDetails GetEventDetailByIdV2(int eventDetailId);\n        public EventDetailOptions GetSlaveEventDetails(int eventDetailsId);\n\n    }\n}\n"}
{"feature_name": "Events", "file_type": "Service", "file_name": "IEventService.cs", "file_content": "using Authentix.Digitrax.Model.Models;\nusing Kendo.Mvc.UI;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Authentix.Digitrax.Services.Services\n{\n    public partial interface IEventService\n    {\n        public bool AddEventStatus(EventStatusLookup eventStatus);\n        public DataSourceResult GetEventStatus(int tenantId, DataSourceRequest request);\n        public void UpdateEventStatus(EventStatusLookup eventStatus);\n        public EventStatusLookup GetEventStatusbyId(int tenantId, int Id);\n        public bool AddEventConfiguration(EventConfigurations eventConfig);\n        public DataSourceResult GetEventConfigurations(int tenantId, DataSourceRequest request);\n        public EventConfigurations GetEventConfigById(int tenantId, int Id);\n        public void UpdateEventConfiguration(EventConfigurations eventConfig);\n        public bool AddEventForm(EventForms eventForm);\n        public DataSourceResult GetEventForms(int tenantId, DataSourceRequest request);\n        public EventForms GetEventFormById(int tenantId, int Id);\n        public bool UpdateEventForm(EventForms eventForm);\n        public MasterLookup GetLookupById(int Id);\n        public MasterLookup GetLookupByTypeAndValue(string type, string value);\n        public EventForms GetEventFormByName(int tenantId, string name);\n        public EventStatusLookup GetEventStatusByColor(int tenantId, string color);\n        public EventStatusLookup GetEventStatusByName(int tenantId, string name, bool ProductJourneyFlag = false);\n        public EventConfigurations GetEventConfigByName(int tenantId, string name);\n        public List<EventConfigurations> GetEventConfig(int tenantId);\n        IList<MasterLookup> GetAllEventUIDTypes();\n        IList<MasterLookup> GetAllGeocodeEnforceAltertTypes();\n        bool AddProductNonComplianceForm(ProductNonComplianceForm productNonComplianceForm);\n        bool DelNonComplianceForm(EventForms eventForm);\n        EventForms GetNonComplianceFormById(int tenantId, int Id);\n        EventForms GetNonComplianceFormByProductId(int tenantId, int Id);\n    }\n}\n"}
{"feature_name": "Import Processing", "file_type": "Service", "file_name": "IImportsService.cs", "file_content": "using Authentix.Digitrax.Model.Models;\nusing Kendo.Mvc.UI;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Authentix.Digitrax.Services.Services\n{\n    public interface IImportsService\n    {\n        public List<Items> GetAllItems(int tenantId);\n\n        void SaveImport(Imports aggregationRequest);\n\n        DataSourceResult GetImports(DataSourceRequest request, int tenantId);\n\n        Imports GetImportById(long id, int tenantId);\n\n        Imports GetExternalUIDsImportStatusDetails(long id, int tenantId);\n    }\n}\n"}
{"feature_name": "Order Processing", "file_type": "Service", "file_name": "IOrderService.cs", "file_content": "using Authentix.Digitrax.Model.Models;\nusing Kendo.Mvc.UI;\nusing System.Collections.Generic;\n\nnamespace Authentix.Digitrax.Services.Services\n{\n    public interface IOrderService\n    {\n        IList<Orders> GetAllUnitLevelOrders();\n        (IList<Orders> data, int total) GetAllUnitLevelOrders(DataSourceRequest request, int tenantId);\n        IList<Orders> GetAllAggregatedLevelOrders();\n        (IList<Orders> data, int total) GetAllAggregatedLevelOrders(DataSourceRequest request, int tenantId);\n        IList<Orders> GetAllUploadCodesOrders();\n        (IList<Orders> data, int total) GetAllUploadCodesOrders(DataSourceRequest request, int tenantId);\n        Orders GetOrder(long orderId);\n        Orders GetOrderByCode(string orderNumber);\n        bool AddOrder(Orders order);\n        bool AddUploadCodesOrder(Orders order, string priority);\n        bool RecallOrder(Orders order);\n        bool CheckOrdersAssociatedWithProduct(long prodId);\n        public IList<MasterLookup> GetAllOrderTypes();\n        public IList<MasterLookup> GetAllOrderPriorities();\n        public IList<MasterLookup> GetAllOrderStatuses();\n        public IList<MasterLookup> GetAllRecallReasons();\n    }\n}"}
{"feature_name": "UID Management", "file_type": "Service", "file_name": "IUniqueIdentifiableMarkerService.cs", "file_content": "using Authentix.Digitrax.Model.Models;\nusing Kendo.Mvc.UI;\nusing System.Collections.Generic;\n\nnamespace Authentix.Digitrax.Services.Services\n{\n    public interface IUniqueIdentifiableMarkerService\n    {\n        public bool AddUimFormat(UimFormats uimFormats);\n        public UimFormats GetUimFormatById(int Id);\n        public DataSourceResult GetUIMFormats(int tenantId, DataSourceRequest request, bool ActiveOnly = false);\n        public List<MasterLookup> GetCodeTypes();\n        public List<MasterLookup> GetOrderingTypes();\n        public List<UimFormatItems> GetItemstoUIMMappings(int UimFormatId);\n        public CodeSchemas GetCodeSchema(int? CodeSchemaId);\n        public void CreateCodeSchema(CodeSchemas codeSchema);\n        public void UpdateUimFormat(UimFormats uimFormat);\n        public void MapItemstoUimFormat(List<UimFormatItems> mapping);\n        public void DeleteItemstoUimFormatMappings(List<UimFormatItems> mapping);\n        public void UpdateCodeSchema(CodeSchemas codeSchema);\n        public UimFormats GetUimFormatByName(int tenantId,string name);\n        public MasterLookup GetLookupById(int Id);\n        public UimFormatItems GetExistingItem(long itemId);\n        public bool CheckItemAssociationWithUIMFormat(int tenantId, int itemId, int? uimFormatId = null);\n        UniqueIdentifiableMarkers GetUIM(string ui, long? ItemId=null);\n        bool IsUIM(string ui);\n        UniqueIdentifiableMarkers GetUIMDetails(string ui, int tenantId, bool isItemDetails=false , bool isUIDEvents = false, bool isScanHistory = false, bool isIncidents = false, bool isPrintAggregation = false, bool isAdmin = false, bool noncompliance = false);\n        UniqueIdentifiableMarkers GetUIMData(string ui);\n        UniqueIdentifiableMarkers GetUIMDataOptimized(string ui);\n        List<UniqueIdentifiableMarkers> GetUIMsByOrderId(long OrderId, int currentBatch);\n        public string GetEncodingSchemeByUimId(long uimId, int tenantId);\n        public int GetUrlTypeByItemId(long itemId);\n        public List<MasterLookup> GetUrlTypes();\n        List<UniqueIdentifiableMarkers> GetUIMsBatchwise(long OrderId, int currentBatch);\n        public UimFormats GetUIMFormatByUimFormatId(int Id);\n        bool validateItemForUIM(string uim, long itemId, int tenantId);\n        List<Incidents> GetUIMIncedent(long UIMId);\n        string GetUIMExtension(string uim);\n        int GetProductIdByUID(int uim);\n        public long? GetItemIdByUID(string uid, int? tenantId);\n        public DataSourceResult GetUIDFormats(DataSourceRequest request, int tenantId, bool ActiveOnly = false);\n        public string GetItemNameByUID(string uid, int? tenantId);\n        public string GetProductSkuByUID(string uid, int? tenantId);\n        public bool CheckUIDExistence(string uid, int? tenantId);\n        public UniqueIdentifiableMarkers UIDData(string uid, int? tenantId);\n        public UniqueIdentifiableMarkers UidDataOrderImport(string uid, int tenantId);\n    }\n}"}
{"feature_name": "Events", "file_type": "Service", "file_name": "EventService - Ext.cs", "file_content": "using Authentix.Digitrax.Common;\nusing Authentix.Digitrax.Common.Models;\nusing Authentix.Digitrax.DataAccess.UnitOfWork;\nusing Authentix.Digitrax.Model.Models;\nusing Authentix.Digitrax.Services.Services;\nusing Kendo.Mvc.UI;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Authentix.Digitrax.Services.ServicesImplementation\n{\n    public partial class EventService : BaseService, IEventService\n    {\n        public void AddEventDetail(EventDetails eventDetails)\n        {\n            eventDetails.CreatedDate = DateTime.Now;\n            eventDetails.EffectiveStartDate = DateTime.Now;\n            eventDetails.EffectiveEndDate = null;\n            _unitOfWork.EventDetails.Add(eventDetails);\n            _unitOfWork.SaveChanges();\n        }\n\n        public void UpdateEventDetail(EventDetails eventDetails)\n        {\n            eventDetails.LastUpdatedDate = DateTime.Now;\n            _unitOfWork.EventDetails.UpdateEventDetail(eventDetails);\n        }\n\n        public EventDetails GetEventDetailById(int eventDetailId)\n        {\n            return _unitOfWork.EventDetails.GetEventDetailById(eventDetailId);\n        }\n        public List<EventDetails> GetEventDetailsType(int tenantId)\n        {\n            return _unitOfWork.EventDetails.GetEventDetailsType(tenantId);\n        }\n        public DataSourceResult GetEventDetails(DataSourceRequest request, int tenantId)\n        {\n            return _unitOfWork.EventDetails.GetEventDetails(request, tenantId);\n        }\n        public List<MasterLookup> GetEventDetailTypes()\n        {\n            return _unitOfWork.Lookups.GetLookupsByType(Constants.EVENT_DETAIL_LOOKUP_TYPE);\n        }\n        public List<MasterLookup> GetSelectEventDetailTypes()\n        {\n            return _unitOfWork.Lookups.GetLookupsByType(Constants.EVENT_DETAIL_SELECT_DISPLAY_LOOKUP_TYPE);\n        }\n        public List<MasterLookup> GetCurrencySymbols()\n        {\n            return _unitOfWork.Lookups.GetLookupsByType(Constants.EVENT_DETAIL_CURRENCY_SYMBOLS_LOOKUP_TYPE);\n        }\n        public EventDetailOptionsMetadata GetEventDetailOptionMetadataById(int eventDetailOptionMetadataId)\n        {\n            return _unitOfWork.EventDetails.GetEventDetailOptionMetadataById(eventDetailOptionMetadataId);\n        }\n        public void UpdateEventDetailOptionMetadata(EventDetailOptionsMetadata eventDetailOptionsMetadata)\n        {\n            _unitOfWork.EventDetails.UpdateEventDetailOptionMetadata(eventDetailOptionsMetadata);\n        }\n        public List<EventDetailOptions> GetEventDetailOptions(int eventDetailsId, int tenantId)\n        {\n            return _unitOfWork.EventDetails.GetEventDetailOptions(eventDetailsId, tenantId);\n        }\n        public List<ScannedDevices> GetScannedDevices()\n        {\n            return _unitOfWork.EventDetails.GetScannedDevices();\n        }\n        public List<string> GetScannedDevicesV2()\n        {\n            return _unitOfWork.EventDetails.GetScannedDevicesV2();\n        }\n        public EventDetails GetEventDetailByName(int tenantId, string name)\n        {\n            return _unitOfWork.EventDetails.GetEventDetailByName(tenantId, name);\n        }\n\n        public List<EventDetails> GetSlaveEventDetailsByMasterId(int eventDetailsId)\n        {\n            return _unitOfWork.EventDetails.GetSlaveEventDetailsByMasterId(eventDetailsId);\n        }\n\n        public List<EventDetails> EditSlaveEventDetailsByMasterId(List<KeyValuePair<int, int>> keyValuePairs)\n        {\n            return _unitOfWork.EventDetails.EditSlaveEventDetailsByMasterId(keyValuePairs);\n        }\n\n        public List<EventDetailOptionsMetadata> GetEventDetailOptionMetadataByOptionId(int optionId, int tenantId)\n        {\n            return _unitOfWork.EventDetails.GetEventDetailOptionMetadataByOptionId(optionId, tenantId);\n        }\n\n        public EventStatusLookup GetEventStatusByColor(int tenantId, string color)\n        {\n            return _unitOfWork.Event.GetEventStatusByColor(tenantId, color);\n        }\n\n        public EventStatusLookup GetEventStatusByName(int tenantId, string name, bool ProductJourneyFlag = false)\n        {\n            return _unitOfWork.Event.GetEventStatusByName(tenantId, name, ProductJourneyFlag);\n        }\n\n        public EventDetails GetProductsList(int tenantId, bool getDetails = false)\n        {\n            return _unitOfWork.EventDetails.GetProductsList(tenantId, getDetails);\n        }\n\n        public List<string> GetEventDetailOptionsName(List<int> eventDetailsOptionId)\n        {\n            return _unitOfWork.EventDetails.GetEventDetailOptionsName(eventDetailsOptionId);\n        }\n\n        public EventDetails GetEventDetailOptionsMetaDataByEventDetailId(int eventDetailsId, int tenantId)\n        {\n            return _unitOfWork.EventDetails.GetEventDetailOptionsMetaDataByEventDetailId(eventDetailsId, tenantId);\n        }\n        public EventDetailOptions GetEventDetailOptionsById(int optionId, int tenantId)\n        {\n            return _unitOfWork.EventDetails.GetEventDetailOptionsById(optionId, tenantId);\n        }\n        public void UpdateEventDetailOptions(List<EventDetailOptions> eventDetailOptions)\n        {\n            _unitOfWork.EventDetails.UpdateEventDetailOptions(eventDetailOptions);\n        }\n        public EventDetails GetEventDetailByIdV2(int eventDetailId)\n        {\n            return _unitOfWork.EventDetails.GetEventDetailByIdV2(eventDetailId);\n        }\n        public EventDetailOptions GetSlaveEventDetails(int eventDetailId)\n        {\n            return _unitOfWork.EventDetails.GetSlaveEventDetails(eventDetailId);\n        }\n    }\n}\n"}
{"feature_name": "Events", "file_type": "Service", "file_name": "EventService.cs", "file_content": "using Authentix.Digitrax.Common;\nusing Authentix.Digitrax.DataAccess.UnitOfWork;\nusing Authentix.Digitrax.Model.Models;\nusing Authentix.Digitrax.Services.Services;\nusing Kendo.Mvc.UI;\nusing System;\nusing System.Collections.Generic;\n\nnamespace Authentix.Digitrax.Services.ServicesImplementation\n{\n    public partial class EventService : BaseService, IEventService\n    {\n        public EventService(IUnitOfWork unitOfWork) : base(unitOfWork)\n        { \n        }\n\n        public bool AddEventStatus(EventStatusLookup eventStatus)\n        {\n            try\n            {\n                _unitOfWork.Event.Add(eventStatus);\n                _unitOfWork.SaveChanges();\n                return true;\n            }\n            catch (Exception ex)\n            {\n                throw ex;\n            }\n        }\n\n        public DataSourceResult GetEventStatus(int tenantId, DataSourceRequest request)\n        {\n            return _unitOfWork.Event.GetAllEventStatus(tenantId, request);\n        }\n        public void UpdateEventStatus(EventStatusLookup eventStatus)\n        {\n            _unitOfWork.Event.Update(eventStatus);\n            _unitOfWork.SaveChanges();\n        }\n        public EventStatusLookup GetEventStatusbyId(int tenantId, int Id)\n        {\n            return _unitOfWork.Event.GetEventStatusbyId(tenantId, Id);\n        }\n\n        public bool AddEventConfiguration(EventConfigurations eventConfig)\n        {\n            try\n            {\n                _unitOfWork.Event.AddEventConfiguration(eventConfig);\n                _unitOfWork.SaveChanges();\n                return true;\n            }\n            catch (Exception ex)\n            {\n                throw ex;\n            }\n        }\n        public DataSourceResult GetEventConfigurations(int tenantId, DataSourceRequest request)\n        {\n            return _unitOfWork.Event.GetAllEventConfigurations(tenantId, request);\n        }\n        public EventConfigurations GetEventConfigById(int tenantId, int Id)\n        {\n            return _unitOfWork.Event.GetEventConfigById(tenantId, Id);\n        }\n        public void UpdateEventConfiguration(EventConfigurations eventConfig)\n        {\n            _unitOfWork.Event.UpdateEventConfig(eventConfig);\n            _unitOfWork.SaveChanges();\n        }\n\n        public bool AddEventForm(EventForms eventForm)\n        {\n            try\n            {\n                _unitOfWork.Event.AddEventForm(eventForm);\n                _unitOfWork.SaveChanges();\n                return true;\n            }\n            catch (Exception ex)\n            {\n                throw ex;\n            }\n        }\n        public DataSourceResult GetEventForms(int tenantId, DataSourceRequest request)\n        {\n            return _unitOfWork.Event.GetAllEventForms(tenantId, request);\n        }\n\n        public EventForms GetEventFormById(int tenantId, int Id)\n        {\n            return _unitOfWork.Event.GetEventFormById(tenantId, Id);\n        }\n        public bool UpdateEventForm(EventForms eventForm)\n        {\n            _unitOfWork.Event.UpdateEventForm(eventForm);\n            _unitOfWork.SaveChanges();\n            return true;\n        }\n\n        public MasterLookup GetLookupById(int Id)\n        {\n            return _unitOfWork.Lookups.GetLookupById(Id);\n        }\n        public MasterLookup GetLookupByTypeAndValue(string type, string value)\n        {\n            return _unitOfWork.Lookups.GetLookupByTypeAndValue(type, value);\n        }\n\n        public EventForms GetEventFormByName(int tenantId, string name)\n        {\n            return _unitOfWork.Event.GetEventFormByName(tenantId, name);\n        }\n        public EventConfigurations GetEventConfigByName(int tenantId, string name)\n        {\n            return _unitOfWork.Event.GetEventConfigByName(tenantId, name);\n        }\n        public List<EventConfigurations> GetEventConfig(int tenantId)\n        {\n            return _unitOfWork.Event.GetEventConfig(tenantId);\n        }\n        public IList<MasterLookup> GetAllEventUIDTypes()\n        {\n            return _unitOfWork.Lookups.GetLookupsByType(Constants.EVENT_UID_TYPE);\n        }\n\n        public IList<MasterLookup> GetAllGeocodeEnforceAltertTypes()\n        {\n            return _unitOfWork.Lookups.GetLookupsByType(Constants.EVENT_GEOCODE_ENFORCE_ALERT_TYPE);\n        }\n        public bool AddProductNonComplianceForm(ProductNonComplianceForm productNonComplianceForm)\n        {\n            return _unitOfWork.Event.AddProductNonComplianceForm(productNonComplianceForm);\n        }\n        public bool DelNonComplianceForm(EventForms eventForm)\n        {\n            return _unitOfWork.Event.DelNonComplianceForm(eventForm);\n        }\n        public EventForms GetNonComplianceFormById(int tenantId, int Id)\n        {\n            return _unitOfWork.Event.GetNonComplianceFormById(tenantId, Id);\n        }\n        public EventForms GetNonComplianceFormByProductId(int tenantId, int Id)\n        {\n            return _unitOfWork.Event.GetNonComplianceFormByProductId(tenantId, Id);\n        }\n    }\n}"}
{"feature_name": "Import Processing", "file_type": "Service", "file_name": "ImportsService.cs", "file_content": "using Authentix.Digitrax.Common;\nusing Authentix.Digitrax.DataAccess.UnitOfWork;\nusing Authentix.Digitrax.Model.Models;\nusing Authentix.Digitrax.Services.Services;\nusing Kendo.Mvc.UI;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Authentix.Digitrax.Services.ServicesImplementation\n{\n    public class ImportsService : BaseService, IImportsService\n    {\n        private readonly ILookupService _lookupService;\n\n        public ImportsService(ILookupService lookupService, IUnitOfWork unitOfWork) : base(unitOfWork) \n        {\n            _lookupService = lookupService;\n        }\n\n        public List<Items> GetAllItems(int tenantId)\n        {\n            int codeTypeId = _lookupService.GetLookupByTypeAndValue(Constants.Code_Format_Type, Constants.Code_Format_External)?.MasterLookupId ?? 0;\n            return _unitOfWork.Imports.GetAllItems(tenantId, codeTypeId);\n        }\n\n        public void SaveImport(Imports import)\n        {\n            if (import.ImportId > 0)\n                _unitOfWork.Imports.Update(import);\n            else\n                _unitOfWork.Imports.Add(import);\n\n            _unitOfWork.SaveChanges();\n        }\n\n        public DataSourceResult GetImports(DataSourceRequest request, int tenantId)\n        {\n            return _unitOfWork.Imports.GetImports(request, tenantId);\n        }\n\n        public Imports GetImportById(long id, int tenantId)\n        {\n            return _unitOfWork.Imports.GetImportById(id, tenantId);\n        }\n\n        public Imports GetExternalUIDsImportStatusDetails(long id, int tenantId)\n        {\n            return _unitOfWork.Imports.GetExternalUIDsImportStatusDetails(id, tenantId);\n        }\n    }\n}\n"}
{"feature_name": "UID Management", "file_type": "Service", "file_name": "UniqueIdentifiableMarkerService.cs", "file_content": "using Authentix.Digitrax.Common;\nusing Authentix.Digitrax.Common.Models;\nusing Authentix.Digitrax.DataAccess.UnitOfWork;\nusing Authentix.Digitrax.Model.Models;\nusing Authentix.Digitrax.Services.Services;\nusing Kendo.Mvc.UI;\nusing System;\nusing System.Collections.Generic;\n\nnamespace Authentix.Digitrax.Services.ServicesImplementation\n{\n    public class UniqueIdentifiableMarkerService : BaseService, IUniqueIdentifiableMarkerService\n    {\n        public UniqueIdentifiableMarkerService(IUnitOfWork unitOfWork) : base(unitOfWork) { }\n\n        public bool AddUimFormat(UimFormats uimFormats)\n        {\n            try\n            {\n                var codeType = _unitOfWork.Lookups.GetLookupById(uimFormats.Type);\n                if (codeType == null)\n                {\n                    throw new Exception(\"Code Type with the given Id does not exist\");\n                }\n\n                uimFormats.CreatedDate = DateTime.Now;\n                uimFormats.EffectiveStartDate = DateTime.Now;\n\n                _unitOfWork.UimFormats.Add(uimFormats);\n                _unitOfWork.SaveChanges();\n                return true;\n            }\n            catch (Exception ex)\n            {\n                throw ex;\n            }\n        }\n\n        public DataSourceResult GetUIMFormats(int tenantId, DataSourceRequest request, bool ActiveOnly)\n        {\n            return _unitOfWork.UimFormats.GetAllUIMFormats(tenantId, request, ActiveOnly);\n        }\n\n        public List<MasterLookup> GetCodeTypes()\n        {\n            return _unitOfWork.Lookups.GetLookupsByType(Constants.Code_Format_Type);\n        }\n\n        public List<MasterLookup> GetOrderingTypes()\n        {\n            return _unitOfWork.Lookups.GetLookupsByType(Constants.Ordering_Type);\n        }\n\n        public List<UimFormatItems> GetItemstoUIMMappings(int UimFormatId)\n        {\n            return _unitOfWork.UimFormats.GetItemstoUIMMappings(UimFormatId);\n        }\n\n        public CodeSchemas GetCodeSchema(int? CodeSchemaId)\n        {\n            return _unitOfWork.UimFormats.GetCodeSchema(CodeSchemaId);\n        }\n\n        public UimFormats GetUimFormatById(int Id)\n        {\n            return _unitOfWork.UimFormats.GetUIMFormatById(Id);\n        }\n\n        public void CreateCodeSchema(CodeSchemas codeSchema)\n        {\n\n            _unitOfWork.CodeSchemas.Add(codeSchema);\n            _unitOfWork.SaveChanges();\n        }\n\n        public void UpdateUimFormat(UimFormats uimFormat)\n        {\n            _unitOfWork.UimFormats.Update(uimFormat);\n            _unitOfWork.SaveChanges();\n        }\n\n        public void MapItemstoUimFormat(List<UimFormatItems> mapping)\n        {\n            _unitOfWork.UimFormats.MapItemstoUimFormat(mapping);\n            _unitOfWork.SaveChanges();\n        }\n\n        public void DeleteItemstoUimFormatMappings(List<UimFormatItems> mapping)\n        {\n            _unitOfWork.UimFormats.DeleteItemstoUimFormatMappings(mapping);\n            _unitOfWork.SaveChanges();\n        }\n\n        public void UpdateCodeSchema(CodeSchemas codeSchema)\n        {\n            _unitOfWork.CodeSchemas.Update(codeSchema);\n            _unitOfWork.SaveChanges();\n        }\n\n        public UimFormats GetUimFormatByName(int tenantId,string name)\n        {\n            return _unitOfWork.UimFormats.GetUimFormatByName(tenantId ,name);\n        }\n\n        public MasterLookup GetLookupById(int Id)\n        {\n            return _unitOfWork.Lookups.GetLookupById(Id);\n        }\n\n        public UimFormatItems GetExistingItem(long itemId)\n        {\n            return _unitOfWork.UimFormats.GetExistingItem(itemId);\n        }\n\n        public bool CheckItemAssociationWithUIMFormat(int tenantId, int itemId, int? uimFormatId = null)\n        {\n            return _unitOfWork.Items.CheckItemAssociationWithUIMFormat(tenantId, itemId, uimFormatId);\n        }\n\n        public UniqueIdentifiableMarkers GetUIM(string ui, long? ItemId)\n        {\n            return _unitOfWork.UimFormats.GetUIM(ui, ItemId);\n        }\n        public bool IsUIM(string ui)\n        {\n            return _unitOfWork.UimFormats.IsUIM(ui);\n        }\n\n        public UniqueIdentifiableMarkers GetUIMDetails(string ui ,int tenantId, bool itemDetails, bool isUIDEvents, bool isScanHistory, bool isIncidents, bool isPrintAggregation, bool isAdmin = false, bool noncompliance = false)\n        {\n            return _unitOfWork.UimFormats.GetUIMDetails(ui ,tenantId ,itemDetails, isUIDEvents, isScanHistory, isIncidents, noncompliance, isPrintAggregation, isAdmin);\n        }\n        public UniqueIdentifiableMarkers GetUIMData(string ui)\n        {\n            return _unitOfWork.UimFormats.GetUIMData(ui);\n        }\n\n        public UniqueIdentifiableMarkers GetUIMDataOptimized(string ui)\n        {\n            return _unitOfWork.UimFormats.GetUIMDataOptimized(ui);\n        }\n        public List<UniqueIdentifiableMarkers> GetUIMsByOrderId(long OrderId, int currentBatch)\n        {\n            return _unitOfWork.UimFormats.GetUIMsByOrderId(OrderId, currentBatch);\n        }\n\n        public string GetEncodingSchemeByUimId(long uimId, int tenantId)\n        {\n            return _unitOfWork.UimFormats.GetEncodingSchemeByUimId(uimId, tenantId);\n        }\n\n        public int GetUrlTypeByItemId(long itemId)\n        {\n            return _unitOfWork.UimFormats.GetUrlTypeByItemId(itemId);\n        }\n        public List<MasterLookup> GetUrlTypes()\n        {\n            return _unitOfWork.Lookups.GetLookupsByType(Constants.URL_TYPE);\n        }\n\n        public List<UniqueIdentifiableMarkers> GetUIMsBatchwise(long OrderId, int currentBatch)\n        {\n            return _unitOfWork.UimFormats.GetUIMsBatchwise(OrderId, currentBatch);\n        }\n\n\n        public UimFormats GetUIMFormatByUimFormatId(int Id)\n        {\n            return _unitOfWork.UimFormats.GetUIMFormatByUimFormatId(Id);\n        }\n\n        public bool validateItemForUIM(string uim, long itemId, int tenantId)\n        {\n            return _unitOfWork.UimFormats.validateItemForUIM(uim, itemId, tenantId);\n        }\n        public List<Incidents> GetUIMIncedent(long UIMId)\n        {\n             return _unitOfWork.UimFormats.GetUIMIncedent(UIMId);\n        }\n        public string GetUIMExtension(string uim)\n        {\n            return _unitOfWork.UimFormats.GetUIMExtension(uim);\n        }\n        public int GetProductIdByUID(int uim)\n        {\n            return _unitOfWork.UimFormats.GetProductIdByUID(uim);\n        }\n\n        public long? GetItemIdByUID(string uid, int? tenantId)\n        {\n            return _unitOfWork.UimFormats.GetItemIdByUID(uid, tenantId);\n        }\n\n\n        public DataSourceResult GetUIDFormats(DataSourceRequest request, int tenantId, bool ActiveOnly = false)\n        {\n            return _unitOfWork.UimFormats.GetUIDFormats(request, tenantId, ActiveOnly);\n        }\n        public string GetItemNameByUID(string uid, int? tenantId)\n        {\n            return _unitOfWork.UimFormats.GetItemNameByUID(uid, tenantId);\n        }\n\n        public string GetProductSkuByUID(string uid, int? tenantId)\n        {\n            return _unitOfWork.UimFormats.GetProductSkuByUID(uid, tenantId);\n        }\n\n        public bool CheckUIDExistence(string uid, int? tenantId)\n        {\n            return _unitOfWork.UimFormats.CheckUIDExistence(uid, tenantId);\n        }\n\n        public UniqueIdentifiableMarkers UIDData(string uid, int? tenantId)\n        {\n            return _unitOfWork.UimFormats.UIDData(uid, tenantId);\n\n        }\n        public UniqueIdentifiableMarkers UidDataOrderImport(string uid, int tenantId)\n        {\n            return _unitOfWork.UimFormats.UidDataOrderImport(uid, tenantId);\n        }\n\n    }\n}"}
{"feature_name": "Events", "file_type": "Controller", "file_name": "EventsController - Ext.cs", "file_content": "using Authentix.Digitrax.Authorization.Services;\nusing Authentix.Digitrax.Common;\nusing Authentix.Digitrax.Common.Utilities;\nusing Authentix.Digitrax.Model.Models;\nusing Authentix.Digitrax.Model.Models.Elasticsearch;\nusing Authentix.Digitrax.Services.ServiceModels;\nusing AuthentixDigitraxPlatform.Models;\nusing Azure.Storage.Blobs;\nusing Kendo.Mvc;\nusing Kendo.Mvc.Extensions;\nusing Kendo.Mvc.UI;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Data.SqlClient;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\nusing System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\nusing System.Xml.Linq;\n\nnamespace AuthentixDigitraxPlatform.Controllers\n{\n    public partial class EventsController : ControllerBase\n    {\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Add)]\n        [HttpPost(\"EventDetails\")]\n        public IActionResult AddEventDetail([FromBody] EventDetailsViewModel eventDetails)\n        {\n            try\n            {\n                var validityResult = ValidateEventDetailsViewModel(eventDetails);\n                if (validityResult.Item1 == false)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, validityResult.Item2));\n                var eventDetail = _mapper.Map<EventDetailsViewModel, EventDetails>(eventDetails);\n                eventDetail.TenantId = _currentTenant.Tenant_DB_Id;\n                eventDetail.ActiveFlag = true;\n                eventDetail.CreatedBy = HttpContext.User.Identity.Name;\n\n                if (eventDetail.EventDetailOptions != null)\n                {\n                    foreach (var option in eventDetail.EventDetailOptions)\n                    {\n                        option.TenantId = _currentTenant.Tenant_DB_Id;\n                        //if(option.EventDetailOptionsMetadata != null && eventDetail.MasterListFlag == true && eventDetail.MasterEventDetailsId == null)\n                        //{\n                        //    foreach (var metaData in option.EventDetailOptionsMetadata)\n                        //    {\n                        //        metaData.TenantId = _currentTenant.Tenant_DB_Id;\n                        //    }\n                        //}\n                    }\n                }\n                _eventService.AddEventDetail(eventDetail);\n\n                if (eventDetail.MasterEventDetailsId.HasValue)\n                {\n                    var eventDetailJson = _mapper.Map<EventDetailsViewModel, EventDetailsMetadataJsonViewModel>(eventDetails);\n\n                    if (eventDetails.SymbolLkpId != null)\n                    {\n                        eventDetailJson.CurrencySymbol = _lookupService.GetLookupById((int)eventDetails.SymbolLkpId).VisibleValue;\n                    }\n                    if (eventDetails.DisplayTypeLkpId != null)\n                    {\n                        eventDetailJson.DisplayTypeName = _lookupService.GetLookupById((int)eventDetails.DisplayTypeLkpId).VisibleValue;\n                    }\n                    if (eventDetails.TypeLkpId != 0)\n                    {\n                        eventDetailJson.TypeName = _lookupService.GetLookupById(eventDetails.TypeLkpId).VisibleValue;\n                    }\n\n                    var masterEventDetail = _eventService.GetEventDetailByIdV2(eventDetail.MasterEventDetailsId.Value);\n                    \n                    foreach(var option in masterEventDetail.EventDetailOptions)\n                    {\n                        //if (option.EventDetailOptionsMetadata != null)\n                        //{\n                        //    if(option.EventDetailOptionsMetadata.FirstOrDefault(x=>x.EventDetailsId == eventDetail.EventDetailId) != null)\n                        //    {\n                        //        continue;\n                        //    }\n                        //}\n                        //else\n                        //    option.EventDetailOptionsMetadata = new List<EventDetailOptionsMetadata>();\n\n                        //var newMasterEventDetailOptionMetaData = new EventDetailOptionsMetadata();\n                        //newMasterEventDetailOptionMetaData.EventDetailsId = eventDetail.EventDetailId;\n                        //newMasterEventDetailOptionMetaData.TenantId = _currentTenant.Tenant_DB_Id;\n\n                        eventDetailJson.EventDetailId = eventDetail.EventDetailId;\n                        eventDetailJson.Name = eventDetail.Name;\n\n                        if(option.MetadataJson == null) \n                        {\n                           option.MetadataJson = JsonConvert.SerializeObject(new List<EventDetailsMetadataJsonViewModel> { eventDetailJson });\n                        }\n                        else\n                        {\n                           var metadataList = JsonConvert.DeserializeObject<List<EventDetailsMetadataJsonViewModel>>(option.MetadataJson);\n                           metadataList.Add(eventDetailJson);\n                           option.MetadataJson = JsonConvert.SerializeObject(metadataList);\n                        }\n                        //option.EventDetailOptionsMetadata.Add(newMasterEventDetailOptionMetaData);\n                    }\n                    _eventService.UpdateEventDetail(masterEventDetail);\n                }\n                // return StatusCode(StatusCodes.Status200OK, \"Event Detail has been Added successfully\");\n                return StatusCode(StatusCodes.Status200OK, _mapper.Map<EventDetailsViewModel>(eventDetail));\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}...Params: {JsonConvert.SerializeObject(eventDetails)}\", ex.ToString(), true);\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Edit)]\n        [HttpDelete(\"EventDetails/{Id}\")]\n        public IActionResult DeleteEventDetails([FromRoute] int Id)\n        {\n            try\n            {\n                var existingEventDetail = _eventService.GetEventDetailByIdV2(Id);\n\n                foreach (var option in existingEventDetail.MasterEventDetails.EventDetailOptions)\n                {\n                    List<EventDetailsMetadataJsonViewModel> eventDetailMetadataJsonList = JsonConvert.DeserializeObject<List<EventDetailsMetadataJsonViewModel>>(option.MetadataJson);\n                    eventDetailMetadataJsonList.RemoveAll(metadata => metadata.Name == existingEventDetail.Name);\n                    option.MetadataJson = JsonConvert.SerializeObject(eventDetailMetadataJsonList);\n                }\n                _eventService.UpdateEventDetailOptions(existingEventDetail.MasterEventDetails.EventDetailOptions.ToList());\n                existingEventDetail.IsDeleted = true;\n                _eventService.UpdateEventDetail(existingEventDetail);\n                return Ok(new BaseApiResponse { Data = \"Event Detail has been deleted Successfully\" });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex.Message);\n\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Edit)]\n        [HttpPut(\"EventDetails/{Id}\")]\n        public IActionResult UpdateEventDetails([FromBody] EventDetailsViewModel eventDetails, [FromRoute] int Id)\n        {\n            try\n            {\n                //var existingEventDetail = _eventService.GetEventDetailById(Id);\n                var existingEventDetailV2 = new EventDetails();\n                existingEventDetailV2 = _eventService.GetEventDetailByIdV2((int)eventDetails.EventDetailId);\n                var eventDetail = _mapper.Map<EventDetails>(eventDetails);\n\n                var validityResult = ValidateEventDetailsViewModel(eventDetails);\n                if (validityResult.Item1 == false)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, validityResult.Item2));\n\n                if (existingEventDetailV2 == null)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Event Detail with the given Id doesn't exist\"));\n\n                var existingName = existingEventDetailV2.Name;\n                existingEventDetailV2.Name = eventDetail.Name;\n                existingEventDetailV2.TypeLkpId = eventDetail.TypeLkpId;\n                existingEventDetailV2.SymbolLkpId = eventDetail.SymbolLkpId;\n                existingEventDetailV2.DisplayTypeLkpId = eventDetail.DisplayTypeLkpId;\n                existingEventDetailV2.DecimalPlaces = eventDetail.DecimalPlaces;\n                existingEventDetailV2.ActiveFlag = eventDetail.ActiveFlag;\n                existingEventDetailV2.Length = eventDetail.Length;\n                existingEventDetailV2.ProductListFlag = eventDetail.ProductListFlag;\n                existingEventDetailV2.MasterListFlag = eventDetail.MasterListFlag;\n                existingEventDetailV2.NumberSeparatorFlag = eventDetail.NumberSeparatorFlag;\n\n                if(eventDetail.EventDetailOptions != null)\n                {\n                    var existingOptions = existingEventDetailV2.EventDetailOptions.Where(x => eventDetail.EventDetailOptions.Any(ev => ev.EventDetailOptionsId == x.EventDetailOptionsId)).ToList();\n                    var optionsToInsert = eventDetail.EventDetailOptions.Where(x => !existingEventDetailV2.EventDetailOptions.Any(ev => ev.EventDetailOptionsId == x.EventDetailOptionsId)).ToList();\n                    var optionsToDelete = existingEventDetailV2.EventDetailOptions.Where(x => !eventDetail.EventDetailOptions.Any(ev => ev.EventDetailOptionsId == x.EventDetailOptionsId)).ToList();\n                    foreach(var existingOption in existingOptions)\n                    {\n                        var option = eventDetail.EventDetailOptions.FirstOrDefault(x => x.EventDetailOptionsId == existingOption.EventDetailOptionsId);\n                        \n                        existingOption.Name = option.Name;\n                        existingOption.SortOrder = option.SortOrder;\n                        existingOption.ActiveFlag = option.ActiveFlag;\n\n                        //var existingMetadatas = existingOption.EventDetailOptionsMetadata.Where(x => option.EventDetailOptionsMetadata.Any(ev => ev.EventDetailOptionsMetadataId == x.EventDetailOptionsMetadataId)).ToList();\n                        //var metadataToInsert = option.EventDetailOptionsMetadata.Where(x => !existingOption.EventDetailOptionsMetadata.Any(ev => ev.EventDetailOptionsMetadataId == x.EventDetailOptionsMetadataId)).ToList();\n                        //var metadataToDelete = existingOption.EventDetailOptionsMetadata.Where(x => !option.EventDetailOptionsMetadata.Any(ev => ev.EventDetailOptionsMetadataId == x.EventDetailOptionsMetadataId)).ToList();\n                        \n                        //if (option.EventDetailOptionsMetadata != null && option.EventDetailOptionsMetadata.Count > 0)\n                        //{\n                        //    foreach (var existingMetaData in existingMetadatas)\n                        //    {\n                        //        var metaData = option.EventDetailOptionsMetadata.FirstOrDefault(x => x.EventDetailOptionsMetadataId == existingMetaData.EventDetailOptionsMetadataId);\n                        //        existingMetaData.Value = metaData.Value;\n                        //    }\n                        //}\n\n                        //existingOption.EventDetailOptionsMetadata = existingOption.EventDetailOptionsMetadata.Where(x => !metadataToDelete.Any(o => o.EventDetailOptionsMetadataId == x.EventDetailOptionsMetadataId)).ToList();\n                        //var list_ = existingOption.EventDetailOptionsMetadata.ToList();\n                        //list_.AddRange(metadataToInsert);\n                        //existingOption.EventDetailOptionsMetadata = list_;\n                    }\n\n                    foreach(var optionToInsert in optionsToInsert)\n                    {\n                        //optionToInsert.EventDetailOptionsMetadata = new List<EventDetailOptionsMetadata>();\n                        optionToInsert.TenantId = _currentTenant.Tenant_DB_Id;\n                        if(existingEventDetailV2.MasterEventDetailsId == null)\n                        {\n                            var metadataJson = _eventService.GetSlaveEventDetails(eventDetails.EventDetailId)?.MetadataJson;\n                            if(metadataJson == null)\n                            {\n                                optionToInsert.MetadataJson = null;\n                            }\n                            else\n                            {\n                                List<EventDetailsMetadataJsonViewModel> eventDetailMetadataJsonList = JsonConvert.DeserializeObject<List<EventDetailsMetadataJsonViewModel>>(metadataJson);\n                                eventDetailMetadataJsonList.ForEach(item => item.Value = null);\n                                optionToInsert.MetadataJson = JsonConvert.SerializeObject(eventDetailMetadataJsonList);\n                            }\n                        }\n                    }\n\n                    existingEventDetailV2.EventDetailOptions = existingEventDetailV2.EventDetailOptions.Where(x => !optionsToDelete.Any(o => o.EventDetailOptionsId == x.EventDetailOptionsId)).ToList();\n                    var list = existingEventDetailV2.EventDetailOptions.ToList();\n                    list.AddRange(optionsToInsert);\n                    existingEventDetailV2.EventDetailOptions = list;\n                }\n\n                existingEventDetailV2.ActiveFlag = true;\n                existingEventDetailV2.LastUpdatedBy = HttpContext.User.Identity.Name;\n                existingEventDetailV2.LastUpdatedDate = DateTime.Now;\n                existingEventDetailV2.IsSearchableInDashboard = eventDetails.IsSearchableInDashboard;\n\n                if(existingEventDetailV2.MasterEventDetails != null)\n                {\n                    //var newMasterEventDetailOptionMetaData = new EventDetailOptionsMetadata();\n\n                    foreach (var option in existingEventDetailV2.MasterEventDetails.EventDetailOptions)\n                    {\n                        List<EventDetailsMetadataJsonViewModel> eventDetailMetadataJsonList = JsonConvert.DeserializeObject<List<EventDetailsMetadataJsonViewModel>>(option.MetadataJson);\n\n                        foreach(var metadata in  eventDetailMetadataJsonList)\n                        {\n                            if(metadata.Name == existingName)\n                            {\n                                metadata.Name = existingEventDetailV2.Name;\n                                if (metadata.EventDetailOptions != null)\n                                {\n                                    metadata.EventDetailOptions = eventDetails.EventDetailOptions;\n                                }\n                            }\n                        }\n                        option.MetadataJson = JsonConvert.SerializeObject(eventDetailMetadataJsonList);\n                    }\n                }\n                try\n                {\n                    _eventService.UpdateEventDetail(existingEventDetailV2);\n                }\n                catch (DbUpdateException ex)\n                {\n                    if (ex.InnerException is SqlException sqlEx &&\n                        (sqlEx.Number == 547 || sqlEx.Number == 2627))\n                    {\n                        return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, \"Unable to delete. Selected item has association.\"));\n                    }\n                    else\n                    {\n                        return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, \"Error while updating event detail.\"));\n                    }\n                }\n                catch (Exception ex)\n                {\n                    return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Error while updating event detail.\"));\n                }\n                return StatusCode(StatusCodes.Status200OK, _mapper.Map<EventDetailsViewModel>(existingEventDetailV2));\n\n\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex.Message);\n\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}...Params: {JsonConvert.SerializeObject(eventDetails)}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Edit)]\n        [HttpPut(\"EventDetails/EventDetailOptions/EventDetailOptionsMetadata/{Id}\")]\n        [Consumes(\"multipart/form-data\")]\n        public IActionResult UpdateEventDetailOptionMetadata([FromForm] EventDetailOptionsMetadataViewModel optionMetadataModel, [FromRoute] int Id)\n        {\n            try\n            {\n                Monitor.Enter(Startup._updateLock);\n                //var existingEventDetailOptionMetadata = _eventService.GetEventDetailOptionMetadataById(Id);\n                //var eventDetailOptionMetadata = _mapper.Map<EventDetailOptionsMetadata>(optionMetadataModel);\n                List<EventDetailOptions> eventDetailOptionsList = new();\n                EventDetailOptions eventDetailOptions = _eventService.GetEventDetailOptionsById(optionMetadataModel.EventDetailOptionsId, _currentTenant.Tenant_DB_Id);\n                var eventDetail = _eventService.GetEventDetailByIdV2(optionMetadataModel.EventDetailsId);\n                try\n                {\n                    List<EventDetailsMetadataJsonViewModel> eventDetailMetadataJsonList = JsonConvert.DeserializeObject<List<EventDetailsMetadataJsonViewModel>>(eventDetailOptions.MetadataJson);\n                    //if (!string.IsNullOrEmpty(optionMetadataModel.Value) && !optionMetadataModel.Value.StartsWith(\"[\"))\n                    //{\n                    //    optionMetadataModel.Value = JsonConvert.DeserializeObject<string>(optionMetadataModel.Value);\n                    //}\n                    foreach (var item in eventDetailMetadataJsonList)\n                    {\n                        if (item.Name == eventDetail.Name)\n                        {\n                            if (optionMetadataModel.Image != null)\n                            {\n                                item.Value = UploadToAzure(optionMetadataModel.Image, GetUniqueImageName(optionMetadataModel.Image));\n\n                            }\n                            else\n                            {\n                                if(optionMetadataModel.Value == \"[]\" || optionMetadataModel.Value == \"null\")\n                                {\n                                    item.Value = null;\n                                }\n                                else\n                                {\n                                    item.Value = optionMetadataModel.Value;\n                                }\n                            }\n                            break;\n                        }\n                    }\n                    string metadataJson = JsonConvert.SerializeObject(eventDetailMetadataJsonList);\n                    eventDetailOptions.MetadataJson = metadataJson;\n                }\n                catch(Exception ex)\n                {\n                \n                }\n                //if (existingEventDetailOptionMetadata == null)\n                //    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Event Detail with the given Id doesn't exist\"));\n\n                //existingEventDetailOptionMetadata.Value = eventDetailOptionMetadata.Value;\n\n                //_eventService.UpdateEventDetailOptionMetadata(existingEventDetailOptionMetadata);\n                eventDetailOptionsList.Add(eventDetailOptions);\n                _eventService.UpdateEventDetailOptions(eventDetailOptionsList);\n\n            return Ok(new BaseApiResponse { Data = \"Event Detail Option Metadata has been updated Successfully\" });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex.Message);\n\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}...Params: {JsonConvert.SerializeObject(optionMetadataModel)}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n            finally\n            {\n                Monitor.Exit(Startup._updateLock);\n            }\n        }\n\n        private string GetUniqueImageName(IFormFile photo)\n        {\n            string uniqueName = null;\n\n            if (photo != null)\n            {\n                var fileBase = Path.GetFileNameWithoutExtension(photo.FileName);\n                var ext = Path.GetExtension(photo.FileName);\n                uniqueName = Path.Combine(fileBase + \"_\" + Guid.NewGuid().ToString() + ext);\n            }\n            return uniqueName;\n        }\n\n        private string UploadToAzure(IFormFile photo, string uniqueName)\n        {\n            MemoryStream memoryStream = new MemoryStream();\n\n            if (photo != null)\n            {\n                photo.CopyTo(memoryStream);\n            }\n\n            var storageSettings = _config.GetSection(\"BlobStorageSettings\");\n            string connectionString = storageSettings.GetValue<string>(\"ConnectionString\");\n            string container = storageSettings.GetValue<string>(\"EventMetadataContainer\");\n            var containerClient = new BlobContainerClient(connectionString, container);\n\n            //string absoluteUri = \"\";\n            memoryStream.Position = 0;\n            using (var stream = new StreamReader(memoryStream))\n            {\n                _logger.LogInformation($\"Uploading file {uniqueName} to Azure Blob Container {container}\");\n                var resposne = containerClient.UploadBlob(uniqueName, stream.BaseStream);\n                //absoluteUri = containerClient.Uri.AbsoluteUri + \"/\" + uniqueName;\n            }\n\n            return uniqueName;\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Get + \",\" + DigitraxV2Permissions.ProgramSettings.Get)]\n        [HttpGet(\"EventDetails/EventDetailOptions/EventDetailOptionsMetadata/{Id}\")]\n        public IActionResult GetEventDetailOptionMetadata([FromRoute] int Id)\n        {\n            try\n            {\n                var existingEventDetailOptionMetadata = _eventService.GetEventDetailOptionMetadataById(Id);\n                return Ok(_mapper.Map<EventDetailOptionsMetadataViewModel>(existingEventDetailOptionMetadata));\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex.Message);\n\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Get + \",\" + DigitraxV2Permissions.ProgramSettings.Get)]\n        [HttpGet(\"EventDetails/EventDetailOptions/{Id}/EventDetailOptionsMetadata\")]\n        public IActionResult GetEventDetailOptionMetadataByOptionId([FromRoute] int Id)\n        {\n            try\n            {\n                var existingEventDetailOptionMetadata = _eventService.GetEventDetailOptionMetadataByOptionId(Id,_currentTenant.Tenant_DB_Id);\n                return Ok(_mapper.Map<List<EventDetailOptionsMetadataViewModel>>(existingEventDetailOptionMetadata));\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex.Message);\n\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Get + \",\" + DigitraxV2Permissions.ProgramSettings.Get)]\n        [HttpGet(\"EventDetails/{Id}/EventDetailOptions\")]\n        public IActionResult GetEventDetailOptions([FromRoute] int Id)\n        {\n            try\n            {\n                //var eventDetail = _eventService.GetEventDetailByIdV2(Id);\n                //if(eventDetail == null)\n                //    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Event Detail with the given Id doesn't exist\"));\n                var option = _eventService.GetEventDetailOptionsById(Id, _currentTenant.Tenant_DB_Id);\n                //List<EventDetailsMetadataJsonViewModel> eventDetailMetadataJsonList = JsonConvert.DeserializeObject<List<EventDetailsMetadataJsonViewModel>>(option.MetadataJson);\n                \n                var result = _mapper.Map<EventDetailOptionsViewModel>(option);\n                return Ok(result);\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}...\", ex.ToString(), true);\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Get + \",\" + DigitraxV2Permissions.ProgramSettings.Get)]\n        [HttpGet(\"EventDetails/Types\")]\n        public IActionResult GetEventDetailTypes()\n        {\n            try\n            {\n                var lookups = _eventService.GetEventDetailTypes();\n                var result = _mapper.Map<List<MasterLookupViewModel>>(lookups);\n                return Ok(result);\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}...\", ex.ToString(), true);\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Get + \",\" + DigitraxV2Permissions.ProgramSettings.Get)]\n        [HttpGet(\"EventDetails/SelectDisplayTypes\")]\n        public IActionResult GetSelectEventDetailTypes()\n        {\n            try\n            {\n                var lookups = _eventService.GetSelectEventDetailTypes();\n                var result = _mapper.Map<List<MasterLookupViewModel>>(lookups);\n                return Ok(result);\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n   \n        [Authorize(DigitraxV2Permissions.ProgramManagement.Get + \",\" + DigitraxV2Permissions.ProgramSettings.Get)]\n        [HttpGet(\"EventDetails/CurrencySymbols\")]\n        public IActionResult GetCurrencySymbols()\n        {\n            try\n            {\n                var lookups = _eventService.GetCurrencySymbols();\n                var result = _mapper.Map<List<MasterLookupViewModel>>(lookups);\n                return Ok(result);\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Get + \",\" + DigitraxV2Permissions.ProgramSettings.Get)]\n        [ApiVersion(\"2.0\")]\n        [HttpGet(\"EventDetails\")]\n        public IActionResult GetAllEventDetails([DataSourceRequest] DataSourceRequest request)\n        {\n            try\n            {\n\n                var eventStatus = _eventService.GetEventDetails(request, _currentTenant.Tenant_DB_Id);\n                var result = _mapper.Map<List<EventDetailsViewModel>>(eventStatus.Data);\n\n\n                var responseModel = new\n                {\n                    data = result,\n                    total = eventStatus.Total\n                };\n                return Ok(responseModel);\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Get + \",\" + DigitraxV2Permissions.ProgramSettings.Get)]\n        [HttpGet(\"EventDetails/{id}\")]\n        public IActionResult GetEventDetailsById([FromRoute] int Id)\n        {\n            try\n            {\n\n                var eventDetail = _eventService.GetEventDetailByIdV2(Id);\n                if (eventDetail == null)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Event Detail with the given Id doesn't exist\"));\n\n                eventDetail.EventDetailOptions = eventDetail.EventDetailOptions.OrderBy(x => x.SortOrder).ToList();\n\n                var result = _mapper.Map<EventDetailsViewModel>(eventDetail);\n                if(eventDetail.EventDetailOptions.Count != 0)\n                {\n                    foreach (var option in eventDetail.EventDetailOptions)\n                    {\n                        \n                    }\n                }\n\n                return Ok(new BaseApiResponse { Data = result });\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n\n        }\n\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Get + \",\" + DigitraxV2Permissions.ProgramSettings.Get)]\n        [HttpGet(\"EventDetails/{id}/SlaveDetails\")]\n        public IActionResult GetSlaveEventDetailsById([FromRoute] int Id)\n        {\n            try\n            {\n                //var eventDetail = _eventService.GetSlaveEventDetailsByMasterId(Id);\n                var slavedetails = _eventService.GetSlaveEventDetails(Id);\n                //var result = _mapper.Map<List<EventDetailsViewModel>>(eventDetail);\n                if (slavedetails.MetadataJson == null)\n                {\n                    return Ok(new BaseApiResponse { Data = null });\n                }\n                else\n                {\n                    List<EventDetailsMetadataJsonViewModel> eventDetailMetadataJsonList = JsonConvert.DeserializeObject<List<EventDetailsMetadataJsonViewModel>>(slavedetails.MetadataJson);\n                    eventDetailMetadataJsonList = eventDetailMetadataJsonList.OrderBy(x => x.SortOrder).ToList();\n                    return Ok(new BaseApiResponse { Data = eventDetailMetadataJsonList });\n                }\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Get + \",\" + DigitraxV2Permissions.ProgramSettings.Get)]\n        [HttpPut(\"EventDetails/{id}/EditSlaveDetails\")]\n        public IActionResult EditSlaveEventDetailsById(List<KeyValuePair<int, int>> keyValuePairs)\n        {\n            try\n            {\n                var result = _eventService.EditSlaveEventDetailsByMasterId(keyValuePairs);\n                foreach(var eventdetail  in result) \n                {\n                    foreach(var option in eventdetail.MasterEventDetails.EventDetailOptions)\n                    {\n                        List<EventDetailsMetadataJsonViewModel> eventDetailMetadataJsonList = JsonConvert.DeserializeObject<List<EventDetailsMetadataJsonViewModel>>(option.MetadataJson);\n                        foreach (var metadata in eventDetailMetadataJsonList)\n                        {\n                            if (metadata.Name == eventdetail.Name)\n                            {\n                                metadata.SortOrder = keyValuePairs.FirstOrDefault(kvp => kvp.Key == eventdetail.EventDetailId).Value;\n                            }\n                        }\n                        option.MetadataJson = JsonConvert.SerializeObject(eventDetailMetadataJsonList);\n                    }\n                    _eventService.UpdateEventDetailOptions(eventdetail.MasterEventDetails.EventDetailOptions.ToList());\n                }\n                return Ok(new BaseApiResponse (\"Event MetaData Details has been updated successfully\"));\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n\n        }\n\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Add)]\n        [HttpPost(\"Import\")]\n        [Consumes(\"multipart/form-data\")]\n        public IActionResult AddMetaDataImport([FromForm] MetaDataImportViewModel metaDataImportViewModel)\n        {\n            try\n            {\n\n                var eventDetail = _eventService.GetEventDetailByIdV2(metaDataImportViewModel.EventDetailsId);\n                if (eventDetail == null)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"Unable to find event detail\"));\n\n                if (eventDetail.EventDetailOptions == null || eventDetail.EventDetailOptions.Count() == 0)\n                {\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"Event detail has no options\"));\n                }\n\n                if (eventDetail.EventDetailOptions.FirstOrDefault()?.MetadataJson == null)\n                {\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"Event detail options has no metadata\"));\n                }\n\n                var validate = ValidateMetaDataModel(metaDataImportViewModel, eventDetail);\n\n                if (!validate.isValid)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, validate.error));\n\n\n                List<EventDetailOptions> validRecords = new List<EventDetailOptions>();\n                List<KeyValuePair<int, string>> invalidRecords = new List<KeyValuePair<int, string>>();\n                List<EventDetailOptions> newValidEventDetailOptions = new List<EventDetailOptions>();\n\n                _codeProcessingService.ProcessImportEventDetailsOptionsMetaData(metaDataImportViewModel.ImportFile, _currentTenant.Tenant_DB_Id, eventDetail, validRecords, invalidRecords, newValidEventDetailOptions);\n\n\n                BaseApiResponse res = new BaseApiResponse(invalidRecords);\n                if (invalidRecords.Count() == 0)\n                {\n                    return StatusCode(StatusCodes.Status200OK, res);\n                }\n                else\n                {\n                    res.Error = true;\n                    return StatusCode(StatusCodes.Status200OK, res);\n                }\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                //CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}...Params: {JsonConvert.SerializeObject(locationModel)}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Add)]\n        [HttpPost(\"EventDetails/MetadataToJson\")]\n        public IActionResult MetadataDetailToJsonUtility()\n        {\n            try\n            {\n                List<EventDetailOptions> option = _codeProcessingService.ProcessMetadataToJson(_currentTenant.Tenant_DB_Id);\n                \n                var result = option.Select( opt => new\n                {\n                    Id= opt.EventDetailOptionsId,\n                    Metadata = opt.MetadataJson\n                });\n                return StatusCode(StatusCodes.Status200OK, result);\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        #region Validations\n\n        private (bool isValid, string error) ValidateMetaDataModel(MetaDataImportViewModel model, EventDetails eventDetails)\n        {\n\n            //var existingEventForm = _eventService.GetEventDetailOptions(model.EventDetailsId, _currentTenant.Tenant_DB_Id);\n            //if (existingEventForm == null)\n            //    return (false, \"Unable to find Event Form\");\n            // var eventFormsViewModel = Mapper.Map<EventForms, EventFormsViewModel>(existingEventForm);\n\n\n            if (eventDetails.TypeLkp.HiddenValue != Constants.EVENT_DETAIL_LOOKUP_TYPE_SINGLE_SELECT)\n            {\n                return (false, $\"Event details Id {eventDetails.EventDetailId} does not belong to single select\");\n            }\n\n            StringBuilder requiredColumns = new StringBuilder();\n            var line = string.Empty;\n            using (var reader = new StreamReader(model.ImportFile.OpenReadStream()))\n            {\n                if (reader.Peek() >= 0)\n                {\n                    line = reader.ReadLine();\n                    var headings = line.Split(',');\n\n                    bool isFileValid = true;\n                    int maxHeadings = headings.Count();\n\n                    int headingIndex = 0;\n\n                    int fileUploadLkpId = _lookupService.GetLookupByTypeAndValue(Constants.EVENT_DETAIL_LOOKUP_TYPE, Constants.EVENT_DETAIL_LOOKUP_TYPE_FILE_UPLOAD)?.MasterLookupId ?? 0;\n\n                    if (eventDetails.Name.ToUpper() != headings[headingIndex].ToUpper())\n                    {\n                        requiredColumns.Append($\"{{{eventDetails.Name}}}\");\n                        isFileValid = false;\n                    }\n\n                    headingIndex++;\n\n                    var eventDetailOption = eventDetails.EventDetailOptions.FirstOrDefault();\n\n                    List<EventDetailsMetadataJsonViewModel> eventDetailMetadataJsonList = JsonConvert.DeserializeObject<List<EventDetailsMetadataJsonViewModel>>(eventDetailOption.MetadataJson);\n\n\n                    foreach (var metaData in eventDetailMetadataJsonList)\n                    {\n                        if (headingIndex < maxHeadings)\n                        {\n                            if (metaData.TypeLkpId != fileUploadLkpId)\n                            {\n                                if (metaData.Name.ToUpper() != headings[headingIndex].ToUpper())\n                                {\n                                    isFileValid = false;\n                                }\n                            }\n                        }\n\n                        if (metaData.TypeLkpId != fileUploadLkpId)\n                        {\n                            requiredColumns.Append($\"{{{metaData.Name}}}\");\n                            headingIndex++;\n                        }\n                    }\n\n\n                    if (headingIndex != maxHeadings || !isFileValid)\n                    {\n                        return (false, $\"Columns are invalid or not present in correct order in the import file. Required columns and their sequence are as follows  {requiredColumns}\");\n                    }\n                }\n                else\n                    return (false, \"File is empty\");\n            }\n            return (true, \"Valid\");\n        }\n\n        private (bool, string) ValidateEventDetailsViewModel(EventDetailsViewModel viewModel)\n        {\n            //Check If Event Status already Exists\n\n            var existing = _eventService.GetEventDetailByName(_currentTenant.Tenant_DB_Id, viewModel.Name);\n            if (existing != null)\n            {\n                if (existing.EventDetailId != viewModel.EventDetailId)\n                    return (false, \"Please select a unique Event Detail Name\");\n            }\n            var typeLookup = _lookupService.GetLookupById(viewModel.TypeLkpId);\n            if (typeLookup == null)\n                return (false, \"Type Lookup with the Id doesn't exist\");\n\n            switch(typeLookup.HiddenValue)\n            {\n                case Constants.EVENT_DETAIL_LOOKUP_TYPE_TEXT:\n                    {\n                        if (viewModel.Length.HasValue)\n                        {\n                            if (viewModel.Length.Value <= 0)\n                                return (false, \"Length should be a positive value\");\n                            if (viewModel.Length.Value > 500)\n                                return (false, \"Length should not be greator than 500\");\n                        }\n                        else\n                        {\n                            return (false, \"Length should not be empty\");\n                        }\n                        break;\n                    }\n                case Constants.EVENT_DETAIL_LOOKUP_TYPE_NUMBER:\n                    {\n                        if (viewModel.DecimalPlaces.HasValue)\n                        {\n                            if (viewModel.DecimalPlaces.Value < 0)\n                                return (false, \"Decimal Place should be a postive value\");\n                            if (viewModel.DecimalPlaces.Value > 10)\n                                return (false, \"Decimal Place should not be greater than 10\");\n                        }\n                        break;\n                    }\n                case Constants.EVENT_DETAIL_LOOKUP_TYPE_CURRENCY:\n                    {\n                        if (viewModel.DecimalPlaces.HasValue)\n                        {\n                            if (viewModel.DecimalPlaces.Value < 0)\n                                return (false, \"Decimal Place should be a postive value\");\n                            if (viewModel.DecimalPlaces.Value > 10)\n                                return (false, \"Decimal Place should not be greater than 10\");\n                        }\n                        if(!viewModel.SymbolLkpId.HasValue)\n                        {\n                            return (false, \"Symbol Id cannot be empty\");\n                        }\n                        else\n                        {\n                            var symbolLookup = _lookupService.GetLookupById(viewModel.SymbolLkpId.Value);\n                            if (symbolLookup == null)\n                                return (false,\"Symbol with the give Id doesn't exist\");\n                        }\n                        break;\n                    }\n                case Constants.EVENT_DETAIL_LOOKUP_TYPE_SINGLE_SELECT:\n                    {\n                        if(!viewModel.DisplayTypeLkpId.HasValue)\n                        {\n                            return (false, \"Display Type cannot be empty\");\n                        }\n                        else if(viewModel.ProductListFlag == true)\n                        {\n                            var productListDetail = _eventService.GetProductsList(_currentTenant.Tenant_DB_Id);\n                            \n                            if (productListDetail != null)\n                            {\n                                if (productListDetail.EventDetailId != viewModel.EventDetailId)\n                                    return (false, \"Event Detail cannot be set as a Product List as one already exists\");\n                            }\n                        }\n                        else\n                        {\n                            var displayLookup = _lookupService.GetLookupById(viewModel.DisplayTypeLkpId.Value);\n                            if (displayLookup == null)\n                                return (false, \"Display type with the give Id doesn't exist\");\n                        }               \n\n                        break;\n                    }\n                case Constants.EVENT_DETAIL_LOOKUP_TYPE_MULTI_SELECT:\n                    {\n                        if (!viewModel.DisplayTypeLkpId.HasValue)\n                        {\n                            return (false, \"Display Type cannot be empty\");\n                        }\n                        else\n                        {\n                            var displayLookup = _lookupService.GetLookupById(viewModel.DisplayTypeLkpId.Value);\n                            if (displayLookup == null)\n                                return (false, \"Display type with the give Id doesn't exist\");\n                        }\n                        break;\n                    }\n            }\n\n            if(viewModel.MasterEventDetailsId.HasValue)\n            {\n                var eventDetailObj = _eventService.GetEventDetailByIdV2(viewModel.MasterEventDetailsId.Value);\n\n                if (eventDetailObj == null)\n                    return (false, $\"Master Event Detail with the given Id {viewModel.MasterEventDetailsId.Value} doesn't exist\");\n                else if (viewModel.MetadataDetailFlag == false)\n                    return (false, $\"Event Detail should be created with the MetadataDetailFlag enabled\");\n                else if (viewModel.ProductListFlag == true || viewModel.MasterListFlag == true)\n                    return (false, $\"Event Detail should not be marked as Product or Master List\");\n                else if (eventDetailObj.TenantId != _currentTenant.Tenant_DB_Id)\n                    return (false, $\"Event Detail with the given Id {eventDetailObj.EventDetailId} doesn't belong to this tenant\");\n            }\n\n            //if (viewModel.EventDetailOptions != null)\n            //{\n            //    foreach (var option in viewModel.EventDetailOptions)\n            //    {\n            //        if (option.EventDetailOptionsMetadata != null && viewModel.MasterListFlag == true)\n            //        {\n            //            foreach (var metaData in option.EventDetailOptionsMetadata)\n            //            {\n            //                var eventDetailObj = _eventService.GetEventDetailById(metaData.EventDetailsId);\n\n            //                if (eventDetailObj == null)\n            //                    return (false, $\"Error creating Event Option Metadata. Event Detail with the given Id {metaData.EventDetailsId} doesn't exist\");\n            //                else if (eventDetailObj.MetadataDetailFlag == false)\n            //                    return (false, $\"Event Detail with the given Id {metaData.EventDetailsId} cannot be set as option metadata\");\n            //                else if (eventDetailObj.ProductListFlag == true || eventDetailObj.MasterListFlag == true)\n            //                    return (false, $\"Event Detail with the given Id {eventDetailObj.EventDetailId} should not be marked as Product or Master List\");\n            //                else if (eventDetailObj.TenantId != _currentTenant.Tenant_DB_Id)\n            //                    return (false, $\"Event Detail with the given Id {eventDetailObj.EventDetailId} doesn't belong to this tenant\");\n            //            }\n            //        }\n            //    }\n            //}\n            return (true, \"\");\n        }\n        #endregion\n    }\n}\n\n"}
{"feature_name": "Events", "file_type": "Controller", "file_name": "EventsController.cs", "file_content": "using Authentix.Digitrax.Authorization.Services;\nusing Authentix.Digitrax.Common;\nusing Authentix.Digitrax.Common.Utilities;\nusing Authentix.Digitrax.Model.Models;\nusing Authentix.Digitrax.Services.Services;\nusing AuthentixDigitraxPlatform.ActionFilters;\nusing AuthentixDigitraxPlatform.Models;\nusing AutoMapper;\nusing AutoMapper.Configuration;\nusing Microsoft.Extensions.Configuration;\nusing Kendo.Mvc;\nusing Kendo.Mvc.UI;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Azure.Storage.Blobs;\nusing Kendo.Mvc.Extensions;\nusing Kendo.Mvc.Infrastructure.Implementation;\nusing System.IO;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\n\n\n\nnamespace AuthentixDigitraxPlatform.Controllers\n{\n    [Produces(\"application/json\")]\n    [Consumes(\"application/json\")]\n    [ApiVersion(\"1.0\")]\n    [Route(\"{tenant_Id_guid}/api/v{v:apiVersion}/[controller]\")]\n    [Authorize]\n    [ApiController]\n    [ServiceFilter(typeof(LoggerAttribute))]\n    public partial class EventsController : ControllerBase\n    {\n        private readonly IMapper _mapper;\n        private readonly ILogger<EventsController> _logger;\n        private readonly IEventService _eventService;\n        private readonly Authentix.Digitrax.Common.Models.Tenant _currentTenant;\n        private readonly ILookupService _lookupService;\n        private readonly ILocationService _locationService;\n        private readonly ICodeProcessingService _codeProcessingService;\n        private readonly IFieldInspectionService _fieldInspectionService;\n        private readonly IUniqueIdentifierService _uniqueIdentifierService;\n        private readonly Microsoft.Extensions.Configuration.IConfiguration _config;\n        public EventsController(IEventService eventService,\n           ILogger<EventsController> logger,\n           ILookupService lookupService,\n           IMapper mapper,\n           ITenantProvider tenantProvider,\n           ILocationService locationService,\n           ICodeProcessingService codeProcessingService,\n           IFieldInspectionService fieldInspectionService,\n           IUniqueIdentifierService uniqueIdentifierService,\n           Microsoft.Extensions.Configuration.IConfiguration config)\n        {\n            _eventService = eventService;\n            _logger = logger;\n            _mapper = mapper;\n            _currentTenant = tenantProvider.GetCurrentTenant();\n            _lookupService = lookupService;\n            _locationService = locationService;\n            _codeProcessingService = codeProcessingService;\n            _fieldInspectionService = fieldInspectionService;\n            _uniqueIdentifierService = uniqueIdentifierService;\n            _config = config;\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Add)]\n        [HttpPost(\"EventStatus\")]\n        public IActionResult AddEventStatus([FromBody] EventStatusLookupViewModel eventstatusModel)\n        {\n            try\n            {\n                var eventStatus = _mapper.Map<EventStatusLookupViewModel, EventStatusLookup>(eventstatusModel);\n                //Check If Event Status already Exists\n                var existing = _eventService.GetEventStatusByName(_currentTenant.Tenant_DB_Id, eventStatus.Name);\n                if (existing != null)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Please select a unique event status name\"));\n\n                existing = _eventService.GetEventStatusByColor(_currentTenant.Tenant_DB_Id, eventStatus.Color);\n                if (existing != null)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Please select a unique event status color\"));\n\n\n                eventStatus.TenantId = _currentTenant.Tenant_DB_Id;\n                eventStatus.ActiveFlag = true;\n                eventStatus.CreatedBy = HttpContext.User.Identity.Name;\n                eventStatus.CreatedDate = DateTime.Now;\n                eventStatus.EffectiveStartDate = DateTime.Now;\n                eventStatus.EffectiveEndDate = null;\n\n                var result = _eventService.AddEventStatus(eventStatus);\n\n                return StatusCode(StatusCodes.Status200OK, \"Event Status has been Added successfully\");\n\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}...Params: {JsonConvert.SerializeObject(eventstatusModel)}\", ex.ToString(), true);\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n\n\n            }\n\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Get + \",\" + DigitraxV2Permissions.ProgramSettings.Get)]\n        [HttpGet(\"EventStatus\")]\n        [ApiVersion(\"2.0\")]\n        public IActionResult GetAllEventStatus([DataSourceRequest] DataSourceRequest request)\n        {\n            try\n            {\n\n                var eventStatus = _eventService.GetEventStatus(_currentTenant.Tenant_DB_Id, request);\n                var result = _mapper.Map<List<EventStatusLookupViewModel>>(eventStatus.Data);\n\n\n                var responseModel = new\n                {\n                    data = result,\n                    total = eventStatus.Total\n                };\n                return Ok(responseModel);\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Edit)]\n        [HttpPut(\"EventStatus/{Id}\")]\n        public IActionResult UpdateEventStatus([FromBody] EventStatusLookupViewModel eventstatusModel, [FromRoute] int Id)\n        {\n            try\n            {\n                var existingEventStatus = _eventService.GetEventStatusbyId(_currentTenant.Tenant_DB_Id, Id);\n\n                if (existingEventStatus == null)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Unable to find Event Status\"));\n                \n                var eventStatus = _mapper.Map<EventStatusLookupViewModel, EventStatusLookup>(eventstatusModel);\n                //Check If Event Status already Exists\n              \n                if(!eventStatus.Name.Equals(existingEventStatus.Name,StringComparison.OrdinalIgnoreCase))\n                {\n                    var existing = _eventService.GetEventStatusByName(_currentTenant.Tenant_DB_Id, eventStatus.Name);\n                    if (existing != null && existing.EventStatusLookupId != Id)\n                        return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Please select a unique event status name\"));\n                }\n\n                if (!eventStatus.Color.Equals(existingEventStatus.Color, StringComparison.OrdinalIgnoreCase))\n                {\n                    var existing = _eventService.GetEventStatusByColor(_currentTenant.Tenant_DB_Id, eventStatus.Color);\n                    if (existing != null && existing.EventStatusLookupId != Id)\n                        return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Please select a unique event status color\"));\n                }\n\n                existingEventStatus.Name = eventStatus.Name;\n                existingEventStatus.Color = eventStatus.Color;\n                existingEventStatus.ActiveFlag = true;\n                existingEventStatus.LastUpdatedBy = HttpContext.User.Identity.Name;\n                existingEventStatus.LastUpdatedDate = DateTime.UtcNow;\n\n                _eventService.UpdateEventStatus(existingEventStatus);\n\n                return Ok(new BaseApiResponse { Data = \"Event Status has been updated Successfully\" });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex.Message);\n\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}...Params: {JsonConvert.SerializeObject(eventstatusModel)}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Get + \",\" + DigitraxV2Permissions.ProgramSettings.Get)]\n        [HttpGet(\"EventStatus/{id}\")]\n        public IActionResult GetEventStatusById([FromRoute] int Id)\n        {\n            try\n            {\n\n                var existingEventStatus = _eventService.GetEventStatusbyId(_currentTenant.Tenant_DB_Id, Id);\n                if (existingEventStatus == null)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Unable to find Event Status\"));\n                var result = _mapper.Map<EventStatusLookup, EventStatusLookupViewModel>(existingEventStatus);\n\n                return Ok(new BaseApiResponse { Data = result });\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Add)]\n        [HttpPost(\"EventConfiguration\")]\n        public IActionResult AddEventConfigurations([FromBody] EventConfigurationsViewModel eventConfigModel)\n        {\n            try\n            {\n                var eventConfig = _mapper.Map<EventConfigurationsViewModel, EventConfigurations>(eventConfigModel);\n                //Check If Event Configuration already Exists\n                var existing = _eventService.GetEventConfigByName(_currentTenant.Tenant_DB_Id, eventConfig.Name);\n                if (existing != null)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Please select a unique Event Configuration Name.\"));\n\n\n                eventConfig.TenantId = _currentTenant.Tenant_DB_Id;\n                eventConfig.CreatedBy = HttpContext.User.Identity.Name;\n                var typeLookup=_eventService.GetLookupByTypeAndValue(Constants.Event_Type, Constants.Event_Type_Custom);\n                eventConfig.ConfigurationTypeLkpId = typeLookup.MasterLookupId;\n                eventConfig.CreatedDate = DateTime.Now;\n                eventConfig.EffectiveStartDate = DateTime.Now;\n                eventConfig.EffectiveEndDate = null;\n\n                var result = _eventService.AddEventConfiguration(eventConfig);\n\n                return StatusCode(StatusCodes.Status200OK, \"Event Configuration has been Added successfully\");\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}...Params: {JsonConvert.SerializeObject(eventConfigModel)}\", ex.ToString(), true);\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n\n\n            }\n\n\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Get + \",\" + DigitraxV2Permissions.ProgramSettings.Get)]\n        [HttpGet(\"EventConfigurations\")]\n        [ApiVersion(\"2.0\")]\n        public IActionResult GetAllEventConfigurations([DataSourceRequest] DataSourceRequest request)\n        {\n            try\n            {\n                var eventConfig = _eventService.GetEventConfigurations(_currentTenant.Tenant_DB_Id, request);\n                var result = _mapper.Map<List<EventConfigurationsViewModel>>(eventConfig.Data);\n\n                foreach (var config in result)\n                {\n                    var eventType = _eventService.GetLookupById(config.ConfigurationTypeLkpId);\n                    config.EventType = eventType.VisibleValue;\n\n                }\n\n                    var responseModel = new\n                {\n                    data = result,\n                    total = eventConfig.Total\n                };\n                return Ok(responseModel);\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Get + \",\" + DigitraxV2Permissions.ProgramSettings.Get)]\n        [HttpGet(\"EventConfiguration/{id}\")]\n        public IActionResult GetEventConfigurationById([FromRoute] int Id)\n        {\n            try\n            {\n\n                var existingEventConfig = _eventService.GetEventConfigById(_currentTenant.Tenant_DB_Id, Id);\n                if (existingEventConfig == null)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Unable to find Event Configuration\"));\n                var result = _mapper.Map<EventConfigurations, EventConfigurationsViewModel>(existingEventConfig);\n\n                return Ok(new BaseApiResponse { Data = result });\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Edit)]\n        [HttpPut(\"EventConfiguration/{Id}\")]\n        public IActionResult UpdateEventConfiguration([FromBody] EventConfigurationsViewModel eventConfigModel, [FromRoute] int Id)\n        {\n            try\n            {\n                var existingEventConfig = _eventService.GetEventConfigById(_currentTenant.Tenant_DB_Id, Id);\n\n                if (existingEventConfig == null)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Unable to find Event Configuration\"));\n\n                var eventConfig = _mapper.Map<EventConfigurationsViewModel, EventConfigurations>(eventConfigModel);\n                //Check If Event Configuration already Exists\n                if (!(eventConfig.Name.Equals(existingEventConfig.Name, StringComparison.OrdinalIgnoreCase)))\n                {\n                    var existing = _eventService.GetEventConfigByName(_currentTenant.Tenant_DB_Id, eventConfig.Name);\n                    if (existing != null)\n                        return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Please select a unique Event Configuration Name.\"));\n                }\n                existingEventConfig.Name = eventConfig.Name;\n                existingEventConfig.IconStyle = eventConfig.IconStyle;\n                existingEventConfig.IconStyleUnicode = eventConfig.IconStyleUnicode;\n                existingEventConfig.EventStatusLkpId = eventConfig.EventStatusLkpId;\n                existingEventConfig.EventFormId = eventConfig.EventFormId;\n                existingEventConfig.RequiresLocation = eventConfig.RequiresLocation;\n                existingEventConfig.LastUpdatedBy = HttpContext.User.Identity.Name;\n                existingEventConfig.LastUpdatedDate = DateTime.UtcNow;\n\n                _eventService.UpdateEventConfiguration(existingEventConfig);\n\n                return Ok(new BaseApiResponse { Data = \"Event Configuration has been updated Successfully\" });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex.Message);\n\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}...Params: {JsonConvert.SerializeObject(eventConfigModel)}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Add)]\n        [HttpPost(\"EventForm\")]\n        public IActionResult AddEventForm([FromBody] EventFormsViewModel eventFormModel)\n        {\n            try {\n                var eventForm = _mapper.Map<EventFormsViewModel, EventForms>(eventFormModel);\n                //Check If Event Form already Exists\n                var existing = _eventService.GetEventFormByName(_currentTenant.Tenant_DB_Id, eventForm.Name);\n                if (existing != null)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Event Form already exists, please choose a Unique Event Form Name\"));\n\n                eventForm.TenantId = _currentTenant.Tenant_DB_Id;\n                eventForm.CreatedBy = HttpContext.User.Identity.Name;\n                eventForm.CreatedDate = DateTime.Now;\n                eventForm.EffectiveStartDate = DateTime.Now;\n                eventForm.EffectiveEndDate = null;\n                eventForm.FormTypeLookupId = _lookupService.GetLookupByTypeAndValue(Constants.Form_Type , Constants.Form_Type_Event).MasterLookupId;\n                eventForm.FormTypeLookup = null;\n\n                List<int> exists = new List<int>();\n                foreach (var section in eventForm.EventFormSections)\n                {\n                    section.TenantId = _currentTenant.Tenant_DB_Id;\n                    section.CreatedBy = HttpContext.User.Identity.Name;\n                    section.CreatedDate = DateTime.Now;\n                    section.EffectiveStartDate = DateTime.Now;\n                    section.EffectiveEndDate = null;\n\n                    foreach (var field in section.EventFormFields)\n                    {\n                        if (exists.Contains(field.EventDetailId))\n                        {\n                            return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"An Event Detail cannot be associated to more than once in a form\"));\n                        }\n                        exists.Add(field.EventDetailId);\n                        field.TenantId = _currentTenant.Tenant_DB_Id;\n                        field.CreatedBy = HttpContext.User.Identity.Name;\n                        field.CreatedDate = DateTime.Now;\n                        field.EffectiveStartDate = DateTime.Now;\n                        field.EffectiveEndDate = null;\n                      \n                    }\n                }\n                \n                \n                var result = _eventService.AddEventForm(eventForm);\n\n                return StatusCode(StatusCodes.Status200OK, \"Event Form has been Added successfully\");\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}...Params: {JsonConvert.SerializeObject(eventFormModel)}\", ex.ToString(), true);\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n\n\n            }\n\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Get + \",\" + DigitraxV2Permissions.ProgramSettings.Get)]\n        [HttpGet(\"EventForms\")]\n        [ApiVersion(\"2.0\")]\n        public IActionResult GetAllEventForms([DataSourceRequest] DataSourceRequest request)\n        {\n            try\n            {\n\n                var eventForms = _eventService.GetEventForms(_currentTenant.Tenant_DB_Id, request);\n                var result = _mapper.Map<List<EventFormsViewModel>>(eventForms.Data);\n\n                foreach (var form in result)\n                {\n                    form.EventFormSections = form.EventFormSections.OrderBy(x => x.SortOrder).ToList();\n                    foreach (var section in form.EventFormSections)\n                    {\n                       section.EventFormFields = section.EventFormFields.OrderBy(x => x.SortOrder).ToList();\n                    }\n                }\n\n                \n\n                var responseModel = new\n                {\n                    data = result,\n                    total = eventForms.Total\n                };\n                return Ok(responseModel);\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Get + \",\" + DigitraxV2Permissions.ProgramSettings.Get)]\n        [HttpGet(\"EventForm/{id}\")]\n        public IActionResult GetEventFormById([FromRoute] int Id)\n        {\n            try\n            {\n                var existingEventForm = _eventService.GetEventFormById(_currentTenant.Tenant_DB_Id, Id);\n                if (existingEventForm == null)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Unable to find Event Form\"));\n                var result = _mapper.Map<EventForms, EventFormsViewModel>(existingEventForm);\n\n                return Ok(new BaseApiResponse { Data = result });\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Edit)]\n        [HttpPut(\"EventForm/{Id}\")]\n        public IActionResult UpdateEventForm([FromBody] EventFormsViewModel eventFormModel, [FromRoute] int Id)\n        {\n            try\n            {\n                var existingEventForm = _eventService.GetEventFormById(_currentTenant.Tenant_DB_Id, Id);\n\n                if (existingEventForm == null)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Unable to find Event Form\"));\n\n                var eventForm = _mapper.Map<EventFormsViewModel, EventForms>(eventFormModel);\n\n                //Check If Event Form already Exists\n                if (!(eventForm.Name.Equals(existingEventForm.Name, StringComparison.OrdinalIgnoreCase)))\n                {\n                    var existing = _eventService.GetEventFormByName(_currentTenant.Tenant_DB_Id, eventForm.Name);\n                    if (existing != null)\n                        return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Event Form already exists, please choose a Unique Event Form Name\"));\n                }\n\n                existingEventForm.Name = eventForm.Name;\n                existingEventForm.Description = eventForm.Description;\n                existingEventForm.ActiveFlag = eventForm.ActiveFlag;\n                existingEventForm.LastUpdatedBy = HttpContext.User.Identity.Name;\n                existingEventForm.LastUpdatedDate = DateTime.Now;\n\n                //Gets Existing Sections\n                var existingSections = eventForm.EventFormSections\n                              .Where(ex => existingEventForm.EventFormSections.Any(x => x.EventFormSectionId.Equals(ex.EventFormSectionId))).ToList();\n\n                var sectionsToInsert = eventForm.EventFormSections\n                              .Where(ex => !existingEventForm.EventFormSections.Any(x => x.EventFormSectionId.Equals(ex.EventFormSectionId))).ToList();\n\n                var sectionsToDelete = existingEventForm.EventFormSections\n                              .Where(ex => !eventForm.EventFormSections.Any(x => x.EventFormSectionId.Equals(ex.EventFormSectionId))).ToList();\n\n                foreach (var section in existingSections)\n                {\n                    var existingSection = existingEventForm.EventFormSections.FirstOrDefault(x => x.EventFormSectionId == section.EventFormSectionId);\n                    if (existingSection == null)\n                        continue;\n                    existingSection.Name = section.Name;\n                    existingSection.SortOrder= section.SortOrder;\n                    existingSection.ActiveFlag = section.ActiveFlag;\n                    existingSection.LastUpdatedBy = HttpContext.User.Identity.Name;\n                    existingSection.LastUpdatedDate = DateTime.Now;\n\n                    var existingFields = section.EventFormFields\n                                                    .Where(ex => existingSection.EventFormFields.Any(x => x.EventFormFieldId.Equals(ex.EventFormFieldId))).ToList();\n\n                    var fieldsToInsert = section.EventFormFields\n                                                    .Where(ex => !existingSection.EventFormFields.Any(x => x.EventFormFieldId.Equals(ex.EventFormFieldId))).ToList();\n\n                    var fieldsToDelete = existingSection.EventFormFields\n                                                    .Where(ex => !section.EventFormFields.Any(x => x.EventFormFieldId.Equals(ex.EventFormFieldId))).ToList();\n\n                    foreach (var field in existingFields)\n                    {\n                       var exField = existingSection.EventFormFields.Where(e => e.EventFormFieldId == field.EventFormFieldId).FirstOrDefault();\n                        if (exField == null)\n                            continue;\n                        exField.ActiveFlag = field.ActiveFlag;\n                        exField.EventDetailId = field.EventDetailId;\n                        exField.SortOrder = field.SortOrder;\n                        exField.Required = field.Required;\n                        exField.LastUpdatedBy = HttpContext.User.Identity.Name;\n                        exField.LastUpdatedDate = DateTime.Now;\n                    }\n                    List<int> exist = new List<int>();\n                    foreach (var fields in fieldsToInsert)\n                    {\n                        if (exist.Contains(fields.EventDetailId))\n                        {\n                            return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"An Event Detail cannot be associated to more than once in a form\"));\n                        }\n                        fields.TenantId= _currentTenant.Tenant_DB_Id;\n                        fields.CreatedBy = HttpContext.User.Identity.Name;\n                        fields.CreatedDate = DateTime.Now;\n                        fields.EffectiveStartDate = DateTime.Now;\n                    }\n                    existingSection.EventFormFields = existingSection.EventFormFields\n                        .Where(r => !fieldsToDelete.Any(del => del.EventFormFieldId == r.EventFormFieldId)).ToList();\n\n                    var fieldList = existingSection.EventFormFields.ToList();\n                    fieldList.AddRange(fieldsToInsert);\n                    existingSection.EventFormFields = fieldList;\n\n                    existingEventForm.EventFormSections.Remove(existingEventForm.EventFormSections.Where(ff => ff.EventFormSectionId == section.EventFormSectionId).FirstOrDefault());\n                    existingEventForm.EventFormSections.Add(existingSection);\n\n\n                }\n\n                List<int> exists = new List<int>();\n                foreach (var section in sectionsToInsert)\n                {\n                    section.TenantId= _currentTenant.Tenant_DB_Id;\n                    section.CreatedBy = HttpContext.User.Identity.Name;\n                    section.CreatedDate = DateTime.Now;\n                    section.EffectiveStartDate = DateTime.Now;\n                    foreach (var field in section.EventFormFields)\n                    {\n                        if (exists.Contains(field.EventDetailId))\n                        {\n                            return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"An Event Detail cannot be associated to more than once in a form\"));\n                        }\n                        exists.Add(field.EventDetailId);\n                        field.TenantId = _currentTenant.Tenant_DB_Id;\n                        field.CreatedBy = HttpContext.User.Identity.Name;\n                        field.CreatedDate = DateTime.Now;\n                        field.EffectiveStartDate = DateTime.Now;\n                    }\n                }\n\n                existingEventForm.EventFormSections = existingEventForm.EventFormSections\n                    .Where(r => !sectionsToDelete.Any(del => del.EventFormSectionId == r.EventFormSectionId)).ToList();\n\n                var list = existingEventForm.EventFormSections.ToList();\n                list.AddRange(sectionsToInsert);\n                existingEventForm.EventFormSections = list;\n\n\n\n                _eventService.UpdateEventForm(existingEventForm);\n\n                return Ok(new BaseApiResponse { Data = \"Event Form has been updated Successfully\" });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex.Message);\n\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}...Params: {JsonConvert.SerializeObject(eventFormModel)}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Get + \",\" + DigitraxV2Permissions.ProgramSettings.Get)]\n        [HttpGet(\"GetEventUIDTypes\")]\n        public IActionResult GetEventUIDTypes()\n        {\n            try\n            {\n                var uidTypes = _eventService.GetAllEventUIDTypes();\n\n                if (uidTypes != null)\n                    return StatusCode(StatusCodes.Status200OK, new BaseApiResponse(_mapper.Map<IList<MasterLookupViewModel>>(uidTypes)));\n                else\n                    return StatusCode(StatusCodes.Status404NotFound, new BaseApiResponse(\"No event UID type exists\"));\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Get + \",\" + DigitraxV2Permissions.ProgramSettings.Get)]\n        [HttpGet(\"GetGeocodeEnforceAltertTypes\")]\n        public IActionResult GetCategGetGeocodeEnforceAltertTypesories()\n        {\n            try\n            {\n                var alertTypes = _eventService.GetAllGeocodeEnforceAltertTypes();\n\n                if (alertTypes != null)\n                    return StatusCode(StatusCodes.Status200OK, new BaseApiResponse(_mapper.Map<IList<MasterLookupViewModel>>(alertTypes)));\n                else\n                    return StatusCode(StatusCodes.Status404NotFound, new BaseApiResponse(\"No GeoCode enforce alert type exists\"));\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Get + \",\" + DigitraxV2Permissions.ProgramSettings.Get)]\n        [HttpGet(\"GetProductsList\")]\n        public IActionResult GetProductsList()\n        {\n            try\n            {\n                var details = _eventService.GetProductsList(_currentTenant.Tenant_DB_Id, true);\n\n                if (details != null)\n                    return StatusCode(StatusCodes.Status200OK, new BaseApiResponse(_mapper.Map<EventDetailsViewModel>(details)));\n                else\n                    return StatusCode(StatusCodes.Status404NotFound, new BaseApiResponse(\"No Product List Exists\"));\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n\n        #region Non-Complaince Dymaic Form\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Get)]\n        [ServiceFilter(typeof(ValidateTenantAttribute))]\n        [HttpGet(\"NonComplianceForm/ProductList\")]\n        public IActionResult ProductList()\n        {\n            try\n            {\n                var result = _fieldInspectionService.ProductList(_currentTenant.Tenant_DB_Id);\n                var responseModel = new\n                {\n                    data = _mapper.Map<IList<ProductViewModelV2>>(result),\n                    total = result.Count()\n                };\n                return StatusCode(StatusCodes.Status200OK, responseModel);\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Get)]\n        [ServiceFilter(typeof(ValidateTenantAttribute))]\n        [HttpGet(\"FormType\")]\n        public IActionResult FormType()\n        {\n            try\n            {\n                var data = _lookupService.GetLookupsByType(Constants.Form_Type);\n                var responseModel = new\n                {\n                    data = _mapper.Map<IList<MasterLookupViewModel>>(data),\n                    total = data.Count()\n                };\n                return StatusCode(StatusCodes.Status200OK, responseModel);\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Get)]\n        [ServiceFilter(typeof(ValidateTenantAttribute))]\n        [HttpPost(\"NonComplianceForm/AddNonComplainceForm\")]\n        public IActionResult AddNonComplainceForm([FromBody] NonComplianceFormsViewModel FormModel)\n        {\n            try\n            {\n                var Form = _mapper.Map<NonComplianceFormsViewModel, EventForms>(FormModel);\n                //Check If Event Form already Exists\n                var existing = _eventService.GetEventFormByName(_currentTenant.Tenant_DB_Id, Form.Name);\n                if (existing != null)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Form already exists, please choose a Unique Event Form Name\"));\n                var productexisting = _eventService.GetNonComplianceFormByProductId(_currentTenant.Tenant_DB_Id, FormModel.ProductId);\n                if (productexisting != null)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Form already exists for the selected Product\"));\n                Form.TenantId = _currentTenant.Tenant_DB_Id;\n                Form.CreatedBy = HttpContext.User.Identity.Name;\n                Form.CreatedDate = DateTime.Now;\n                Form.EffectiveStartDate = DateTime.Now;\n                Form.EffectiveEndDate = null;\n\n                //var temp = _eventService.AddNonComplianceForm(Form, FormModel.ProductId);\n                var isFrom = _eventService.AddEventForm(Form);\n                bool isProductNonComplianceForm = false;\n                if (isFrom)\n                {\n                    isProductNonComplianceForm = _eventService.AddProductNonComplianceForm(new ProductNonComplianceForm() {\n                        EventDetailOptionsId = FormModel.ProductId,\n                        FormId = Form.EventFormId\n                    });\n                }\n                if (!isProductNonComplianceForm)\n                {\n                    _eventService.DelNonComplianceForm(Form);\n                    return StatusCode(StatusCodes.Status304NotModified, \"Non-Compliance Form Failed\");\n                }\n                return StatusCode(StatusCodes.Status200OK, \"Non-Compliance Form has been Added successfully\");\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Get)]\n        [ServiceFilter(typeof(ValidateTenantAttribute))]\n        [HttpPut(\"NonComplianceForm/UpdateNonComplainceForm\")]\n        public IActionResult UpdateNonComplainceForm([FromBody] NonComplianceFormsViewModel eventFormModel)\n        {\n            try\n            {\n                //Check If Event Form already Exists\n                var existing = _eventService.GetNonComplianceFormById(_currentTenant.Tenant_DB_Id, eventFormModel.EventFormId);\n                if (existing == null)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Form does not exist in system, please choose a valid form\"));\n                //name validation \n                var NameExisting = _eventService.GetEventFormByName(_currentTenant.Tenant_DB_Id, eventFormModel.Name);\n                if (NameExisting != null && NameExisting.EventFormId != existing.EventFormId)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Form Name already exists, please choose a Unique Form Name \"));\n\n                var eventForm = _mapper.Map<NonComplianceFormsViewModel, EventForms>(eventFormModel);\n                eventForm.TenantId = _currentTenant.Tenant_DB_Id;\n                eventForm.CreatedDate = existing.CreatedDate;\n                eventForm.CreatedBy = existing.CreatedBy;\n                eventForm.LastUpdatedBy = HttpContext.User.Identity.Name;\n                eventForm.LastUpdatedDate = DateTime.Now;\n                eventForm.EffectiveStartDate = existing.EffectiveStartDate;\n                var isFrom = _eventService.UpdateEventForm(eventForm);\n                bool isProductNonComplianceForm = false;\n                if (isFrom && (existing.ProductNonComplianceForm.FirstOrDefault().EventDetailOptionsId != eventFormModel.ProductId))\n                {\n                    isProductNonComplianceForm = _eventService.AddProductNonComplianceForm(new ProductNonComplianceForm()\n                    {\n                        Id = existing.ProductNonComplianceForm.FirstOrDefault().Id,\n                        EventDetailOptionsId = eventFormModel.ProductId,\n                        FormId = eventForm.EventFormId\n                    });\n                }\n                return StatusCode(StatusCodes.Status200OK, \"Non-Compliance Form has been updated successfully\");\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Get + \",\" + DigitraxV2Permissions.ProgramSettings.Get)]\n        [HttpGet(\"Forms\")]\n        [ApiVersion(\"2.0\")]\n        public IActionResult GetAllForms([DataSourceRequest] DataSourceRequest request)\n        {\n            try\n            {\n                ModifyRequest(request);\n                var eventForms = _eventService.GetEventForms(_currentTenant.Tenant_DB_Id, request);\n                var result = _mapper.Map<List<EventFormsViewModel>>(eventForms.Data);\n\n                foreach (var form in result)\n                {\n                    form.EventFormSections = form.EventFormSections.OrderBy(x => x.SortOrder).ToList();\n                    foreach (var section in form.EventFormSections)\n                    {\n                        section.EventFormFields = section.EventFormFields.OrderBy(x => x.SortOrder).ToList();\n                    }\n                }\n                var responseModel = new\n                {\n                    data = result,\n                    total = eventForms.Total\n                };\n                return Ok(responseModel);\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n\n        }\n\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Get + \",\" + DigitraxV2Permissions.ProgramSettings.Get)]\n        [HttpGet(\"Form/{Id}\")]\n        public IActionResult GetNonComplainceFormById ([FromRoute] int Id)\n        {\n            try\n            {\n                var existingEventForm = _eventService.GetNonComplianceFormById(_currentTenant.Tenant_DB_Id, Id);\n                if (existingEventForm == null)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Unable to find Event Form\"));\n                var result = _mapper.Map<EventForms, NonComplianceFormsViewModel>(existingEventForm);\n                result.ProductId = existingEventForm.ProductNonComplianceForm.FirstOrDefault().EventDetailOptionsId??0;\n\n                return Ok(new BaseApiResponse { Data = result });\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n\n        [Authorize(DigitraxV2Permissions.ProgramManagement.Get + \",\" + DigitraxV2Permissions.ProgramSettings.Get)]\n        [HttpGet(\"Form/Product/{Id}\")]\n        public IActionResult GetNonComplainceFormByProductId([FromRoute] int Id)\n        {\n            try\n            {\n                var existingEventForm = _eventService.GetNonComplianceFormByProductId(_currentTenant.Tenant_DB_Id, Id);\n                if (existingEventForm == null)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Unable to find Event Form\"));\n                var result = _mapper.Map<EventForms, NonComplianceFormsViewModel>(existingEventForm);\n                result.ProductId = existingEventForm.ProductNonComplianceForm.FirstOrDefault().EventDetailOptionsId ?? 0;\n\n                return Ok(new BaseApiResponse { Data = result });\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n        #endregion\n\n        private void ModifyRequest(DataSourceRequest request)\n        {\n            ModifyFilters(request.Filters);\n            ModifySorts(request.Sorts);\n        }\n        private void ModifyFilters(IList<IFilterDescriptor> filters)\n        {\n            var extractedCollection = new CompositeFilterDescriptor();\n            extractedCollection.LogicalOperator = FilterCompositionLogicalOperator.Or;\n            FilterDescriptor removalDescriptor = null;\n            if (filters != null && filters.Any())\n            {\n                foreach (var filter in filters)\n                {\n                    if (filter is CompositeFilterDescriptor)\n                        ModifyFilters(((CompositeFilterDescriptor)filter).FilterDescriptors);\n                    else\n                    {\n                        var descriptor = filter as FilterDescriptor;\n                        if (descriptor != null && descriptor.Member.Equals(\"FormType\"))\n                            descriptor.Member = \"FormTypeLookup.VisibleValue\";\n                    }\n                }\n                if (extractedCollection.FilterDescriptors.Count > 0)\n                    filters.Add(extractedCollection);\n                if (removalDescriptor != null)\n                    filters.Remove(removalDescriptor);\n            }\n        }\n\n        private void ModifySorts(IList<SortDescriptor> sorts)\n        {\n            if (sorts != null && sorts.Any())\n                foreach (var sort in sorts)\n                {\n                    if (sort != null && sort.Member != null && sort.Member.Equals(\"FormType\"))\n                        sort.Member = \"FormTypeLookup.VisibleValue\";\n                }\n        }\n    }\n}\n\n"}
{"feature_name": "Import Processing", "file_type": "Controller", "file_name": "ImportsController.cs", "file_content": "using Authentix.Digitrax.Authorization.Services;\nusing Authentix.Digitrax.Common;\nusing Authentix.Digitrax.Common.Utilities;\nusing Authentix.Digitrax.DataAccess.UnitOfWork;\nusing Authentix.Digitrax.Model.Data;\nusing Authentix.Digitrax.Model.Models;\nusing Authentix.Digitrax.Services.Services;\nusing Authentix.Digitrax.Services.ServicesImplementation;\nusing AuthentixDigitraxPlatform.ActionFilters;\nusing AuthentixDigitraxPlatform.Models;\nusing AuthentixDigitraxPlatform.Models.UIEvents.ResponseModels;\nusing AutoMapper;\nusing Azure.Storage.Blobs;\nusing CsvHelper;\nusing Kendo.Mvc.UI;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Caching.Memory;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace AuthentixDigitraxPlatform.Controllers\n{\n    [Produces(\"application/json\")]\n    [Consumes(\"application/json\")]\n    [ApiVersion(\"1.0\")]\n    [Route(\"{tenant_Id_guid}/api/v{v:apiVersion}/[controller]\")]\n    [ApiController]\n    [ServiceFilter(typeof(ValidateTenantAttribute))]\n    [ServiceFilter(typeof(LoggerAttribute))]\n    [Authorize]\n    public class ImportsController : ControllerBase\n    {\n\n        private readonly IUIMOrderService UimOrderService;\n        private readonly ILookupService LookupService;\n        private readonly Authentix.Digitrax.Common.Models.Tenant _currentTenant;\n        private readonly ILogger<ImportsController> _logger;\n        private readonly IDataExchangeConfigurationService _dataExchangeConfigurationService;\n        private readonly IUniqueIdentifiableMarkerService _uniqueIdentifiableMarkerService;\n        private readonly ICodeProcessingService _codeProcessingService;\n        private readonly IEventService _eventService;\n        private readonly IConfiguration _config;\n        private readonly IMapper Mapper;\n        private readonly IItemService _itemService;\n        private readonly IImportsService _importService;\n        private readonly IMemoryCache _cache;\n\n        public ImportsController(IUIMOrderService uimOrderService,\n            ILookupService lookupService,\n            IUniqueIdentifiableMarkerService uniqueIdentifiableMarkerService,\n            ITenantProvider tenantProvider,\n            ILogger<ImportsController> logger,\n            ICodeProcessingService codeProcessingService,\n            IEventService eventService,\n            IConfiguration config,\n            IMapper mapper,\n            IItemService itemService,\n            IImportsService importsService,\n            IMemoryCache cache\n            )\n        {\n            UimOrderService = uimOrderService;\n            LookupService = lookupService;\n            _currentTenant = tenantProvider.GetCurrentTenant();\n            _logger = logger;\n            _config = config;\n            Mapper = mapper;\n            _codeProcessingService = codeProcessingService;\n            _eventService = eventService;\n            _uniqueIdentifiableMarkerService = uniqueIdentifiableMarkerService;\n            _importService = importsService;\n            _itemService = itemService;\n            _cache = cache;\n        }\n\n        [Authorize(DigitraxV2Permissions.Imports.Get)]\n        [HttpGet(\"GetImportTypesList\")]\n        public IActionResult GetImportTypesList()\n        {\n            try\n            {\n                var importTypes = LookupService.GetLookupsByType(Constants.IMPORT_TYPE);\n\n                if (importTypes != null)\n                    return StatusCode(StatusCodes.Status200OK, new BaseApiResponse(Mapper.Map<IList<MasterLookupViewModel>>(importTypes)));\n                else\n                    return StatusCode(StatusCodes.Status404NotFound, new BaseApiResponse(\"No import types exists\"));\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n\n        [Authorize(DigitraxV2Permissions.Imports.Get)]\n        [HttpGet(\"GetAllItems\")]\n        public IActionResult GetAllItems()\n        {\n            try\n            {\n\n                var items = _importService.GetAllItems(_currentTenant.Tenant_DB_Id);\n                var result = Mapper.Map<List<ItemsViewModel>>(items);\n\n                foreach (var itm in result)\n                {\n                    itm.ItemLabelImagePath = string.IsNullOrWhiteSpace(itm.ItemLabelImagePath) ? null :\n                                                       new Uri(Path.Combine(_config.GetSection(\"Content\").GetSection(\"ProgramContentBaseUrl\").Value, _currentTenant.Tenant_Id,\n                                                               _config.GetSection(\"Content\").GetSection(\"ItemsFolder\").Value, itm.ItemLabelImagePath)).ToString();\n                }\n                return StatusCode(StatusCodes.Status200OK, new BaseApiResponse(result));\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n\n        }\n\n\n        [Authorize(DigitraxV2Permissions.Imports.Get)]\n        [HttpGet(\"GetDataExchangeFormatsForImport\")]\n        public IActionResult GetDataExchangeFormatsForImport([DataSourceRequest] DataSourceRequest request)\n        {\n            try\n            {\n                string defaultDB = _config.GetSection(\"Defaults\").GetSection(\"ProgramDBConnectionString\").Value;\n                DigitraxDbContext db_context = new DigitraxDbContext(defaultDB);\n                UnitOfWork _uow = new UnitOfWork(db_context, _config);\n                var dataExchangeConfigurationService = new DataExchangeConfigurationService(_uow, LookupService);\n\n                var result = dataExchangeConfigurationService.GetAllDataExchangeConfigurations(request);\n                var resultObj = new\n                {\n                    data = Mapper.Map<List<DataExchangeConfigViewModel>>(result.Data),\n                    total = result.Total\n                };\n                return Ok(resultObj);\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n\n        [Authorize(DigitraxV2Permissions.Imports.Add)]\n        [HttpPost(\"ImportFile\")]\n        [Consumes(\"multipart/form-data\")]\n        public IActionResult ImportFile([FromForm] ImportsViewModel model)\n        {\n            try\n            {\n\n                if (model.ImportTypeId == null)\n                {\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_REQUEST_FORMAT, \"Import Type Id is required\"));\n                }\n\n                string importType = LookupService.GetLookupById(model.ImportTypeId != null ? Convert.ToInt32(model.ImportTypeId) : 0).HiddenValue;\n\n\n                //Validate view model\n                var isViewModelValid = ValidateImportViewModel(importType, model);\n\n                if (!isViewModelValid.isValid)\n                {\n                    return isViewModelValid.reponse;\n                }\n\n                //validate import file\n                var checkValidation = ValidateImportFile(model, importType);\n\n                if (!checkValidation.isValid)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_FORMAT, checkValidation.error));\n\n                var currentDateTime = DateTime.Now;\n                var import = Mapper.Map<Imports>(model);\n                import.TenantId = _currentTenant.Tenant_DB_Id;\n                //import.JobName = model.JobName.Trim();\n                var file = UploadFileToAzure(model, _currentTenant.Tenant_Id);\n\n                if (!file.isValid)\n                {\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"File name exceeds limit.\"));\n                }\n\n                import.FileName = file.fileName;\n                //import.FilePath = file.filePath;\n                import.Status = LookupService.GetLookupByTypeAndValue(Constants.Import_STATUS, Constants.IMPORT_STATUS_RECEIVED)?.MasterLookupId ?? 0;\n                import.ActiveFlag = true;\n                //import.IsDeleted = false;\n                import.CreatedDate = currentDateTime;\n                import.CreatedBy = User.Identity.Name;\n                import.CreatedBy = User.Identity.Name??\"Postman\";\n                if (model.IsPortal)\n                {\n                    import.Method = LookupService.GetLookupByTypeAndValue(Constants.EVENT_METHOD_TYPE, Constants.EVENT_METHOD_TYPE_PORTAL)?.MasterLookupId ?? 0;\n                }\n                else\n                {\n                    import.Method = LookupService.GetLookupByTypeAndValue(Constants.EVENT_METHOD_TYPE, Constants.EVENT_METHOD_TYPE_API)?.MasterLookupId ?? 0;\n                }\n                _importService.SaveImport(import);\n                return StatusCode(StatusCodes.Status200OK, new BaseApiResponse(\"Import file has been imported successfully\"));\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        \n        //[Authorize(DigitraxV2Permissions.Imports.Add)]\n        [HttpPost(\"ExternalUIDs\")]\n        public IActionResult ExternalUIDs(ExternalUIDsViewModel model)\n        {\n            try\n            {\n                var userId = User.Identity.Name;\n                if (string.IsNullOrEmpty(userId))\n                    userId = User.Claims.FirstOrDefault(x => x.Type == \"azp\").Value;\n\n                MasterLookup ExternalLkp = LookupService.GetLookupByTypeAndValue(Constants.IMPORT_TYPE, Constants.IMPORT_TYPE_UID_CREATION);\n\n                if (ExternalLkp == null)\n                {\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_REQUEST_FORMAT, \"Import Type External UIDs not available\"));\n                }\n\n                Imports import = new Imports();\n                import.Type = ExternalLkp.MasterLookupId;\n\n\n                //Validate view model\n                var isViewModelValid = ValidateImportViewModel(ExternalLkp.HiddenValue, externalUIDsViewModel: model);\n\n\n                if (!isViewModelValid.isValid)\n                {\n                    return isViewModelValid.reponse;\n                }\n\n                var currentDateTime = DateTime.Now;\n                import.ItemId = model.ItemId;\n                import.UimFormatId = model.UimFormatId;\n                import.TenantId = _currentTenant.Tenant_DB_Id;\n                //import.ExternalUids = string.Join(\",\",model.UIDs);\n\n                import.ActiveFlag = true;\n                import.CreatedDate = currentDateTime;\n                import.CreatedBy = userId;\n                import.Method = LookupService.GetLookupByTypeAndValue(Constants.EVENT_METHOD_TYPE, Constants.EVENT_METHOD_TYPE_API)?.MasterLookupId ?? 0;\n\n                import.FileName = UploadExternalUIDsFileToAzure(model.UIDs);\n\n\n                if (IsAsyncExternalUIDsEnabled(model.UIDs.Count))\n                {\n                    import.Status = LookupService.GetLookupByTypeAndValue(Constants.Import_STATUS, Constants.IMPORT_STATUS_RECEIVED)?.MasterLookupId ?? 0;\n                    _importService.SaveImport(import);\n\n                    // Process External UIDs async\n                    //string jobId = BackgroundJob.Enqueue<ICodeProcessingService>(x => x.ProcessUniqueIdentifierEventAsync(uniqueIdentifierEventModel, _currentTenant));\n\n                    var response = new BaseEventResponseModel(false, null, null, \"External UIDs Queued Successfully. Please check StatusUrl to get updated status of the Event\", null);\n                    response.StatusUrl = CacheRequest(import.ImportId, Constants.IMPORT_STATUS_RECEIVED, null, null);\n                    response.Data = new { ImportId = import.ImportId };\n                    return StatusCode(StatusCodes.Status202Accepted, response);\n                    //return Accepted(response);\n                }\n                else\n                {\n                    import.Status = LookupService.GetLookupByTypeAndValue(Constants.Import_STATUS, Constants.IMPORT_STATUS_PROCESSING)?.MasterLookupId ?? 0;\n                    _importService.SaveImport(import);\n\n                    try\n                    {\n                        _codeProcessingService.ProcessExternalUIDs(import, true);\n                    }\n                    catch (Authentix.Digitrax.Common.Exceptions.ValidationException ex)\n                    {\n                        var response = new BaseEventResponseModel(true, \"Validation Error\", ex.Message, \"Error Occured\", null);\n                        response.Data = new { ImportId = import.ImportId };\n                        return StatusCode(StatusCodes.Status400BadRequest, response);\n                    }\n                    catch (Exception ex)\n                    {\n                        var response = new BaseEventResponseModel(true, \"System Error\", ex.Message, \"Error Occured\", null);\n                        response.Data = new { ImportId = import.ImportId };\n                        return StatusCode(StatusCodes.Status500InternalServerError, response);\n                    }\n                }\n\n                var res = new BaseEventResponseModel(false, null, null, \"External UIDs Imported Successfully.\", null);\n                res.Data = new { ImportId = import.ImportId };\n                return StatusCode(StatusCodes.Status200OK, res);\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxV2Permissions.Imports.Get)]\n        [HttpGet(\"GetImports\")]\n        public IActionResult GetImports([DataSourceRequest] DataSourceRequest request)\n        {\n            try\n            {\n                //ModifyRequest(request);\n\n                var imports = _importService.GetImports(request, _currentTenant.Tenant_DB_Id);\n                IList<ImportsListViewModel> importsListViewModels = Mapper.Map<IList<ImportsListViewModel>>(imports.Data);\n\n                var storageSettings = _config.GetSection(\"BlobStorageSettings\");\n                string connectionString = storageSettings.GetValue<string>(\"ConnectionString\");\n                string container = storageSettings.GetValue<string>(\"ImportContainer\");\n                var containerClient = new BlobContainerClient(connectionString, container);\n\n                string containerforFailedImports = storageSettings.GetValue<string>(\"FailedImportContainer\");\n                var containerClientforFailedImports = new BlobContainerClient(connectionString, containerforFailedImports);\n                \n\n                foreach (var import in importsListViewModels)\n                {\n                    import.FilePath = containerClient.Uri.AbsoluteUri + \"/\" + import.FileName;\n                    import.FailedFilePath = containerClientforFailedImports.Uri.AbsoluteUri + \"/\" + import.FailedFileName;\n                }\n\n\n\n                var responseModel = new\n                {\n                    data = importsListViewModels,\n                    total = imports.Total\n                };\n\n                return StatusCode(StatusCodes.Status200OK, responseModel);\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n\n\n        [Authorize(DigitraxV2Permissions.Imports.Get)]\n        [HttpGet(\"{importId}\")]\n        public IActionResult GetImport(long importId)\n        {\n            try\n            {\n                var import = _importService.GetImportById(importId, _currentTenant.Tenant_DB_Id);\n\n                if (import != null)\n                {\n                    string importType = LookupService.GetLookupById(import.Type).HiddenValue;\n                    string method = LookupService.GetLookupById(import.Method).HiddenValue;\n\n                    var importVM = Mapper.Map<ImportDetailsViewModel>(import);\n\n                    if (importType == Constants.IMPORT_TYPE_UID_CREATION)\n                    {\n                        if (method == Constants.EVENT_METHOD_TYPE_PORTAL)\n                        {\n                            string defaultDB = _config.GetSection(\"Defaults\").GetSection(\"ProgramDBConnectionString\").Value;\n                            DigitraxDbContext db_context = new DigitraxDbContext(defaultDB);\n                            UnitOfWork _uow = new UnitOfWork(db_context, _config);\n                            var dataExchangeConfigurationService = new DataExchangeConfigurationService(_uow, LookupService);\n\n                            var dataExchangeFormat = dataExchangeConfigurationService.GetExchangeConfigurationById(import.DataExchangeFormatId ?? 0);\n                            //var PrintPartner = dataExchangeConfigurationService.GetPrintPartnerById(order.PrintPartnerId);\n\n\n                            importVM.DataExchangeFormatName = dataExchangeFormat.Name;\n                        }\n\n                        importVM.ItemLabelImagePath = string.IsNullOrWhiteSpace(import.Item.ItemLabelImagePath) ? null :\n                                                           new Uri(Path.Combine(_config.GetSection(\"Content\").GetSection(\"ProgramContentBaseUrl\").Value, _currentTenant.Tenant_Id,\n                                                                   _config.GetSection(\"Content\").GetSection(\"ItemsFolder\").Value, import.Item.ItemLabelImagePath)).ToString();\n                    }\n\n                    var storageSettings = _config.GetSection(\"BlobStorageSettings\");\n                    var connectionStr = storageSettings.GetValue<string>(\"ConnectionString\");\n                    var container = storageSettings.GetValue<string>(\"ImportContainer\");\n                    var containerClient = new BlobContainerClient(connectionStr, container);\n                    var blobClient = containerClient.GetBlobClient(importVM.FileName);\n\n\n                    using (var memoryStream = new MemoryStream())\n                    {\n                        blobClient.DownloadTo(memoryStream);\n                        memoryStream.Position = 0;\n\n                        using (var reader = new StreamReader(memoryStream))\n                        using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))\n                        {\n                            int count = 0;\n                            csv.Read();\n                            do\n                            {\n                                if (count == 11)\n                                {\n                                    break;\n                                }\n\n                                IParser parser = csv.Parser;\n\n                                if (importVM.FileRecords == null)\n                                {\n                                    importVM.FileRecords = new List<string>();\n                                }\n\n                                importVM.FileRecords.Add(string.Join(\",\", parser.Record));\n\n                                count++;\n\n                            } while (csv.Read());\n                        }\n                    }\n\n\n                    return StatusCode(StatusCodes.Status200OK, new BaseApiResponse(importVM));\n                }\n                else\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"Import ID is invalid\"));\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [HttpGet(\"{import_id}/status\")]\n        [Authorize(DigitraxV2Permissions.Imports.Get)]\n        public IActionResult GetCodeEventStatus([FromRoute] long import_id)\n        {\n            try\n            {\n                List<string> statusDetail = new List<string>();\n\n                string cacheKey = \"ExternalUIDs_\" + import_id.ToString();\n                List<string> cacheEntry_statusDetail;\n\n                if (_cache.TryGetValue(cacheKey, out cacheEntry_statusDetail))\n                {\n                    statusDetail = cacheEntry_statusDetail;\n                }\n                else\n                {\n                    Imports import = _importService.GetExternalUIDsImportStatusDetails(import_id, _currentTenant.Tenant_DB_Id);\n\n                    CacheRequest(import.ImportId, import.StatusNavigation.VisibleValue, import.ErrorCode, import.ErrorDescription);\n\n                    string statusDetails = $\"Status : {import.StatusNavigation.VisibleValue}\";\n                    string errorCode = $\"ErrorCode : {import.ErrorCode ?? \"null\"}\";\n                    string errorDescription = $\"ErrorDescription : {import.ErrorDescription ?? \"null\"}\";\n\n                    statusDetail.Add(statusDetails);\n                    statusDetail.Add(errorCode);\n\n                    if (errorDescription != null)\n                    {\n                        errorDescription = errorDescription.Replace(\"\\r\\n\\r\\n\", \"  \");\n                    }\n\n                    statusDetail.Add(errorDescription);\n                }\n\n                return Ok(statusDetail);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex.Message);\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}...Params: {import_id}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n\n        #region Internal Functions\n\n        private (string fileName, string filePath, bool isValid) UploadFileToAzure(ImportsViewModel model, string tenantGuid)\n        {\n            string uniqueFileName = null;\n            string filePath = null;\n\n            if (model.ImportFile != null)\n            {\n                var storageSettings = _config.GetSection(\"BlobStorageSettings\");\n                string connectionString = storageSettings.GetValue<string>(\"ConnectionString\");\n                string container = storageSettings.GetValue<string>(\"ImportContainer\");\n                var containerClient = new BlobContainerClient(connectionString, container);\n\n                var fileBase = Path.GetFileNameWithoutExtension(model.ImportFile.FileName).Replace(\" \", \"_\");\n                var ext = Path.GetExtension(model.ImportFile.FileName);\n                uniqueFileName = Path.Combine(fileBase + \"_\" + Guid.NewGuid().ToString() + ext);\n\n                if (model.ImportFile.Length > 0 && uniqueFileName.Length <= 150)\n                {\n                    using (var memoryStream = new MemoryStream())\n                    {\n                        model.ImportFile.CopyTo(memoryStream);\n                        memoryStream.Position = 0;\n                        using (var stream = new StreamReader(memoryStream))\n                        {\n                            _logger.LogInformation($\"Uploading file {uniqueFileName} to Azure Blob Container {container}\");\n                            containerClient.UploadBlob(uniqueFileName, stream.BaseStream);\n                            filePath = containerClient.Uri.AbsoluteUri + \"/\" + uniqueFileName;\n                        }\n                    }\n                }\n                else\n                {\n                    return (uniqueFileName, filePath, false);\n                }\n            }\n\n            return (uniqueFileName, filePath, true);\n        }\n\n        private string UploadExternalUIDsFileToAzure(List<string> ExternalUIDs)\n        {\n            string uniqueFileName = Path.Combine(\"ExternalUIDs_\" + Guid.NewGuid().ToString() + \".csv\");\n\n            MemoryStream ms = new MemoryStream();\n            StreamWriter tw = new StreamWriter(ms);\n            byte[] bytes = ms.ToArray();\n\n            foreach (var uid in ExternalUIDs)\n            {\n                tw.WriteLine(uid);\n            }\n\n            tw.Flush();\n            bytes = ms.ToArray();\n            ms.Close();\n\n            UploadToAzure(bytes, uniqueFileName);\n\n            return uniqueFileName;\n        }\n\n\n        public string UploadToAzure(byte[] bytes, string fileName)\n        {\n            var storageSettings = _config.GetSection(\"BlobStorageSettings\");\n            string connectionString = storageSettings.GetValue<string>(\"ConnectionString\");\n            string container = storageSettings.GetValue<string>(\"ImportContainer\");\n            var containerClient = new BlobContainerClient(connectionString, container);\n\n            string absoluteUri = \"\";\n            using (var ms = new MemoryStream(bytes))\n            {\n                ms.Position = 0;\n                using (var stream = new StreamReader(ms))\n                {\n                    _logger.LogInformation($\"Uploading file {fileName} to Azure Blob Container {container}\");\n                    var resposne = containerClient.UploadBlob(fileName, stream.BaseStream);\n                    absoluteUri = containerClient.Uri.AbsoluteUri + \"/\" + fileName;\n                }\n            }\n\n            return absoluteUri;\n        }\n\n        private (bool isValid, string error) ValidateImportFile(ImportsViewModel model, string importType)\n        {\n\n            if (importType == Constants.IMPORT_TYPE_UID_CREATION)\n            {\n                string defaultDB = _config.GetSection(\"Defaults\").GetSection(\"ProgramDBConnectionString\").Value;\n                DigitraxDbContext db_context = new DigitraxDbContext(defaultDB);\n                UnitOfWork _uow = new UnitOfWork(db_context, _config);\n                var dataExchangeConfigurationService = new DataExchangeConfigurationService(_uow, LookupService);\n\n                var dataExchangeFormat = dataExchangeConfigurationService.GetExchangeConfigurationById(model?.DataExchangeFormatId ?? 0);\n\n                if (dataExchangeFormat == null)\n                    return (false, \"Invalid data exchange format id\");\n\n                var line = string.Empty;\n                using (var reader = new StreamReader(model.ImportFile.OpenReadStream()))\n                {\n                    if (reader.Peek() >= 0)\n                    {\n                        line = reader.ReadLine();\n                        var headings = line.Split(',');\n                        //var actualCols = _config.GetSection(\"AggregationProcessingSettings\").GetValue<int>(\"ColumnsInAggregationRequestFile\");\n                        //var headerIncluded = _config.GetSection(\"AggregationProcessingSettings\").GetValue<bool>(\"HeaderRowExistsInAggregationRequest\");\n\n                        if (dataExchangeFormat?.DataExchangeConfigFields == null)\n                            return (false, \"Invalid Import File\");\n\n                        if (headings.Length != dataExchangeFormat.DataExchangeConfigFields.Count)\n                            return (false, \"Invalid Import File\");\n\n                        if (!dataExchangeFormat.DataExchangeConfigFields.Any(x => x.FieldTypeLookup.HiddenValue == Constants.DATA_EXCHANGE_CONFIG_FIELD_TYPE_UIM))\n                        {\n                            return (false, \"Invalid Import File! Data exchange format must contain UID field\");\n                        }\n\n                        for (int i = 0; i < dataExchangeFormat.DataExchangeConfigFields.Count(); i++)\n                        {\n                            if (string.IsNullOrWhiteSpace(headings[i]) || headings[i].Trim().ToUpper() != dataExchangeFormat.DataExchangeConfigFields.ToList()[i].FieldName.ToUpper())\n                            {\n                                return (false, \"Columns are invalid or not present in correct order in the import file\");\n                            }\n                        }\n                    }\n                    else\n                        return (false, \"File is empty\");\n                }\n            }\n            else if (importType == Constants.IMPORT_TYPE_EVENTS)\n            {\n\n                /*var existingEventForm = _eventService.GetEventFormById(_currentTenant.Tenant_DB_Id, model?.EventFormId ?? 0);\n                if (existingEventForm == null)\n                    return (false, \"Unable to find Event Form\");\n                var eventFormsViewModel = Mapper.Map<EventForms, EventFormsViewModel>(existingEventForm);\n\n\n                StringBuilder requiredColumns = new StringBuilder();\n                var line = string.Empty;\n                using (var reader = new StreamReader(model.ImportFile.OpenReadStream()))\n                {\n                    if (reader.Peek() >= 0)\n                    {\n                        line = reader.ReadLine();\n                        var headings = line.Split(',');\n\n                        bool isFileValid = true;\n                        int maxHeadings = headings.Count();\n\n                        int headingIndex = 1;\n                        if (model.IsByUid)\n                        {\n                            headingIndex = 1;\n                            requiredColumns.Append(\"{UID}\");\n                            if (headings[0].ToUpper() != \"UID\")\n                            {\n                                return (false, $\"First column should be UID when importing events by UID.\");\n                            }\n                        }\n                        else\n                        {\n                            headingIndex = 2;\n                            requiredColumns.Append(\"{Starting UID}{Ending UID}\");\n                            if (headings[0].ToUpper() != \"Starting UID\".ToUpper() || headings[1].ToUpper() != \"Ending UID\".ToUpper())\n                            {\n                                return (false, $\"First column and second column should be Starting UID and Ending UID respectively when importing events by UID range.\");\n                            }\n                        }\n\n                        int fileUploadLkpId = LookupService.GetLookupByTypeAndValue(Constants.EVENT_DETAIL_LOOKUP_TYPE, Constants.EVENT_DETAIL_LOOKUP_TYPE_FILE_UPLOAD)?.MasterLookupId ?? 0;\n\n                        foreach (var eventFormSection in eventFormsViewModel.EventFormSections)\n                        {\n                            foreach (var eventFormField in eventFormSection.EventFormFields)\n                            {\n                                if (headingIndex <= maxHeadings)\n                                {\n                                    if (eventFormField.EventDetail.TypeLkpId != fileUploadLkpId)\n                                    {\n                                        if (eventFormField.EventDetail.Name.ToUpper() != headings[headingIndex].ToUpper())\n                                        {\n                                            isFileValid = false;\n                                        }\n                                    }\n                                }\n\n                                if (eventFormField.EventDetail.TypeLkpId != fileUploadLkpId)\n                                {\n                                    requiredColumns.Append($\"{{{eventFormField.EventDetail.Name}}}\");\n                                    headingIndex++;\n                                }\n                            }\n                        }\n\n                        if (headingIndex != maxHeadings || !isFileValid)\n                        {\n                            return (false, $\"Columns are invalid or not present in correct order in the import file. Required columns and their sequence are as follows.  \\n {requiredColumns}\");\n                        }\n\n\n                        //if (eventFormsViewModel.EventFormSections != null && eventFormsViewModel.EventFormSections.Count() > 0)\n                        //{\n                        //    for (int i = 0; i < eventFormsViewModel.EventFormSections.Count(); i++)\n                        //    {\n                        //        if(eventFormsViewModel.EventFormSections[i].EventFormFields != null && eventFormsViewModel.EventFormSections[i].EventFormFields.Count() > 0)\n                        //        {\n\n                        //        }\n                        //    }\n                        //}\n                    }\n                    else\n                        return (false, \"File is empty\");*/\n                var existingEventForm = _eventService.GetEventFormById(_currentTenant.Tenant_DB_Id, model?.EventFormId ?? 0);\n                if (existingEventForm == null)\n                    return (false, \"Unable to find Event Form\");\n                var eventFormsViewModel = Mapper.Map<EventForms, EventFormsViewModel>(existingEventForm);\n\n                var requiredColumns = new List<string>();\n                var columnIndices = new Dictionary<string, int>();\n                var line = string.Empty;\n\n                using (var reader = new StreamReader(model.ImportFile.OpenReadStream()))\n                {\n                    if (reader.Peek() >= 0)\n                    {\n                        line = reader.ReadLine();\n                        var headings = line.Split(',');\n\n                        // Map column names to their indices\n                        for (int i = 0; i < headings.Length; i++)\n                        {\n                            columnIndices[headings[i]] = i;\n                        }\n\n                        // Add required columns\n                        if (model.IsByUid)\n                        {\n                            requiredColumns.Add(\"UID\");\n                            if (!columnIndices.ContainsKey(\"UID\")&& columnIndices.FirstOrDefault(x=>x.Key==\"UID\").Value==0)\n                            {\n                                return (false, $\"First column should be UID when importing events by UID.\");\n                            }\n                        }\n                        else\n                        {\n                            requiredColumns.AddRange(new[] { \"Starting UID\", \"Ending UID\" });\n                            if (!columnIndices.ContainsKey(\"Starting UID\") || !columnIndices.ContainsKey(\"Ending UID\"))\n                            {\n                                return (false, $\"First column and second column should be Starting UID and Ending UID respectively when importing events by UID range.\");\n                            }\n                        }\n\n                        foreach (var eventFormSection in eventFormsViewModel.EventFormSections)\n                        {\n                            foreach (var eventFormField in eventFormSection.EventFormFields)\n                            {\n                                var fieldName = eventFormField.EventDetail.Name;\n                                if (columnIndices.ContainsKey(fieldName))\n                                {\n                                    requiredColumns.Add(fieldName);\n                                }\n                            }\n                        }\n\n                        // Check if all required columns are present\n                        if (!requiredColumns.All(columnIndices.ContainsKey))\n                        {\n                            var missingColumns = string.Join(\", \", requiredColumns.Where(col => !columnIndices.ContainsKey(col)));\n                            return (false, $\"Columns are missing in the import file: {missingColumns}\");\n                        }\n                    }\n                    else\n                    {\n                        return (false, \"File is empty\");\n                    }\n                }\n\n            }\n            else if (importType == Constants.IMPORT_TYPE_USERS)\n            {\n                return ValidateImportFile_User(model);\n            }\n\n            return (true, \"Valid\");\n        }\n\n\n        private (bool isValid, IActionResult reponse) ValidateImportViewModel(string importType, ImportsViewModel model = null, ExternalUIDsViewModel externalUIDsViewModel = null)\n        {\n            if (importType == Constants.IMPORT_TYPE_UID_CREATION && model != null)\n            {\n                if (model.DataExchangeFormatId == null)\n                {\n                    return (false, StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_REQUEST_FORMAT, \"Data Exchange Format Id is required\")));\n                }\n\n                if (model.ItemId == null)\n                {\n                    return (false, StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_REQUEST_FORMAT, \"Item Id is required\")));\n                }\n\n                if (model.UIMFormatId == null)\n                {\n                    return (false, StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_REQUEST_FORMAT, \"UID Format Id is required\")));\n                }\n\n                if (model.IsProductAssociated && (model.ProductId == null || model.ProductId == 0))\n                    return (false, StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"No associated product has been selected\")));\n\n\n                int itemId = 0;\n                if (model.ItemId != null)\n                {\n                    itemId = Convert.ToInt32(model.ItemId);\n                }\n                var existingItem = _itemService.GetItem(_currentTenant.Tenant_DB_Id, itemId);\n                if (existingItem == null)\n                    return (false, StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"Invalid item id\")));\n            }\n\n            else if (importType == Constants.IMPORT_TYPE_EVENTS)\n            {\n                if (model.EventConfigurationId == null)\n                {\n                    return (false, StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_REQUEST_FORMAT, \"Event Configuration Id is required\")));\n                }\n\n                if (model.EventDate == null)\n                {\n                    return (false, StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_REQUEST_FORMAT, \"Event Date is required\")));\n                }\n\n                if (model.IsLocationRequired && model.LocationId == null)\n                {\n                    return (false, StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_REQUEST_FORMAT, \"Location Id is required\")));\n                }\n\n                if (model.EventFormId == null)\n                {\n                    return (false, StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_REQUEST_FORMAT, \"Event Form Id is required\")));\n                }\n\n            }\n            else if (importType == Constants.IMPORT_TYPE_UID_CREATION && externalUIDsViewModel != null)\n            {\n                int itemId = 0;\n                if (externalUIDsViewModel.ItemId != null)\n                {\n                    itemId = Convert.ToInt32(externalUIDsViewModel.ItemId);\n                }\n                var existingItem = _itemService.GetItem(_currentTenant.Tenant_DB_Id, itemId);\n                if (existingItem == null)\n                    return (false, StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"Invalid item id\")));\n\n                var existingUimFormat = _uniqueIdentifiableMarkerService.GetUIMFormatByUimFormatId(externalUIDsViewModel?.UimFormatId ?? 0);\n\n                if (existingUimFormat == null)\n                    return (false, StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"Invalid UimFormatId id\")));\n\n                if (existingUimFormat.TypeNavigation.HiddenValue != Constants.Code_Format_External)\n                {\n                    return (false, StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"Invalid UimFormatId id. Uim format is not of type External.\")));\n                }\n\n                var itemAssociation = existingUimFormat.UimFormatItems.FirstOrDefault(x => x.ItemId == externalUIDsViewModel.ItemId);\n\n                if (itemAssociation == null)\n                {\n                    return (false, StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Item with ItemId {externalUIDsViewModel.ItemId} is not associated with UimFormat with UimFormatId {externalUIDsViewModel.UimFormatId}\")));\n                }\n\n                if (externalUIDsViewModel.UIDs == null || externalUIDsViewModel.UIDs.Count() == 0)\n                {\n                    return (false, StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"UIDs cannot be null or empty\")));\n                }\n            }\n            else if (importType == Constants.IMPORT_TYPE_USERS && model != null)\n            {\n                return ValidateImportViewModel_UserType(model);\n            }\n            return (true, StatusCode(StatusCodes.Status200OK));\n        }\n\n        private bool IsAsyncExternalUIDsEnabled(int contentsCount)\n        {\n            bool result = false;\n            bool isHangfireEnabled = _config.GetSection(\"HangfireSettings\").GetValue<bool>(\"EnableHangfire\");\n            bool isAsyncExternalUIDsEnabled = _config.GetSection(\"ExternalUIDsSettings\").GetValue<bool>(\"EnableAsyncExternalUIDs\");\n\n            bool IsAsyncEnabled = isHangfireEnabled && isAsyncExternalUIDsEnabled;\n\n            if (IsAsyncEnabled)\n            {\n                bool isAsyncContentLimit = contentsCount >= _config.GetSection(\"ExternalUIDsSettings\").GetValue<int>(\"MaxSyncContentSize\");\n                result = IsAsyncEnabled && isAsyncContentLimit;\n            }\n            return result;\n        }\n\n        private string CacheRequest(long importId, string status, string errorCode, string errorDescription)\n        {\n            string status_url = _config.GetSection(\"ExternalUIDsSettings\").GetSection(\"ExternalUIDsImportStatusUrl\").Value;\n            status_url = status_url.Replace(\"<tenant_id>\", _currentTenant.Tenant_Id);\n            status_url = status_url.Replace(\"<import_id>\", importId.ToString());\n\n            #region Cache Event Status\n            // Put Status in Cache\n\n            // Set cache options.\n            var cacheEntryOptions = new MemoryCacheEntryOptions()\n                // Keep in cache for this time, reset time if accessed.\n                .SetSlidingExpiration(TimeSpan.FromMinutes(Double.Parse(_config.GetSection(\"ExternalUIDsSettings\").GetSection(\"CacheExpiry\").Value)));\n\n            string statusDetails = $\"Status : {status}\";\n            string error_code = $\"ErrorCode : {errorCode ?? \"null\"}\";\n\n            if (errorDescription != null)\n            {\n                errorDescription = errorDescription.Replace(\"\\r\\n\\r\\n\", \"  \");\n            }\n\n            string error_description = $\"ErrorDescription : {errorDescription ?? \"null\"}\";\n\n            List<string> cacheEntry_status = new List<string> { statusDetails, error_code, error_description };\n\n            string cacheKey = \"ExternalUIDs_\" + importId.ToString();\n\n            // Save data in cache.\n            _cache.Set(cacheKey, cacheEntry_status, cacheEntryOptions);\n            #endregion\n\n            return status_url;\n        }\n\n        private (bool isValid, IActionResult reponse) ValidateImportViewModel_UserType(ImportsViewModel model = null)\n        {\n            if (model.UserTypeId == null)\n            {\n                return (false, StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_REQUEST_FORMAT, \"User Type Id is required\")));\n            }\n            else\n            {\n                if (LookupService.GetLookupById(Convert.ToInt32(model.UserTypeId)) == null)\n                {\n                    return (false, StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"Invalid User Type\")));\n                }\n            }\n            return (true, StatusCode(StatusCodes.Status200OK, new BaseApiResponse()));\n        }\n        private (bool isValid, string error) ValidateImportFile_User(ImportsViewModel model) \n        {\n            if (model == null)\n            {\n                return (false, \"Missing File\");\n            }\n            else\n            {\n                using (var reader = new StreamReader(model.ImportFile.OpenReadStream()))\n                {\n                    var line = string.Empty;\n                    if (reader.Peek() >= 0)\n                    {\n                        line = reader.ReadLine();\n                        if (String.IsNullOrEmpty(line))\n                        {\n                            return (false, \"Empty File\");\n                        }\n                        var allHeadings = line.Split(',');\n                        var headings = allHeadings.Distinct().ToList();\n                        var noOfColums = headings.Count;\n                        if (noOfColums > 1)\n                        {\n                            if (noOfColums != allHeadings.Length)\n                            {\n                            return (false, \"File contains duplicate columns\");\n                            }\n                            var RequiredFields = _config.GetSection(\"UserImport\").GetSection(\"ImportFileColumns_Required\").Value.Split(\",\").ToList();\n                            var noOfRequiredColums = RequiredFields.Count;\n                            var requiredHeadings = headings.Where(x => RequiredFields.Contains(x)).ToList();\n                            if (requiredHeadings.Count < noOfRequiredColums)\n                            {\n                                return (false, \"Required column missing\");\n                            }\n                            else\n                            {\n                                var optionalHeadings = headings.Where(x => !RequiredFields.Contains(x)).ToList();\n                                var optionalFields = _config.GetSection(\"UserImport\").GetSection(\"ImportFileColumns_Optional\").Value.Split(\",\").ToList();\n                                if ((optionalHeadings.Where(x => optionalFields.Contains(x))).Count()>1)\n                                {\n                                    return (false, \"Invalid columns\");\n                                }\n                                \n                            }\n                        }\n                        else \n                        {\n                            return (false, \"Empty File\");\n                        }\n                    }\n                    else\n                        return (false, \"File is empty\");\n                }\n            }\n            return (true, \"Valid\");\n        }\n        #endregion\n    }\n}\n"}
{"feature_name": "Order Processing", "file_type": "Controller", "file_name": "OrderController.cs", "file_content": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text.RegularExpressions;\nusing Authentix.Digitrax.Authorization.Services;\nusing Authentix.Digitrax.CodeGenerator;\nusing Authentix.Digitrax.CodeGenerator.ServiceModels;\nusing Authentix.Digitrax.Common;\nusing Authentix.Digitrax.Common.Utilities;\nusing Authentix.Digitrax.Model.Models;\nusing Authentix.Digitrax.Services.Services;\nusing AuthentixDigitraxPlatform.ActionFilters;\nusing AuthentixDigitraxPlatform.Models;\nusing AutoMapper;\nusing Kendo.Mvc.Extensions;\nusing Kendo.Mvc.UI;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing System.Linq;\nusing Kendo.Mvc;\n\nnamespace AuthentixDigitraxPlatform.Controllers\n{\n    [Produces(\"application/json\")]\n    [Consumes(\"application/json\")]\n    [ApiVersion(\"1.0\")]\n    [Route(\"{tenant_Id_guid}/api/v{v:apiVersion}/[controller]\")]\n    [ApiController]\n    [ServiceFilter(typeof(ValidateTenantAttribute))]\n    [ServiceFilter(typeof(LoggerAttribute))]\n    public class OrderController : ControllerBase\n    {\n        private readonly IOrderService OrderService;\n        private readonly IProductService ProductService;\n        private readonly Authentix.Digitrax.Common.Models.Tenant _currentTenant;\n        private readonly ILogger<OrderController> _logger;\n        private readonly IMapper Mapper;\n        private readonly IWebHostEnvironment _webHostEnvironment;\n        private readonly IConfiguration _config;\n        private readonly ICodeFormatService CodeFormatService;\n        private readonly ILookupService LookupService;\n\n        public OrderController(IOrderService orderService, IProductService productService,\n            ITenantProvider tenantProvider,\n            ILogger<OrderController> logger,\n            IMapper mapper,\n            IWebHostEnvironment hostEnvironment,\n            IConfiguration config,\n            ICodeFormatService codeFormatService,\n            ILookupService lookupService)\n        {\n            OrderService = orderService;\n            ProductService = productService;\n            _currentTenant = tenantProvider.GetCurrentTenant();\n            _logger = logger;\n            Mapper = mapper;\n            _webHostEnvironment = hostEnvironment;\n            _config = config;\n            CodeFormatService = codeFormatService;\n            LookupService = lookupService;\n        }\n\n        #region APIs\n\n        [Authorize(DigitraxPermissions.UnitLevelOrder.Get)]\n        [HttpGet(\"GetUnitOrdersList\")]\n        public IActionResult GetUnitOrdersList()\n        {\n            try\n            {\n                var orders = OrderService.GetAllUnitLevelOrders();\n\n                var responseModel = new\n                {\n                    data = Mapper.Map<IList<OrderListViewModel>>(orders),\n                    total = orders.Count\n                };\n\n                return StatusCode(StatusCodes.Status200OK, responseModel);\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxPermissions.UnitLevelOrder.Get)]\n        [HttpGet(\"GetUnitOrdersList\")]\n        [ApiVersion(\"2.0\")]\n        public IActionResult GetUnitOrdersListV2([DataSourceRequest]DataSourceRequest request)\n        {\n            try\n            {\n                ModifyRequest(request);\n                var orders = OrderService.GetAllUnitLevelOrders(request, _currentTenant.Tenant_DB_Id);\n\n                var responseModel = new\n                {\n                    data = Mapper.Map<IList<OrderListViewModel>>(orders.data),\n                    total = orders.total\n                };\n\n                return StatusCode(StatusCodes.Status200OK, responseModel);\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxPermissions.AggregateLevelOrder.Get)]\n        [HttpGet(\"GetAggregatedOrdersList\")]\n        public IActionResult GetAggregatedOrdersList()\n        {\n            try\n            {\n                var orders = OrderService.GetAllAggregatedLevelOrders();\n\n                var responseModel = new\n                {\n                    data = Mapper.Map<IList<OrderListViewModel>>(orders),\n                    total = orders.Count\n                };\n\n                return StatusCode(StatusCodes.Status200OK, responseModel);\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxPermissions.AggregateLevelOrder.Get)]\n        [HttpGet(\"GetAggregatedOrdersList\")]\n        [ApiVersion(\"2.0\")]\n        public IActionResult GetAggregatedOrdersListV2([DataSourceRequest]DataSourceRequest request)\n        {\n            try\n            {\n                ModifyRequest(request);\n                var orders = OrderService.GetAllAggregatedLevelOrders(request, _currentTenant.Tenant_DB_Id);\n\n                var responseModel = new\n                {\n                    data = Mapper.Map<IList<OrderListViewModel>>(orders.data),\n                    total = orders.total\n                };\n\n                return StatusCode(StatusCodes.Status200OK, responseModel);\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxPermissions.ExternalCode.Get)]\n        [HttpGet(\"GetUploadCodesList\")]\n        public IActionResult GetUploadCodesList()\n        {\n            try\n            {\n              \n                var orders = OrderService.GetAllUploadCodesOrders();\n\n                var responseModel = new\n                {\n                    data = Mapper.Map<IList<OrderListViewModel>>(orders),\n                    total = orders.Count\n                };\n\n                return StatusCode(StatusCodes.Status200OK, responseModel);\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxPermissions.ExternalCode.Get)]\n        [HttpGet(\"GetUploadCodesList\")]\n        [ApiVersion(\"2.0\")]\n        public IActionResult GetUploadCodesListV2([DataSourceRequest]DataSourceRequest request)\n        {\n            try\n            {\n                ModifyRequest(request);\n                var orders = OrderService.GetAllUploadCodesOrders(request, _currentTenant.Tenant_DB_Id);\n\n                var responseModel = new\n                {\n                    data = Mapper.Map<IList<OrderListViewModel>>(orders.data),\n                    total = orders.total\n                };\n\n                return StatusCode(StatusCodes.Status200OK, responseModel);\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxPermissions.UnitLevelOrder.Get + \",\" + DigitraxPermissions.AggregateLevelOrder.Get)]\n        [HttpGet(\"{orderId}\")]\n        public IActionResult GetOrder([FromRoute]int orderId)\n        {\n            try\n            {\n                var order = Mapper.Map<UnitOrderViewModel>(OrderService.GetOrder(orderId));\n\n                if (order != null)\n                    return StatusCode(StatusCodes.Status200OK, new BaseApiResponse(order));\n                else\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"Order ID is invalid\"));\n\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize]\n        [HttpGet(\"GetOrderTypesList\")]\n        public IActionResult GetOrderTypesList()\n        {\n            try\n            {\n                var types = Mapper.Map<IList<MasterLookupViewModel>>(OrderService.GetAllOrderTypes());\n\n                if (types != null)\n                    return StatusCode(StatusCodes.Status200OK, new BaseApiResponse(types));\n                else\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(\"Error in getting order types list\"));\n\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize]\n        [HttpGet(\"GetOrderPrioritiesList\")]\n        public IActionResult GetOrderPrioritiesList()\n        {\n            try\n            {\n                var priorities = Mapper.Map<IList<MasterLookupViewModel>>(OrderService.GetAllOrderPriorities());\n\n                if (priorities != null)\n                    return StatusCode(StatusCodes.Status200OK, new BaseApiResponse(priorities));\n                else\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(\"Error in getting order priorities list\"));\n\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize]\n        [HttpGet(\"GetOrderStatusesList\")]\n        public IActionResult GetOrderStatusesList()\n        {\n            try\n            {\n                var priorities = Mapper.Map<IList<MasterLookupViewModel>>(OrderService.GetAllOrderStatuses());\n\n                if (priorities != null)\n                    return StatusCode(StatusCodes.Status200OK, new BaseApiResponse(priorities));\n                else\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(\"Error in getting order statuses list\"));\n\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize]\n        [HttpGet(\"GetRecallReasonsList\")]\n        public IActionResult GetRecallReasonsList()\n        {\n            try\n            {\n                var reasons = Mapper.Map<IList<MasterLookupViewModel>>(OrderService.GetAllRecallReasons());\n\n                if (reasons != null)\n                    return StatusCode(StatusCodes.Status200OK, new BaseApiResponse(reasons));\n                else\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(\"Error in getting recall reasons list\"));\n\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxPermissions.UnitLevelOrder.Add)]\n        [HttpPost(\"AddUnitOrder\")]\n        public IActionResult AddUnitOrder([FromBody]UnitOrderViewModel orderModel)\n        {\n            try\n            {\n                if(!orderModel.OrderedItem.Equals(Constants.ORDERERD_ITEM_DIGITAL_CODES)\n                    && !orderModel.OrderedItem.Equals(Constants.ORDERERD_ITEM_PHYSICAL_STAMPS))\n                {\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(\"Ordered Item is not valid\"));\n                }\n\n                // Validate View Model - Code Format should be available for an order\n                if(orderModel.ProductId > 0)\n                {\n                    var product = ProductService.GetProduct(orderModel.ProductId.Value);\n                    if (product == null || product.ProductId == 0) return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(\"Product is not valid\"));\n                    else\n                    {\n                        int codeFormat = product.CodeFormatLkpId;\n                        if (codeFormat == 0) return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(\"Product is not valid. No Code Format is associated with it.\"));\n                        else\n                        {\n                            orderModel.CodeFormat = codeFormat;\n                        }\n                    }\n                }\n                else\n                {\n                    orderModel.ProductId = null;\n                }    \n                             \n\n                var order = Mapper.Map<Orders>(orderModel);\n                order.TenantId = _currentTenant.Tenant_DB_Id;\n                order.OrderNumber = CreateOrderNumber(_currentTenant.Name);\n                order.CreatedBy = User.Identity.Name;\n\n                var isAdded = OrderService.AddOrder(order);\n\n                if (isAdded)\n                    return StatusCode(StatusCodes.Status200OK, \"Order has been Added successfully\");\n                else\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(\"Error in saving order details\"));\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}...Params: {JsonConvert.SerializeObject(orderModel)}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxPermissions.AggregateLevelOrder.Add)]\n        [HttpPost(\"AddAggregatedOrder\")]\n        public IActionResult AddAggregatedOrder([FromBody]AggregatedOrderViewModel orderModel)\n        {\n            try\n            {\n                var order = Mapper.Map<Orders>(orderModel);\n                order.TenantId = _currentTenant.Tenant_DB_Id;\n                order.OrderNumber = CreateOrderNumber(_currentTenant.Name);\n                order.CreatedBy = User.Identity.Name;\n\n                var isAdded = OrderService.AddOrder(order);\n\n                if (isAdded)\n                    return StatusCode(StatusCodes.Status200OK, \"Order has been Added successfully\");\n                else\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(\"Error in saving order details\"));\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}...Params: {JsonConvert.SerializeObject(orderModel)}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxPermissions.ExternalCode.Add)]\n        [HttpPost(\"UploadCodes\")]\n        [Consumes(\"multipart/form-data\")]\n        public IActionResult UploadCodes([FromForm]UploadCodesViewModel uploadCodeModel)\n        {\n            try\n            {\n                if (uploadCodeModel.UploadsCodesFile == null || uploadCodeModel.UploadsCodesFile.Length == 0)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_REQUEST_FORMAT, \"No upload code is provided\"));\n\n                var allowedSize = int.Parse(_config.GetSection(\"UploadOrderCodesSettings\").GetValue<string>(\"FileSize\"));\n                long sizeInMB = allowedSize * 1024 * 1024;\n                if (uploadCodeModel.UploadsCodesFile.Length > sizeInMB)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_REQUEST_FORMAT, $\"File size should not be greater than {allowedSize} MB\"));\n\n                (var codesCount, var errors ) = GetCodesCount(uploadCodeModel);\n                if (!string.IsNullOrEmpty(errors))\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_REQUEST_FORMAT, \"The uploaded file contains invalid codes\"));\n                if (codesCount < 1 || codesCount > 1000000)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_REQUEST_FORMAT, \"No upload code is provided\"));\n                \n                var order = Mapper.Map<Orders>(uploadCodeModel);\n                order.TenantId = _currentTenant.Tenant_DB_Id;\n                order.OrderNumber = CreateOrderNumber(_currentTenant.Name);\n                order.Quantity = codesCount;\n                order.CreatedBy = User.Identity.Name;\n                order.UploadCodesFilename = UploadCodesFile(uploadCodeModel, _currentTenant.Tenant_Id, order.OrderNumber);\n                var codeSrcLkp = LookupService.GetLookupByTypeAndValue(Constants.CODE_SOURCE, uploadCodeModel.CodeFormatType);\n                if (codeSrcLkp == null)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_REQUEST_FORMAT,\"Code Format/Source Type is invalid\"));\n                order.CodeSourceLkpId = codeSrcLkp.MasterLookupId;\n                \n                var priority = _config.GetSection(\"UploadOrderCodesSettings\").GetValue<string>(\"OrderPriority\");\n\n                var isAdded = OrderService.AddUploadCodesOrder(order, priority);\n\n                if (isAdded)\n                    return StatusCode(StatusCodes.Status200OK, \"Order Codes have been Uploaded successfully\");\n                else\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(\"Error in uploading order codes\"));\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}...Params: {JsonConvert.SerializeObject(uploadCodeModel)}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxPermissions.UnitLevelOrder.Delete + \",\" + DigitraxPermissions.AggregateLevelOrder.Delete)]\n        [HttpDelete]\n        public IActionResult RecallOrder([FromBody]RecallOrderViewModel recallModel)\n        {\n            try\n            {\n                if (recallModel.RecallReason == 0 && recallModel.IsOtherRecallReason == false)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_REQUEST_FORMAT, \"Recall Reason is required\"));\n                if (recallModel.IsOtherRecallReason == true && string.IsNullOrWhiteSpace(recallModel.AdditionalRecallReason))\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_REQUEST_FORMAT, \"Other Recall Reason is required\"));\n\n                var order = OrderService.GetOrderByCode(recallModel.OrderNumber);\n                order.RecallReasonLkpId = recallModel.RecallReason;\n                order.AdditionalRecallReason = recallModel.IsOtherRecallReason.Value ? recallModel.AdditionalRecallReason : null;\n                order.LastUpdatedDate = DateTime.Now;\n                order.LastUpdatedBy = User.Identity.Name;\n\n                var isRecalled = OrderService.RecallOrder(order);\n\n                if (isRecalled)\n                    return StatusCode(StatusCodes.Status200OK, \"Order has been Recalled successfully\");\n                else\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(\"Error in recalling order\"));\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        #endregion\n\n        #region InternalFunctions\n\n        private string CreateOrderNumber(string tenantName)\n        {\n            var initials = Regex.Replace(tenantName, @\"\\s+\", \"\").Substring(0, 3).ToUpper();\n            var dateAndTimestamp = DateTime.Now.ToString(\"ddMMyyHHmmss\");\n\n            return initials + dateAndTimestamp;\n        }\n\n        private string UploadCodesFile(UploadCodesViewModel model, string tenantGuid, string orderNumber)\n        {\n            string fileName = null;\n\n            if (model.UploadsCodesFile != null)\n            {\n                //Create folders if do not exist\n                Directory.CreateDirectory(_config.GetSection(\"Content\").GetSection(\"ProgramFolder\").Value);\n                Directory.CreateDirectory(Path.Combine(_config.GetSection(\"Content\").GetSection(\"ProgramFolder\").Value, tenantGuid));\n                Directory.CreateDirectory(Path.Combine(_config.GetSection(\"Content\").GetSection(\"ProgramFolder\").Value, tenantGuid, orderNumber));\n\n                fileName = model.UploadsCodesFile.FileName;\n                var rootFolder = _webHostEnvironment.ContentRootPath;\n                var folderName = Path.Combine(_config.GetSection(\"Content\").GetSection(\"ProgramFolder\").Value, tenantGuid, orderNumber);\n                string filePath = Path.Combine(rootFolder, folderName, fileName);\n\n                using (var fileStream = new FileStream(filePath, FileMode.Create))\n                {\n                    model.UploadsCodesFile.CopyTo(fileStream);\n                }\n            }\n            return fileName;\n        }\n\n        private (int count, string error) GetCodesCount(UploadCodesViewModel model)\n        {\n            int validationCount = 10;\n            var codeFormat = CodeFormatService.GetCodeFormat(model.CodeFormat);\n            if (codeFormat == null)\n                return (0, \"Code Fromat not found\");\n            var codeGenerator = GetCodeGeneratorObject(codeFormat);\n            if (codeGenerator == null)\n                return (0, \"Unable to find CodeGenerator\");\n            var codeModel = CreateCodeProcessModel(codeFormat, model);\n            var codesList = new List<string>();\n            using (var reader = new StreamReader(model.UploadsCodesFile.OpenReadStream()))\n            {\n                while (reader.Peek() >= 0)\n                {\n                    var line = reader.ReadLine();\n                    if (validationCount-- > 0)\n                    {\n                        var errors = ValidateUploadedCode(line, codeGenerator, codeModel);\n                        if (!string.IsNullOrEmpty(errors))\n                        {\n                            return (codesList.Count, errors);\n                        }\n                    }\n                    codesList.Add(line);\n\n                }\n            }\n            return (codesList.Count, \"\");\n        }\n\n\n        private ICodeGenerator GetCodeGeneratorObject(CodeFormats codeFormat)\n        {\n            // Generate Code Generator using Reflection\n            string codeGeneratorAssembly = codeFormat.CodeGeneratorAssembly;// \"Authentix.Digitrax.CodeGenerator\";\n            string codeGeneratorFullyQualifiedClassName = codeFormat.CodeGeneratorFullyQualifiedClassName;//  \"Authentix.Digitrax.CodeGenerator.Implementation.DefaultCodeGenerator\";\n\n            string classType = codeGeneratorFullyQualifiedClassName + \",\" + codeGeneratorAssembly;\n            var codeGeneratorObj = (ICodeGenerator)Activator.CreateInstance(Type.GetType(classType));\n            return codeGeneratorObj;\n        }\n\n        private string ValidateUploadedCode(string code, ICodeGenerator codeGenerator, CodeProcessModel codeModel) \n        {\n            string errors = string.Empty;\n            codeGenerator.ValidateCode(code, codeModel, out errors);\n            return errors;\n        }\n\n        private CodeProcessModel CreateCodeProcessModel(CodeFormats codeFormat, UploadCodesViewModel model) \n        {\n            Product product = null;\n            if(model.ProductId != null)\n                product = ProductService.GetProduct(model.ProductId.Value);\n            \n            CodeProcessModel codeModel = new CodeProcessModel\n            {\n                Product = new CodeProcessModel.ProductDetail\n                {\n                    ProductIdentifier = product?.ProductIdentifier ?? \"\",\n                    ProductGTIN = product?.GlobalTradeItemNumber ?? \"\",\n                    ProductDescription = \"\",\n                    ProductID = product?.ProductId ?? 0,\n                    TargetMarket = product?.TargetMarket?? \"\",\n                    NetContent = product?.NetContent ?? \"\",\n                    ProductClass = product?.ProductClass ?? \"\",\n                    ProductFamily = product?.ProductFamily ?? \"\",\n                    ProductName = product?.ProductName ?? \"\",\n                    ProductOrigin = product != null && product.ProductOriginLkp != null ? product.ProductOriginLkp.HiddenValue : \"\",\n                    ProductType = product?.ProductType??\"\",\n                    ProductWeight = product?.ProductWeight,\n                    UnitOfMeasure = product != null && product.UnitOfMeasureLkp != null ? product.UnitOfMeasureLkp.HiddenValue : \"\"\n\n                },\n                CodeFormat = new CodeProcessModel.CodeFormatDetail\n                {\n                    Alphabets = codeFormat.Alphabets,\n                    Numbers = codeFormat.Numbers,\n                    SpecialCharacters = codeFormat.SpecialCharacters,\n                    RandomNumberLength = codeFormat.RandomNumberLength,\n                    TypeString = codeFormat.TypeNavigation.HiddenValue,\n                    Timestamp = codeFormat.Timestamp,\n                    CodeFormatPrefix = codeFormat.CodeFormatPrefix,\n                    CodeGeneratorAssembly = codeFormat.CodeGeneratorAssembly,\n                    CodeGeneratorFullyQualifiedClassName = codeFormat.CodeGeneratorFullyQualifiedClassName,\n                    CodeFormatImplementation = codeFormat.CodeFormatImplementationLkp.HiddenValue,\n                    CodeSchemaSettings = codeFormat.CodeSchemaSettings\n                },\n                Order = new CodeProcessModel.OrderDetail \n                { \n                    OrderType = LookupService.GetLookupById(model.OrderType).VisibleValue\n                },\n                UI_Type_Id = 0,\n                UI_Status_Generated_Id = 0\n            };\n            return codeModel;\n        }\n\n        private void ModifyRequest(DataSourceRequest request)\n        {\n            ModifyFilters(request.Filters);\n            ModifySorts(request.Sorts);\n        }\n\n        private void ModifyFilters(IEnumerable<IFilterDescriptor> filters)\n        {\n            if (filters != null && filters.Any())\n                foreach (var filter in filters)\n                {\n                    var descriptor = filter as FilterDescriptor;\n                    if (descriptor != null && descriptor.Member.Equals(\"Status\"))\n                    {\n                        descriptor.Member = \"ActiveFlag\";\n                    }\n                    if (descriptor != null && descriptor.Member.Equals(\"OrderStatus\"))\n                    {\n                        descriptor.Member = \"OrderStatusLkp.VisibleValue\";\n                    }\n                    if (descriptor != null && descriptor.Member.Equals(\"RequestedOn\"))\n                    {\n                        descriptor.Member = \"OrderRequestTimestamp\";\n                    }\n                    if (descriptor != null && descriptor.Member.Equals(\"ProductData.ProductName\"))\n                    {\n                        descriptor.Member = \"Product.ProductName\";\n                    }\n                    else if (filter is CompositeFilterDescriptor)\n                    {\n                        ModifyFilters(((CompositeFilterDescriptor)filter).FilterDescriptors);\n                    }\n                }\n        }\n\n        private void ModifySorts(IList<SortDescriptor> sorts)\n        {\n            if (sorts != null && sorts.Any())\n                foreach (var sort in sorts)\n                {\n                    if (sort != null && sort.Member != null && sort.Member.Equals(\"Status\"))\n                    {\n                        sort.Member = \"ActiveFlag\";\n                    }\n                    if (sort != null && sort.Member != null && sort.Member.Equals(\"OrderStatus\"))\n                    {\n                        sort.Member = \"OrderStatusLkp.VisibleValue\";\n                    }\n                    if (sort != null && sort.Member != null && sort.Member.Equals(\"RequestedOn\"))\n                    {\n                        sort.Member = \"OrderRequestTimestamp\";\n                    }\n                    if (sort != null && sort.Member != null && sort.Member.Equals(\"ProductData.ProductName\"))\n                    {\n                        sort.Member = \"Product.ProductName\";\n                    }\n                }\n        }\n\n        #endregion\n    }\n}"}
{"feature_name": "UID Management", "file_type": "Controller", "file_name": "UniqueIdentifiableMarkerController.cs", "file_content": "using Authentix.Digitrax.Authorization.Services;\nusing Authentix.Digitrax.Common;\nusing Authentix.Digitrax.Common.Utilities;\nusing Authentix.Digitrax.DataAccess.UnitOfWork;\nusing Authentix.Digitrax.Model.Data;\nusing Authentix.Digitrax.Model.Extensions;\nusing Authentix.Digitrax.Model.Models;\nusing Authentix.Digitrax.Services.ServiceModels;\nusing Authentix.Digitrax.Services.Services;\nusing Authentix.Digitrax.Services.ServicesImplementation;\nusing AuthentixDigitraxPlatform.ActionFilters;\nusing AuthentixDigitraxPlatform.Models;\nusing AuthentixDigitraxPlatform.Models.UIEvents.ResponseModels;\nusing AuthentixDigitraxPlatform.Utilities;\nusing AutoMapper;\nusing Azure.Storage.Blobs;\nusing Kendo.Mvc;\nusing Kendo.Mvc.UI;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Caching.Memory;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\nnamespace AuthentixDigitraxPlatform.Controllers\n{\n\n    [Produces(\"application/json\")]\n    [Consumes(\"application/json\")]\n    [ApiVersion(\"1.0\")]\n    [Route(\"{tenant_Id_guid}/api/v{v:apiVersion}/[controller]\")]\n    //[Authorize]\n    [ApiController]\n    [ServiceFilter(typeof(LoggerAttribute))]\n    public class UniqueIdentifiableMarkerController : ControllerBase\n    {\n        private readonly IUniqueIdentifiableMarkerService _uniqueIdentifiableMarkerService;\n        private readonly IUimAggregationService _uimAggregationService;\n        private readonly ILookupService _lookupService;\n        private readonly ILogger<UniqueIdentifiableMarkerController> _logger;\n        private readonly IMapper _mapper;\n        private readonly Authentix.Digitrax.Common.Models.Tenant _currentTenant;\n        private readonly IConfiguration _config;\n        private readonly IWebHostEnvironment _webHostEnvironment;\n        //private readonly IDataExchangeConfigurationService DataExchangeConfigurationService;\n        //private readonly IEventService _eventService;\n        //private readonly ILocationService _locationService;\n        private readonly IProgramService _programService;\n        private readonly IMemoryCache _cache;\n        private readonly ScanPortalSettings _scanPortalSettings = new ScanPortalSettings();\n        private readonly IUniqueIdentifierService _uniqueIdentifierService;\n        //private readonly IUIDDocumentService _UIDDocumentService;\n        private readonly IncidentsUtility _incidentsUtility;\n        private readonly IItemService _itemService;\n        private readonly IUserService _userService;\n        public UniqueIdentifiableMarkerController(IUniqueIdentifiableMarkerService uniqueIdentifiableMarkerService,\n            IUniqueIdentifierService uiService,\n            IUimAggregationService uimAggregationService,\n            ILogger<UniqueIdentifiableMarkerController> logger,\n            IMapper mapper,\n            ILookupService lookupService,\n            ITenantProvider tenantProvider,\n            IConfiguration config,\n            IWebHostEnvironment hostEnvironment,\n            //IEventService eventService, \n            //ILocationService locationService,\n            IProgramService programService,\n            IMemoryCache cache,\n            //IUIDDocumentService uIDDocumentService,\n            IncidentsUtility incidentsUtility,\n            IItemService itemService,\n            IUserService userService)\n        {\n            _uniqueIdentifiableMarkerService = uniqueIdentifiableMarkerService;\n            _uimAggregationService = uimAggregationService;\n            _logger = logger;\n            _mapper = mapper;\n            _lookupService = lookupService;\n            _currentTenant = tenantProvider.GetCurrentTenant();\n            _config = config;\n            _webHostEnvironment = hostEnvironment;\n            //_eventService = eventService;\n            //_locationService = locationService;\n            _programService = programService;\n            _uniqueIdentifierService = uiService;\n            _cache = cache;\n            _config.GetSection(\"ScanPortalSettings\").Bind(_scanPortalSettings);\n            string defaultDB = config.GetSection(\"Defaults\").GetSection(\"ProgramDBConnectionString\").Value;\n            DigitraxDbContext db_context = new DigitraxDbContext(defaultDB);\n            UnitOfWork _uow = new UnitOfWork(db_context, config);\n            //DataExchangeConfigurationService = new DataExchangeConfigurationService(_uow, lookupService);\n            //_UIDDocumentService = uIDDocumentService;\n            _incidentsUtility = incidentsUtility;\n            _itemService = itemService;\n            _userService = userService;\n        }\n\n        [Authorize(DigitraxV2Permissions.UIM_Orders.Get + \",\" + DigitraxV2Permissions.ProgramManagement.Edit)]\n        [HttpPost(\"Format\")]\n        public IActionResult AddUimFormat([FromBody] UimFormatsViewModel uimFormatModel)\n        {\n            try\n            {\n                var validityResult = ValidateUIMFormatViewModel(uimFormatModel);\n                if (validityResult.Item1 == false)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, validityResult.Item2));\n\n                if (uimFormatModel.PinSegment !=null && uimFormatModel.PinSegment.Pin.HasValue && uimFormatModel.PinSegment.Pin.Value == true) {\n                    var codeSchema = new CodeSchemas();\n                    codeSchema.CreatedBy = HttpContext.User.Identity.Name;\n                    codeSchema.CreatedDate = DateTime.Now;\n                    codeSchema.EffectiveStartDate = DateTime.Now;\n                    codeSchema.EffectiveEndDate = null;\n                    codeSchema.TenantId = _currentTenant.Tenant_DB_Id;\n                    codeSchema.CodeSchemaName = \"CodeSchema\" + _currentTenant.Name;\n                    codeSchema.CodeSchemasFields = new List<CodeSchemasFields>();\n\n                    if (uimFormatModel.PinSegment.CharacterSets != null)\n                    {\n                        foreach (var cs in uimFormatModel.PinSegment.CharacterSets)\n                        {\n                            if (cs.Equals(Constants.Code_Format_Value_Alphabets))\n                                uimFormatModel.PinSegment.Alphabets = true;\n                            if (cs.Equals(Constants.Code_Format_Value_Alphabets_Small))\n                                uimFormatModel.PinSegment.AlphabetsSmall = true;\n                            if (cs.Equals(Constants.Code_Format_Value_Alphabets_Capital))\n                                uimFormatModel.PinSegment.AlphabetsCapital = true;\n                            if (cs.Equals(Constants.Code_Format_Value_Numbers))\n                                uimFormatModel.PinSegment.Numbers = true;\n                            if (cs.Equals(Constants.Code_Format_Value_SpecialChars))\n                                uimFormatModel.PinSegment.SpecialCharacters = true;\n                        }\n                    }\n\n                    var codeSchemasFields = _mapper.Map<UimFormatsViewModel, CodeSchemasFields>(uimFormatModel);\n                    codeSchemasFields.CreatedBy = HttpContext.User.Identity.Name;\n                    codeSchemasFields.CreatedDate = DateTime.Now;\n                    codeSchemasFields.EffectiveStartDate = DateTime.Now;\n                    codeSchemasFields.EffectiveEndDate = null;\n                    codeSchemasFields.ActiveFlag = true;\n                    codeSchemasFields.TenantId = _currentTenant.Tenant_DB_Id;\n                    codeSchemasFields.CodeSchemaFieldName = \"Pin\";\n\n                  \n                    codeSchema.CodeSchemasFields.Add(codeSchemasFields);\n\n                    _uniqueIdentifiableMarkerService.CreateCodeSchema(codeSchema);\n                    uimFormatModel.CodeSchemaId = codeSchema.CodeSchemaId;\n                }\n\n                var userName = User.Identity.Name;\n                foreach (var segment in uimFormatModel.UimFormatSegments)\n                {\n                    if (segment.CharacterSets != null)\n                    {\n                        foreach (var cs in segment.CharacterSets)\n                        {\n                            if (cs.Equals(Constants.Code_Format_Value_Alphabets))\n                                segment.Alphabets = true;\n                            if (cs.Equals(Constants.Code_Format_Value_Alphabets_Small))\n                                segment.AlphabetsSmall = true;\n                            if (cs.Equals(Constants.Code_Format_Value_Alphabets_Capital))\n                                segment.AlphabetsCapital = true;\n                            if (cs.Equals(Constants.Code_Format_Value_Numbers))\n                                segment.Numbers = true;\n                            if (cs.Equals(Constants.Code_Format_Value_SpecialChars))\n                                segment.SpecialCharacters = true;\n                        }\n                    }\n                }\n\n                var uimFormats = _mapper.Map<UimFormatsViewModel, UimFormats>(uimFormatModel);\n\n                //Check If Uim Format already Exists\n                var existing = _uniqueIdentifiableMarkerService.GetUimFormatByName(_currentTenant.Tenant_DB_Id, uimFormats.FormatName);\n                if (existing != null)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"UID Format already exists, please choose a Unique UID Format Name\"));\n\n                uimFormats.CreatedBy = userName;\n                \n                uimFormats.TenantId = _currentTenant.Tenant_DB_Id;\n\n                    uimFormats.UimFormatSegments.ToList().ForEach(x =>\n                    {\n                        x.TenantId = uimFormats.TenantId;\n                    });\n                    uimFormats.UimFormatItems.ToList().ForEach(x =>\n                    {\n                        x.TenantId = uimFormats.TenantId;\n                    });\n\n                //List<int> exists = new List<int>();\n                //foreach (var item in uimFormatModel.AssociatedItems)\n                //{\n\n                //    if (exists.Contains(item.ItemId))\n                //    {\n                //        return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"An item cannot be associated with UIM Format more than once\"));\n                //    }\n                //    exists.Add(item.ItemId);\n                //    //var itemExists = _uniqueIdentifiableMarkerService.GetExistingItem(item.ItemId);\n                //    //if (itemExists != null)\n                //    //{\n                //    //    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"This Item is already used by another UIM Format. Please choose a unique item\"));\n                //    //}\n                //    //var uimItem = new UimFormatItems();\n                //    //uimItem.ItemId = item.ItemId;\n                //    //uimItem.TenantId = _currentTenant.Tenant_DB_Id;\n                //    //uimItem.HasEncodingSchema = item.HasEncodingScheme;\n                //    //uimItem.EncodingSchema = item.EncodingScheme;\n\n                //}\n\n                var result = _uniqueIdentifiableMarkerService.AddUimFormat(uimFormats);\n\n\n                return StatusCode(StatusCodes.Status200OK, \"UID Format has been Added successfully\");\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}...Params: {JsonConvert.SerializeObject(uimFormatModel)}\", ex.ToString(), true);\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n\n\n            }\n        }\n\n        [Authorize(DigitraxV2Permissions.UIM_Orders.Edit + \",\" + DigitraxV2Permissions.ProgramManagement.Edit)]\n        [HttpPut(\"Format/Old/{Id}\")]\n        public IActionResult UpdateUimFormat([FromBody] UimFormatsViewModel uimFormatModel,[FromRoute] int Id)\n        {\n            try\n            {\n                var existingUimFormat = _uniqueIdentifiableMarkerService.GetUimFormatById(Id);\n                if (existingUimFormat == null)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Unable to find Item\"));\n\n                if (uimFormatModel.PinSegment != null && uimFormatModel.PinSegment.Pin.HasValue && uimFormatModel.PinSegment.Pin.Value == true)\n                {\n                    var codeSchema = _uniqueIdentifiableMarkerService.GetCodeSchema(existingUimFormat.CodeSchemaId);\n\n                    if (uimFormatModel.PinSegment.CharacterSets != null)\n                    {\n                        foreach (var cs in uimFormatModel.PinSegment.CharacterSets)\n                        {\n                            if (cs.Equals(Constants.Code_Format_Value_Alphabets))\n                                uimFormatModel.PinSegment.Alphabets = true;\n                            if (cs.Equals(Constants.Code_Format_Value_Alphabets_Small))\n                                uimFormatModel.PinSegment.AlphabetsSmall = true;\n                            if (cs.Equals(Constants.Code_Format_Value_Alphabets_Capital))\n                                uimFormatModel.PinSegment.AlphabetsCapital = true;\n                            if (cs.Equals(Constants.Code_Format_Value_Numbers))\n                                uimFormatModel.PinSegment.Numbers = true;\n                            if (cs.Equals(Constants.Code_Format_Value_SpecialChars))\n                                uimFormatModel.PinSegment.SpecialCharacters = true;\n                        }\n                    }\n\n\n                   var updatedSchemasFields = _mapper.Map<UimFormatsViewModel, CodeSchemasFields>(uimFormatModel);\n\n                    if (codeSchema != null)\n                    {\n                        foreach (var schemaFields in codeSchema.CodeSchemasFields)\n                        {\n                            schemaFields.Length = updatedSchemasFields.Length;\n                            schemaFields.OrderingTypeLkpId = updatedSchemasFields.OrderingTypeLkpId;\n                            schemaFields.Numbers = updatedSchemasFields.Numbers;\n                            schemaFields.Alphabets = updatedSchemasFields.Alphabets;\n                            schemaFields.AlphabetsSmall = updatedSchemasFields.AlphabetsSmall;\n                            schemaFields.AlphabetsCapital = updatedSchemasFields.AlphabetsCapital;\n                            schemaFields.SpecialCharacters = updatedSchemasFields.SpecialCharacters;\n                            schemaFields.LastUpdatedDate = DateTime.Now;\n                        }\n\n\n                        //update Code Schema\n                        _uniqueIdentifiableMarkerService.UpdateCodeSchema(codeSchema);\n                    }\n\n                }\n                foreach (var segment in uimFormatModel.UimFormatSegments)\n                {\n                    if (segment.CharacterSets != null)\n                    {\n                        foreach (var cs in segment.CharacterSets)\n                        {\n                            if (cs.Equals(Constants.Code_Format_Value_Alphabets))\n                                segment.Alphabets = true;\n                            if (cs.Equals(Constants.Code_Format_Value_Alphabets_Small))\n                                segment.AlphabetsSmall = true;\n                            if (cs.Equals(Constants.Code_Format_Value_Alphabets_Capital))\n                                segment.AlphabetsCapital = true;\n                            if (cs.Equals(Constants.Code_Format_Value_Numbers))\n                                segment.Numbers = true;\n                            if (cs.Equals(Constants.Code_Format_Value_SpecialChars))\n                                segment.SpecialCharacters = true;\n                        }\n                    }\n                }\n\n                var uimFormats = _mapper.Map<UimFormatsViewModel, UimFormats>(uimFormatModel);\n\n                existingUimFormat.FormatName = uimFormats.FormatName;\n                existingUimFormat.Description = uimFormats.Description;\n                existingUimFormat.Type = uimFormats.Type;\n                existingUimFormat.ExcludedCharacters = uimFormats.ExcludedCharacters;\n                existingUimFormat.ActiveFlag = uimFormats.ActiveFlag;\n                existingUimFormat.LastUpdatedBy = HttpContext.User.Identity.Name;\n                existingUimFormat.LastUpdatedDate = DateTime.Now;\n\n                // _uniqueIdentifiableMarkerService.DeleteSegments(Id);\n\n                //Gets Existing Segments\n                var existing = existingUimFormat.UimFormatSegments\n                              .Where(ex => uimFormatModel.UimFormatSegments.Any(x => x.UimFormatId.Equals(ex.UimFormatId)));\n\n                foreach (var segment in uimFormats.UimFormatSegments)\n                {\n                    segment.TenantId = existingUimFormat.TenantId;\n                 //   existingUimFormat.UimFormatSegments.Add(segment);\n                }\n\n                List<UimFormatItems> addMappings = new List<UimFormatItems>();\n                List<UimFormatItems> deleteMappings = new List<UimFormatItems>();\n\n                var updatedItems = new List<Authentix.Digitrax.Model.Models.Items>();\n                foreach (var item in uimFormatModel.AssociatedItems)\n                {\n                    var uimItems = new UimFormatItems();\n                    uimItems.ItemId= item.ItemId;\n                    uimItems.TenantId = _currentTenant.Tenant_DB_Id;\n                    uimItems.HasEncodingSchema = item.HasEncodingScheme;\n                    uimItems.EncodingSchema = item.EncodingScheme;\n                    existingUimFormat.UimFormatItems.Add(uimItems);\n                }\n                var existingg=existingUimFormat.UimFormatItems.Where(ex => uimFormatModel.AssociatedItems.Any(x => x.ItemId.Equals(ex.ItemId))).ToList();\n\n                var existingMappings = _uniqueIdentifiableMarkerService.GetItemstoUIMMappings(Id);\n\n                var toDelete = existingMappings.Where(ex => !updatedItems.Any(up => up.Id.Equals(ex.Id)));\n                var toAdd = updatedItems.Where(up => !existingMappings.Any(ex => ex.Id.Equals(up.Id)));\n\n                addMappings = toAdd.Select(perm => new UimFormatItems { \n                    ItemId = perm.Id, \n                    UimFormatId = uimFormats.UimFormatId\n                }).ToList();\n\n                foreach (var itm in deleteMappings)\n                {\n                    itm.Item = null;\n                    itm.UimFormat = null;\n                }\n\n                //update UIM Format\n                _uniqueIdentifiableMarkerService.UpdateUimFormat(existingUimFormat);\n\n                //update Items\n                _uniqueIdentifiableMarkerService.MapItemstoUimFormat(addMappings);\n                _uniqueIdentifiableMarkerService.DeleteItemstoUimFormatMappings(toDelete.ToList());\n\n\n                return Ok(new BaseApiResponse { Data = \"UID Format updated Successfully\" });\n            }\n            catch(Exception ex)\n            {\n                _logger.LogError(ex.Message);\n\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}...Params: {JsonConvert.SerializeObject(uimFormatModel)}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n             }\n\n\n        }\n\n        [Authorize(DigitraxV2Permissions.UIM_Orders.Edit + \",\" + DigitraxV2Permissions.ProgramManagement.Edit)]\n        [HttpPut(\"Format/{Id}\")]\n        public IActionResult UpdateUimFormat2([FromBody] UimFormatsViewModel uimFormatModel, [FromRoute] int Id)\n        {\n            try\n            {\n                var existingUimFormat = _uniqueIdentifiableMarkerService.GetUimFormatById(Id);\n                if (existingUimFormat == null)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"Unable to find UID Format\"));\n\n                uimFormatModel.UimFormatId = Id;\n                var validityResult = ValidateUIMFormatViewModel(uimFormatModel,true);\n                if (validityResult.Item1 == false)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, validityResult.Item2));\n\n                if (uimFormatModel.PinSegment != null && uimFormatModel.PinSegment.Pin.HasValue)\n                {\n                    var codeSchema = existingUimFormat.CodeSchema;\n                    if (uimFormatModel.PinSegment.CharacterSets != null)\n                    {\n                        foreach (var cs in uimFormatModel.PinSegment.CharacterSets)\n                        {\n                            if (cs.Equals(Constants.Code_Format_Value_Alphabets))\n                                uimFormatModel.PinSegment.Alphabets = true;\n                            if (cs.Equals(Constants.Code_Format_Value_Alphabets_Small))\n                                uimFormatModel.PinSegment.AlphabetsSmall = true;\n                            if (cs.Equals(Constants.Code_Format_Value_Alphabets_Capital))\n                                uimFormatModel.PinSegment.AlphabetsCapital = true;\n                            if (cs.Equals(Constants.Code_Format_Value_Numbers))\n                                uimFormatModel.PinSegment.Numbers = true;\n                            if (cs.Equals(Constants.Code_Format_Value_SpecialChars))\n                                uimFormatModel.PinSegment.SpecialCharacters = true;\n                        }\n                    }\n  \n                    if (codeSchema != null)\n                    {\n                        var updatedSchemasFields = _mapper.Map<UimFormatsViewModel, CodeSchemasFields>(uimFormatModel);\n\n                        updatedSchemasFields.CreatedBy = HttpContext.User.Identity.Name;\n                        updatedSchemasFields.CreatedDate = DateTime.Now;\n                        updatedSchemasFields.EffectiveStartDate = DateTime.Now;\n                        updatedSchemasFields.EffectiveEndDate = null;\n                        updatedSchemasFields.ActiveFlag = true;\n                        updatedSchemasFields.TenantId = _currentTenant.Tenant_DB_Id;\n                        updatedSchemasFields.CodeSchemaFieldName = \"Pin\";\n                        updatedSchemasFields.Length = uimFormatModel.PinSegment.Length;\n                        updatedSchemasFields.OrderingTypeLkpId = uimFormatModel.PinSegment.OrderingTypeLkpId;\n                        updatedSchemasFields.Numbers = uimFormatModel.PinSegment.Numbers;\n                        updatedSchemasFields.Alphabets = uimFormatModel.PinSegment.Alphabets;\n                        updatedSchemasFields.AlphabetsSmall = uimFormatModel.PinSegment.AlphabetsSmall;\n                        updatedSchemasFields.AlphabetsCapital = uimFormatModel.PinSegment.AlphabetsCapital;\n                        updatedSchemasFields.SpecialCharacters = uimFormatModel.PinSegment.SpecialCharacters;\n\n                        codeSchema.CodeSchemasFields.Add(updatedSchemasFields);\n\n                        //foreach (var schemaFields in codeSchema.CodeSchemasFields)\n                        //{\n                        //    schemaFields.Length = updatedSchemasFields.Length;\n                        //    schemaFields.OrderingTypeLkpId = updatedSchemasFields.OrderingTypeLkpId;\n                        //    schemaFields.Numbers = updatedSchemasFields.Numbers;\n                        //    schemaFields.Alphabets = updatedSchemasFields.Alphabets;\n                        //    schemaFields.AlphabetsSmall = updatedSchemasFields.AlphabetsSmall;\n                        //    schemaFields.AlphabetsCapital = updatedSchemasFields.AlphabetsCapital;\n                        //    schemaFields.SpecialCharacters = updatedSchemasFields.SpecialCharacters;\n                        //    schemaFields.LastUpdatedDate = DateTime.Now;\n                        //}\n\n                        if (uimFormatModel.PinSegment.Pin.Value == false)\n                            codeSchema.CodeSchemasFields = null;                   \n                        \n                        //update Code Schema\n                        _uniqueIdentifiableMarkerService.UpdateCodeSchema(codeSchema);\n\n                    }\n                    else\n                    {\n                        if (uimFormatModel.PinSegment.Pin.Value == true)\n                        {\n\n                            var codeSchemaNew = new CodeSchemas();\n                            codeSchemaNew.CreatedBy = HttpContext.User.Identity.Name;\n                            codeSchemaNew.CreatedDate = DateTime.Now;\n                            codeSchemaNew.EffectiveStartDate = DateTime.Now;\n                            codeSchemaNew.EffectiveEndDate = null;\n                            codeSchemaNew.TenantId = _currentTenant.Tenant_DB_Id;\n                            codeSchemaNew.CodeSchemaName = \"CodeSchema\" + _currentTenant.Name;\n                            codeSchemaNew.CodeSchemasFields = new List<CodeSchemasFields>();\n\n                            var codeSchemasField = _mapper.Map<UimFormatsViewModel, CodeSchemasFields>(uimFormatModel);\n                            codeSchemasField.CreatedBy = HttpContext.User.Identity.Name;\n                            codeSchemasField.CreatedDate = DateTime.Now;\n                            codeSchemasField.EffectiveStartDate = DateTime.Now;\n                            codeSchemasField.EffectiveEndDate = null;\n                            codeSchemasField.ActiveFlag = true;\n                            codeSchemasField.TenantId = _currentTenant.Tenant_DB_Id;\n                            codeSchemasField.CodeSchemaFieldName = \"Pin\";\n                            codeSchemasField.Length = uimFormatModel.PinSegment.Length;\n                            codeSchemasField.OrderingTypeLkpId = uimFormatModel.PinSegment.OrderingTypeLkpId;\n                            codeSchemasField.Numbers = uimFormatModel.PinSegment.Numbers;\n                            codeSchemasField.Alphabets = uimFormatModel.PinSegment.Alphabets;\n                            codeSchemasField.AlphabetsSmall = uimFormatModel.PinSegment.AlphabetsSmall;\n                            codeSchemasField.AlphabetsCapital = uimFormatModel.PinSegment.AlphabetsCapital;\n                            codeSchemasField.SpecialCharacters = uimFormatModel.PinSegment.SpecialCharacters;\n\n                            codeSchemaNew.CodeSchemasFields.Add(codeSchemasField);\n\n                            _uniqueIdentifiableMarkerService.CreateCodeSchema(codeSchemaNew);\n                            uimFormatModel.CodeSchemaId = codeSchemaNew.CodeSchemaId;\n                        }\n                    }\n                }\n                \n                foreach (var segment in uimFormatModel.UimFormatSegments)\n                {\n                    if (segment.CharacterSets != null)\n                    {\n                        foreach (var cs in segment.CharacterSets)\n                        {\n                            if (cs.Equals(Constants.Code_Format_Value_Alphabets))\n                                segment.Alphabets = true;\n                            if (cs.Equals(Constants.Code_Format_Value_Alphabets_Small))\n                                segment.AlphabetsSmall = true;\n                            if (cs.Equals(Constants.Code_Format_Value_Alphabets_Capital))\n                                segment.AlphabetsCapital = true;\n                            if (cs.Equals(Constants.Code_Format_Value_Numbers))\n                                segment.Numbers = true;\n                            if (cs.Equals(Constants.Code_Format_Value_SpecialChars))\n                                segment.SpecialCharacters = true;\n                        }\n                    }\n                }\n\n                var uimFormats = _mapper.Map<UimFormatsViewModel, UimFormats>(uimFormatModel);\n\n                existingUimFormat.FormatName = uimFormats.FormatName;\n                existingUimFormat.Description = uimFormats.Description;\n                existingUimFormat.Type = uimFormats.Type;\n                existingUimFormat.ExcludedCharacters = uimFormats.ExcludedCharacters;\n                existingUimFormat.ActiveFlag = uimFormats.ActiveFlag;\n\n                if (uimFormats.CodeSchemaId.HasValue)\n                    existingUimFormat.CodeSchemaId = uimFormats.CodeSchemaId;\n                \n                existingUimFormat.LastUpdatedBy = HttpContext.User.Identity.Name;\n                existingUimFormat.LastUpdatedDate = DateTime.Now;\n\n               \n                //Gets Existing Segments\n                var existingSegments = uimFormats.UimFormatSegments\n                              .Where(ex => existingUimFormat.UimFormatSegments.Any(x => x.UimFormatSegmentId.Equals(ex.UimFormatSegmentId))).ToList();\n\n                var segmentsToInsert = uimFormats.UimFormatSegments\n                              .Where(ex => !existingUimFormat.UimFormatSegments.Any(x => x.UimFormatSegmentId.Equals(ex.UimFormatSegmentId))).ToList();\n\n                var segmentsToDelete = existingUimFormat.UimFormatSegments\n                              .Where(ex => !uimFormats.UimFormatSegments.Any(x => x.UimFormatSegmentId.Equals(ex.UimFormatSegmentId))).ToList();\n\n                foreach (var segment in existingSegments)\n                {\n                    var existingSegment = existingUimFormat.UimFormatSegments.FirstOrDefault(x => x.UimFormatSegmentId == segment.UimFormatSegmentId);\n                    if (existingSegment == null)\n                        continue;\n                    existingSegment.OrderingTypeLkpId = segment.OrderingTypeLkpId;\n                    existingSegment.SegmentName = segment.SegmentName;\n                    existingSegment.Length = segment.Length;\n                    existingSegment.Alphabets = segment.Alphabets;\n                    existingSegment.AlphabetsCapital = segment.AlphabetsCapital;\n                    existingSegment.AlphabetsSmall = segment.AlphabetsSmall;\n                    existingSegment.Numbers = segment.Numbers;\n                    existingSegment.SpecialCharacters = segment.SpecialCharacters;\n                    existingSegment.SegmentValue = segment.SegmentValue;\n                }\n\n\n                existingUimFormat.UimFormatSegments = existingUimFormat.UimFormatSegments.Where(r => !segmentsToDelete.Any(del => del.UimFormatSegmentId == r.UimFormatSegmentId)).ToList();\n\n                if (segmentsToInsert != null && segmentsToInsert.Count() > 0)\n                {\n                    foreach (var segment in segmentsToInsert)\n                    {\n                        segment.TenantId = _currentTenant.Tenant_DB_Id;\n                    }\n                }\n\n                var list = existingUimFormat.UimFormatSegments.ToList();\n                list.AddRange(segmentsToInsert);\n                existingUimFormat.UimFormatSegments = list;\n\n\n                var existingItems = uimFormatModel.AssociatedItems.Where(ex => existingUimFormat.UimFormatItems.Any(x => x.ItemId == ex.ItemId)).ToList();\n\n                var itemsToInsert = uimFormats.UimFormatItems\n                             .Where(ex => !existingUimFormat.UimFormatItems.Any(x => x.ItemId.Equals(ex.ItemId))).ToList();\n\n\n                List<long> exists = new List<long>();\n                foreach (var item in itemsToInsert)\n                {\n                    item.TenantId = _currentTenant.Tenant_DB_Id;\n                    if (exists.Contains(item.ItemId))\n                    {\n                        return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, $\"An item cannot be associated with UID Format more than once\"));\n                    }\n                    exists.Add(item.ItemId);\n                }\n\n                var itemsToDelete = existingUimFormat.UimFormatItems\n                              .Where(ex => !uimFormats.UimFormatItems.Any(x => x.ItemId.Equals(ex.ItemId))).ToList();\n\n\n                foreach (var item in existingItems)\n                {\n                    var existingItem = existingUimFormat.UimFormatItems.FirstOrDefault(x => x.Id == item.Id && x.ItemId == item.ItemId);\n                    if (existingItem == null)\n                        continue;\n                    existingItem.EncodingSchema = item.EncodingScheme;\n                    existingItem.HasEncodingSchema = item.HasEncodingScheme;\n                    existingItem.UrlType = item.UrlType;\n                }\n\n                existingUimFormat.UimFormatItems = existingUimFormat.UimFormatItems.Where(r => !itemsToDelete.Any(del => del.ItemId == r.ItemId)).ToList();\n\n                var list_items = existingUimFormat.UimFormatItems.ToList();\n                list_items.AddRange(itemsToInsert);\n                existingUimFormat.UimFormatItems = list_items;\n\n                _uniqueIdentifiableMarkerService.UpdateUimFormat(existingUimFormat);\n                return StatusCode(StatusCodes.Status200OK, \"UID Format has been Updated successfully\");\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex.Message);\n\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}...Params: {JsonConvert.SerializeObject(uimFormatModel)}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n\n\n        }\n\n        [Authorize(DigitraxV2Permissions.UIM_Orders.Get + \",\" + DigitraxV2Permissions.ProgramManagement.Edit)]\n        [HttpGet(\"Format\")]\n        [ApiVersion(\"2.0\")]\n        public IActionResult GetAllUIMFormats([DataSourceRequest] DataSourceRequest request, [FromQuery] bool ActiveOnly = false)\n        {\n            try\n            {\n                var formats = _uniqueIdentifiableMarkerService.GetUIMFormats(_currentTenant.Tenant_DB_Id, request, ActiveOnly);\n                var viewModels = new List<UimFormatsViewModel>();\n\n                foreach (var format in formats.Data)\n                {\n                    var vm = _mapper.Map<UimFormatsViewModel>(format);\n                    var code = _uniqueIdentifiableMarkerService.GetLookupById(vm.Type);\n                    vm.CodeType = code.VisibleValue;\n\n                    if (vm.AssociatedItems != null)\n                        vm.Items = vm.AssociatedItems.Select(x => x.ItemNumber).Distinct().ToList();\n\n                    viewModels.Add(vm);\n                }\n\n                //var result = _mapper.Map<List<UimFormatsViewModel>>(formats.Data);\n\n                //foreach (var format in result)\n                //{\n                //    var code = _uniqueIdentifiableMarkerService.GetLookupById(format.Type);\n                //    format.CodeType = code.VisibleValue;\n\n                //    if (format.AssociatedItems != null)\n                //        format.Items = format.AssociatedItems.Select(x => x.ItemNumber).Distinct().ToList();\n\n                //    //foreach (var item in format.AssociatedItems) {\n                //    //    format.Items.Add(item.ItemNumber);   \n                //    //}\n                //    //format.AssociatedItems = null;\n                //}\n\n                var responseModel = new\n                {\n                    data = viewModels,\n                    total = formats.Total\n                };\n                return Ok(responseModel);\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxV2Permissions.UIM_Orders.Get + \",\" + DigitraxV2Permissions.ProgramManagement.Edit)]\n        [HttpGet(\"Format/{Id}\")]\n        public IActionResult GetUIMFormat([FromRoute] int Id)\n        {\n            try\n            {\n\n                var format = _uniqueIdentifiableMarkerService.GetUimFormatById(Id);\n\n\n                var codeSchema = _uniqueIdentifiableMarkerService.GetCodeSchema(format.CodeSchemaId);\n                \n\n                Dictionary<int, List<string>> UimSegmentCharacterSets = new Dictionary<int, List<string>>();\n                Dictionary<int, List<string>> PinSegmentCharacterSets = new Dictionary<int, List<string>>();\n                foreach (var segment in format.UimFormatSegments)\n                {\n                    var values = new List<string>();\n                    if (segment != null)\n                    {\n                        if (segment.Alphabets.HasValue && segment.Alphabets.Value)\n                            values.Add(Constants.Code_Format_Value_Alphabets);\n                        if (segment.AlphabetsCapital.HasValue && segment.AlphabetsCapital.Value)\n                            values.Add(Constants.Code_Format_Value_Alphabets_Capital);\n                        if (segment.AlphabetsSmall.HasValue && segment.AlphabetsSmall.Value)\n                            values.Add(Constants.Code_Format_Value_Alphabets_Small);\n                        if (segment.Numbers.HasValue && segment.Numbers.Value)\n                            values.Add(Constants.Code_Format_Value_Numbers);\n                        if (segment.SpecialCharacters.HasValue && segment.SpecialCharacters.Value)\n                            values.Add(Constants.Code_Format_Value_SpecialChars);\n                        UimSegmentCharacterSets.Add(segment.UimFormatSegmentId, values);\n                    }\n                }\n\n                var uimFormat = _mapper.Map<UimFormatsViewModel>(format);\n                uimFormat.Items = uimFormat.AssociatedItems.Select(x => x.ItemNumber).ToList();\n                uimFormat.PinSegment = new PinSegmentViewModel();\n\n                if (codeSchema != null)\n                {\n                    foreach (var segment in codeSchema.CodeSchemasFields)\n                    {\n                        uimFormat.PinSegment.Pin = true;\n                        uimFormat.PinSegment.Length = segment.Length;\n                        uimFormat.PinSegment.OrderingTypeLkpId = segment.OrderingTypeLkpId;\n                        uimFormat.PinSegment.Numbers = segment.Numbers;\n                        uimFormat.PinSegment.Alphabets = segment.Alphabets;\n                        uimFormat.PinSegment.AlphabetsSmall = segment.AlphabetsSmall;\n                        uimFormat.PinSegment.AlphabetsCapital = segment.AlphabetsCapital;\n                        uimFormat.PinSegment.SpecialCharacters = segment.SpecialCharacters;\n\n                        var values = new List<string>();\n                        if (segment != null)\n                        {\n                            if (segment.Alphabets.HasValue && segment.Alphabets.Value)\n                                values.Add(Constants.Code_Format_Value_Alphabets);\n                            if (segment.AlphabetsCapital.HasValue && segment.AlphabetsCapital.Value)\n                                values.Add(Constants.Code_Format_Value_Alphabets_Capital);\n                            if (segment.AlphabetsSmall.HasValue && segment.AlphabetsSmall.Value)\n                                values.Add(Constants.Code_Format_Value_Alphabets_Small);\n                            if (segment.Numbers.HasValue && segment.Numbers.Value)\n                                values.Add(Constants.Code_Format_Value_Numbers);\n                            if (segment.SpecialCharacters.HasValue && segment.SpecialCharacters.Value)\n                                values.Add(Constants.Code_Format_Value_SpecialChars);\n\n                            uimFormat.PinSegment.CharacterSets = values;\n                        }\n                    }\n                }\n\n                foreach(var segment in uimFormat.UimFormatSegments)\n                {\n                    segment.CharacterSets = UimSegmentCharacterSets[segment.UimFormatSegmentId];\n                }\n\n                return Ok(uimFormat);\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxV2Permissions.UIM_Orders.Get + \",\" + DigitraxV2Permissions.ProgramManagement.Edit)]\n        [HttpGet(\"CodeTypes\")]\n        public IActionResult GetCodeTypes()\n        {\n            try\n            {\n                return Ok(_mapper.Map<List<MasterLookupViewModel>>(_uniqueIdentifiableMarkerService.GetCodeTypes()));\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxV2Permissions.UIM_Orders.Get + \",\" + DigitraxV2Permissions.ProgramManagement.Edit)]\n        [HttpGet(\"OrderingTypes\")]\n        public IActionResult GetOrderingTypes()\n        {\n            try\n            {\n                return Ok(_mapper.Map<List<MasterLookupViewModel>>(_uniqueIdentifiableMarkerService.GetOrderingTypes()));\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxV2Permissions.UIM_Orders.Get + \",\" + DigitraxV2Permissions.ProgramManagement.Edit)]\n        [HttpGet(\"UrlTypes\")]\n        public IActionResult GetUrlTypes()\n        {\n            try\n            {\n                return Ok(_mapper.Map<List<MasterLookupViewModel>>(_uniqueIdentifiableMarkerService.GetUrlTypes()));\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        //[Authorize(DigitraxPermissions.CodeFormat.Add + \",\" + DigitraxPermissions.CodeFormat.Edit)]\n        [HttpGet(\"CharacterSets\")]\n        public IActionResult GetvaluesLkp()\n        {\n            try\n            {\n                var codeFormat = _lookupService.GetLookupsByType(Constants.Code_Format_Value_Lkp);\n                var data = _mapper.Map<List<MasterLookupViewModel>>(codeFormat);\n\n                return Ok(new BaseApiResponse { Data = data });\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n        [Authorize(DigitraxV2Permissions.Imports.Get + \",\" + DigitraxV2Permissions.ProgramManagement.Edit)]\n        [HttpGet(\"IsUIM\")]\n        public IActionResult ValidateUIM(string uim)\n        {\n            try\n            {\n                if (string.IsNullOrWhiteSpace(uim))\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"UID must not be empty\"));\n                try\n                {\n                    var uimObj = _uniqueIdentifiableMarkerService.IsUIM(uim);\n                    return StatusCode(StatusCodes.Status200OK, uimObj);\n                }\n                catch (Exception ex)\n                {\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"Unable to parse the requested UID/URL. Please check the UID Format Configuration\"));\n                }\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n        [Authorize(DigitraxV2Permissions.MobileAuthentication.Get + \",\" + DigitraxV2Permissions.ProgramManagement.Edit)]\n        [HttpGet(\"ValidateUIM\")]\n        public IActionResult ValidateUIM(string uim, [FromQuery] long? ItemId)\n        {\n            try\n            {\n                if (string.IsNullOrWhiteSpace(uim))\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"UID must not be empty\"));\n\n                var isURL = Regex.IsMatch(uim, @\"https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)\");\n\n                var url = _uniqueIdentifiableMarkerService.GetUrlTypeByItemId(ItemId ?? 0);\n                var urlType = _lookupService.GetLookupById(url) ?? null;\n                try\n                {\n                    if ((urlType != null && urlType.HiddenValue.StartsWith(Constants.IN_BOUND_URL)) || (urlType == null && isURL))\n                    {\n                        var program = _programService.GetProgram(_currentTenant.Tenant_DB_Id);\n                        var InboundRedirectUrlConfiguration = program.RedirectConfiguration.InboundRedirectUrlConfiguration;\n                        if (!uim.StartsWith(program.RedirectConfiguration.RedirectDomain))\n                        {\n                            throw new Exception();\n                        }\n                        InboundRedirectUrlConfiguration = InboundRedirectUrlConfiguration.Replace(\"{Redirect_Domain}\", program.RedirectConfiguration.RedirectDomain);\n                        InboundRedirectUrlConfiguration = InboundRedirectUrlConfiguration.Replace(\"{Program_Id}\", _currentTenant.ProgramShortId);\n                        var indexOfUIM = InboundRedirectUrlConfiguration.IndexOf(\"{UIM}\");\n                        uim = uim.Substring(indexOfUIM);\n                    }\n                    else if (urlType != null && urlType.HiddenValue.StartsWith(Constants.OUT_BOUND_URL))\n                    {\n                        var program = _programService.GetProgram(_currentTenant.Tenant_DB_Id);\n                        var OutboundRedirectUrlConfiguration = program.RedirectConfiguration.OutboundRedirectUrlConfiguration;\n                        if (!uim.StartsWith(OutboundRedirectUrlConfiguration.Substring(0, 3)))\n                        {\n                            throw new Exception();\n                        }\n                        OutboundRedirectUrlConfiguration = OutboundRedirectUrlConfiguration.Replace(\"{Program_Id}\", _currentTenant.ProgramShortId);\n                        var indexOfUIM = OutboundRedirectUrlConfiguration.IndexOf(\"{UIM}\");\n                        uim = uim.Substring(indexOfUIM);\n                    }\n                }\n                catch (Exception ex)\n                {\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"Unable to parse the requested UID/URL. Please check the UID Format Configuration\"));\n                }\n\n                var pattern = new Regex(Constants.UIM_VALIDATION_REGEX);\n\n                uim = System.Web.HttpUtility.UrlDecode(uim);\n                uim = uim.Replace(' ', '+');\n\n                if (!pattern.IsMatch(uim))\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"Invalid UID\"));\n\n                var uimObj = _uniqueIdentifiableMarkerService.GetUIM(uim,ItemId);\n                if (uimObj == null)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"UID does not exist\"));\n\n                return StatusCode(StatusCodes.Status200OK, new BaseApiResponse\n                {\n                    Data = new\n                    {\n                        EncodingSchema = uimObj.UimOrder?.UimFormat?.UimFormatItems?.FirstOrDefault(x => x.ItemId == ItemId && x.HasEncodingSchema == true)?.EncodingSchema ?? uimObj.Import?.UimFormat?.UimFormatItems?.FirstOrDefault(x => x.ItemId == ItemId && x.HasEncodingSchema == true)?.EncodingSchema,\n                        UIM = uimObj.UniqueIdentifier,\n                        Covert_Signature = uimObj.UimOrder?.UimFormat?.UimFormatItems?.FirstOrDefault(x => x.ItemId == ItemId && x.HasEncodingSchema == true)?.HasEncodingSchema ?? uimObj.Import?.UimFormat?.UimFormatItems?.FirstOrDefault(x => x.ItemId == ItemId && x.HasEncodingSchema == true)?.HasEncodingSchema\n                    },\n                    Message = \"UID is valid\"\n                }); ;\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxV2Permissions.MobileAuthentication.Get + \",\" + DigitraxV2Permissions.ProgramManagement.Edit)]\n        [HttpGet(\"ValidateUID\")]\n        public IActionResult ValidateUID(string uim, [FromQuery] long? ItemId, long? digitalConfigId)\n        {\n            try\n            {\n                if (string.IsNullOrWhiteSpace(uim))\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"UID must not be empty\"));\n\n                var isURL = Regex.IsMatch(uim, @\"https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)\");\n\n                var url = _uniqueIdentifiableMarkerService.GetUrlTypeByItemId(ItemId ?? 0);\n                var urlType = _lookupService.GetLookupById(url) ?? null;\n                try\n                {\n                    if ((urlType != null && urlType.HiddenValue.StartsWith(Constants.IN_BOUND_URL)) || (urlType == null && isURL))\n                    {\n                        var program = _programService.GetProgram(_currentTenant.Tenant_DB_Id);\n                        var InboundRedirectUrlConfiguration = program.RedirectConfiguration.InboundRedirectUrlConfiguration;\n                        if (!uim.StartsWith(program.RedirectConfiguration.RedirectDomain))\n                        {\n                            throw new Exception();\n                        }\n                        InboundRedirectUrlConfiguration = InboundRedirectUrlConfiguration.Replace(\"{Redirect_Domain}\", program.RedirectConfiguration.RedirectDomain);\n                        InboundRedirectUrlConfiguration = InboundRedirectUrlConfiguration.Replace(\"{Program_Id}\", _currentTenant.ProgramShortId);\n                        var indexOfUIM = InboundRedirectUrlConfiguration.IndexOf(\"{UIM}\");\n                        uim = uim.Substring(indexOfUIM);\n                    }\n                    else if (urlType != null && urlType.HiddenValue.StartsWith(Constants.OUT_BOUND_URL))\n                    {\n                        var program = _programService.GetProgram(_currentTenant.Tenant_DB_Id);\n                        var OutboundRedirectUrlConfiguration = program.RedirectConfiguration.OutboundRedirectUrlConfiguration;\n                        if (!uim.StartsWith(OutboundRedirectUrlConfiguration.Substring(0, 3)))\n                        {\n                            throw new Exception();\n                        }\n                        OutboundRedirectUrlConfiguration = OutboundRedirectUrlConfiguration.Replace(\"{Program_Id}\", _currentTenant.ProgramShortId);\n                        var indexOfUIM = OutboundRedirectUrlConfiguration.IndexOf(\"{UIM}\");\n                        uim = uim.Substring(indexOfUIM);\n                    }\n                }\n                catch (Exception ex)\n                {\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"Unable to parse the requested UID/URL. Please check the UID Format Configuration\"));\n                }\n\n                var pattern = new Regex(Constants.UIM_VALIDATION_REGEX);\n\n                uim = System.Web.HttpUtility.UrlDecode(uim);\n                uim = uim.Replace(' ', '+');\n\n                if (!pattern.IsMatch(uim))\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"Invalid UID\"));\n\n                var uimObj = _uniqueIdentifiableMarkerService.GetUIM(uim, ItemId);\n                if (uimObj == null)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"UID does not exist\"));\n\n                return StatusCode(StatusCodes.Status200OK, new BaseApiResponse\n                {\n                    Data = new\n                    {\n                        EncodingSchema = uimObj.UimOrder?.UimFormat?.UimFormatItems?.FirstOrDefault(x => x.ItemId == ItemId && x.DigitalConfigId == digitalConfigId && x.HasEncodingSchema == true)?.EncodingSchema ?? uimObj.Import?.UimFormat?.UimFormatItems?.FirstOrDefault(x => x.ItemId == ItemId && x.DigitalConfigId == digitalConfigId && x.HasEncodingSchema == true)?.EncodingSchema,\n                        UIM = uimObj.UniqueIdentifier,\n                        Covert_Signature = uimObj.UimOrder?.UimFormat?.UimFormatItems?.FirstOrDefault(x => x.ItemId == ItemId && x.DigitalConfigId == digitalConfigId && x.HasEncodingSchema == true)?.HasEncodingSchema ?? uimObj.Import?.UimFormat?.UimFormatItems?.FirstOrDefault(x => x.ItemId == ItemId && x.DigitalConfigId == digitalConfigId && x.HasEncodingSchema == true)?.HasEncodingSchema\n                    },\n                    Message = \"UID is valid\"\n                }); ;\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(AuthenticationSchemes = \"B2CScheme\")]\n        [HttpGet(\"ValidateUIDWithB2C\")]\n        public IActionResult ValidateUIDWithB2C(string uim, [FromQuery] long? ItemId)\n        {\n            try\n            {\n                if (string.IsNullOrWhiteSpace(uim))\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"UID must not be empty\"));\n\n                var isURL = Regex.IsMatch(uim, @\"https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)\");\n\n                var url = _uniqueIdentifiableMarkerService.GetUrlTypeByItemId(ItemId ?? 0);\n                var urlType = _lookupService.GetLookupById(url) ?? null;\n                try\n                {\n                    if ((urlType != null && urlType.HiddenValue.StartsWith(Constants.IN_BOUND_URL)) || (urlType == null && isURL))\n                    {\n                        var program = _programService.GetProgram(_currentTenant.Tenant_DB_Id);\n                        //var InboundRedirectUrlConfiguration = program.RedirectConfiguration.InboundRedirectUrlConfiguration;\n                        //if (!uim.StartsWith(program.RedirectConfiguration.RedirectDomain))\n                        //{\n                        //    throw new Exception();\n                        //}\n                        //InboundRedirectUrlConfiguration = InboundRedirectUrlConfiguration.Replace(\"{Redirect_Domain}\", program.RedirectConfiguration.RedirectDomain);\n                        //InboundRedirectUrlConfiguration = InboundRedirectUrlConfiguration.Replace(\"{Program_Id}\", _currentTenant.ProgramShortId);\n                        int indexOfEquals = uim.IndexOf('=');\n                        if (indexOfEquals != -1 && indexOfEquals < uim.Length - 1)\n                        {\n                            uim = uim.Substring(indexOfEquals + 1);\n                        }\n                        else\n                        {\n                            throw new Exception();\n                        }\n                        //var indexOfUIM = InboundRedirectUrlConfiguration.IndexOf(\"{UIM}\");\n                        //uim = uim.Substring(indexOfUIM);\n                    }\n                    else if (urlType != null && urlType.HiddenValue.StartsWith(Constants.OUT_BOUND_URL))\n                    {\n                        var program = _programService.GetProgram(_currentTenant.Tenant_DB_Id);\n                        //var OutboundRedirectUrlConfiguration = program.RedirectConfiguration.OutboundRedirectUrlConfiguration;\n                        //if (!uim.StartsWith(OutboundRedirectUrlConfiguration.Substring(0, 3)))\n                        //{\n                        //    throw new Exception();\n                        //}\n                        //OutboundRedirectUrlConfiguration = OutboundRedirectUrlConfiguration.Replace(\"{Program_Id}\", _currentTenant.ProgramShortId);\n                        //var indexOfUIM = OutboundRedirectUrlConfiguration.IndexOf(\"{UIM}\");\n                        //uim = uim.Substring(indexOfUIM);\n                        int indexOfEquals = uim.IndexOf('=');\n\n                        if (indexOfEquals != -1 && indexOfEquals < uim.Length - 1)\n                        {\n                            uim = uim.Substring(indexOfEquals + 1);\n                        }\n                        else\n                        {\n                            throw new Exception();\n                        }\n\n                    }\n                }\n                catch (Exception ex)\n                {\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"Unable to parse the requested UID/URL. Please check the UID Format Configuration\"));\n                }\n\n                var pattern = new Regex(Constants.UIM_VALIDATION_REGEX);\n\n                uim = System.Web.HttpUtility.UrlDecode(uim);\n                uim = uim.Replace(' ', '+');\n\n                if (!pattern.IsMatch(uim))\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"Invalid UID\"));\n\n                var uimObj = _uniqueIdentifiableMarkerService.GetUIM(uim, ItemId);\n                if (uimObj == null)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"UID does not exist\"));\n\n                return StatusCode(StatusCodes.Status200OK, new BaseApiResponse\n                {\n                    Data = new\n                    {\n                        EncodingSchema = uimObj.UimOrder?.UimFormat?.UimFormatItems?.FirstOrDefault(x => x.ItemId == ItemId && x.HasEncodingSchema == true)?.EncodingSchema ?? uimObj.Import?.UimFormat?.UimFormatItems?.FirstOrDefault(x => x.ItemId == ItemId && x.HasEncodingSchema == true)?.EncodingSchema,\n                        UIM = uimObj.UniqueIdentifier,\n                        Covert_Signature = uimObj.UimOrder?.UimFormat?.UimFormatItems?.FirstOrDefault(x => x.ItemId == ItemId && x.HasEncodingSchema == true)?.HasEncodingSchema ?? uimObj.Import?.UimFormat?.UimFormatItems?.FirstOrDefault(x => x.ItemId == ItemId && x.HasEncodingSchema == true)?.HasEncodingSchema\n                    },\n                    Message = \"UID is valid\"\n                }); ;\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxV2Permissions.MobileAuthentication.Get + \",\" + DigitraxV2Permissions.Program_UIM_Explorer.Get)]\n        [HttpGet(\"GetUimDetails\")]\n        public IActionResult GetUimDetails(string uim ,bool itemDetails = false, bool UIDEvents=false, bool ScanHistory = false, bool Incidents = false, bool noncompliance = false, bool PrintAggregation = false, bool ContainerAggregation = false, bool TTEvents = false)\n        {\n            \n            try\n            {\n                bool isAdmin = false;\n                bool isAuthentixUser = false;\n                string superAdminGuid = _config.GetSection(\"AzureAdGroups\").GetSection(\"SuperAdminGroupID\").Value;\n                var superAdminUser = User.Claims.FirstOrDefault(x => x.Type == \"groups\" && x.Value == superAdminGuid);\n                var isSuperAdmin = superAdminUser != null && superAdminUser.Value.Equals(superAdminGuid);\n                if (!isSuperAdmin)\n                {\n                    var permissions = User.Claims.Where(claim => claim.Type == ClaimTypes.Permission).ToList();\n                    TTEvents = permissions.Find(claim => claim.Value == DigitraxV2Permissions.ProgramEventsTNT.View) != null;\n                    UIDEvents = permissions.Find(claim => claim.Value == DigitraxV2Permissions.ProgramEventsUIM.View) != null;\n                    var user = _userService.GetUserByEmailAndTenant(HttpContext.User.Identity.Name, _currentTenant.Tenant_DB_Id);\n                    var roles = _userService.GetUserRoles(_currentTenant.Tenant_DB_Id, user.AadObjectId);\n                    var userTypeLookupId = _lookupService.GetLookupByTypeAndValue(Constants.USER_TYPE, Constants.USER_TYPE_ATX)?.MasterLookupId ?? 0;\n\n                    if (roles.Where(k => k.AdminFlag == true).Count() > 0)\n                    {\n                        isAdmin = true;\n                    }\n\n                    if (user.UserTypeLookUpId == userTypeLookupId)\n                    {\n                        isAuthentixUser = true;\n                    }\n                }\n                else\n                    isAdmin = true;\n\n                var data = _incidentsUtility.GetUimDetails(uim, itemDetails, UIDEvents, ScanHistory, Incidents, noncompliance, PrintAggregation, ContainerAggregation, TTEvents, isAdmin, isAuthentixUser);\n                return StatusCode(data.Status, data.Response);\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [HttpGet(\"GetUimData\")]\n        public IActionResult GetUimData(string uim)\n        {\n            try\n            {\n                //try\n                //{\n                //    Microsoft.Extensions.Primitives.StringValues token;\n                //    Request.Headers.TryGetValue(\"Authorization\", out token);\n                //    _logger.LogInformation(\"About to Validate Recaptcha for Get Program By Short ID Request\");\n                //    var result = CommonFunctions.ValidateRecaptchaToken(\n                //        _config.GetSection(\"RedirectsSettings\").GetSection(\"RecaptchaUrl\").Value,\n                //        _config.GetSection(\"RedirectsSettings\").GetSection(\"RecaptchaSecret\").Value,\n                //        token,\n                //        _logger,\n                //        float.Parse(_config.GetSection(\"RedirectsSettings\").GetSection(\"RecaptchaConfidenceLevel\").Value)\n                //        );\n                //}\n                //catch (Exception ex)\n                //{\n                //    _logger.LogInformation(\"Recaptcha Validation was failed: Unable to Authorize the Get Program By Short ID Request, Reasons: {0}\", ex.Message);\n                //    if (ex.Message.StartsWith(\"Authorization Failed\"))\n                //        return Unauthorized(ex.Message);\n                //    throw ex;\n                //}\n                var allowedTenants = _config.GetSection(\"CosmosDB\").GetValue<string>(\"AllowedTenants\");\n                Response.Headers.Add(\"Access-Control-Expose-Headers\", \"Content-Disposition\");\n                Response.Headers.Add(\"Content-Disposition\", Utility.GenerateAuthenticationCode(_cache));\n                if (Utility.ValidateAuthenticationCode(_cache, Request.Headers[\"Content-Disposition\"], Request.Headers[\"Content-Disposition\"], _scanPortalSettings))\n                {\n                    bool isFromUID_Document = false;\n                    UimDetailsViewModel UidDataFromDocument = new UimDetailsViewModel();\n                    List<UIDDetailsForScanModel> UidDataFromDB = new();\n                    if (Convert.ToBoolean(_config.GetSection(\"UIMDetails\").GetSection(\"EnableDataFromBothSources\").Value) && Convert.ToBoolean(_config.GetSection(\"UIMDetails\").GetSection(\"EnableUIDDocumentSource\").Value) && allowedTenants.Contains(_currentTenant.Tenant_Id))\n                    {\n                        var UIMFromDocument = _incidentsUtility.GetUIMDataFromDocument(uim, true);\n                        if (UIMFromDocument.Response != null && UIMFromDocument.Status == 200)\n                        {\n                            UidDataFromDocument = UIMFromDocument.Response.Data as UimDetailsViewModel;\n                            isFromUID_Document = true;\n                        }\n                        else\n                        {\n                            var response = GetUIMData(uim);\n                            if (response.isValid == true)\n                            {\n                                UidDataFromDB = response.data;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        if (Convert.ToBoolean(_config.GetSection(\"UIMDetails\").GetSection(\"EnableUIDDocumentSource\").Value) && allowedTenants.Contains(_currentTenant.Tenant_Id))\n                        {\n                            var UIMFromDocument = _incidentsUtility.GetUIMDataFromDocument(uim, true);\n                            UidDataFromDocument = UIMFromDocument.Response.Data as UimDetailsViewModel;\n                            isFromUID_Document = true;\n                        }\n                        else\n                        {\n                            var response = GetUIMData(uim);\n                            if (response.isValid == true)\n                            {\n                                UidDataFromDB = response.data;\n                            }\n                        }\n                    }\n                    dynamic data = new System.Dynamic.ExpandoObject();\n                    if (isFromUID_Document)\n                    {\n                        data = new System.Dynamic.ExpandoObject();\n                        data.ItemName = UidDataFromDocument?.ItemDetails?.Name;\n                        data.IsConsumerAuthentication = ((long)UidDataFromDocument?.ItemId != 0) && _itemService.IsConsumerAuthentication((long)UidDataFromDocument.ItemId);\n                        data.UIM = UidDataFromDocument?.UniqueIdentifier;\n                        data.ItemId = UidDataFromDocument?.ItemId;\n                        data.ProductName = UidDataFromDocument?.ProductName;\n                        data.ItemPath = UidDataFromDocument?.ItemDetails.ItemLabelImagePath;\n                        //data.ItemPath = string.IsNullOrWhiteSpace(UidDataFromDocument?.ItemDetails?.ItemLabelImagePath) ? null :\n                        //                               new Uri(Path.Combine(_config.GetSection(\"Content\").GetSection(\"ProgramContentBaseUrl\").Value, _currentTenant.Tenant_Id,\n                        //                                       _config.GetSection(\"Content\").GetSection(\"ItemsFolder\").Value, UidDataFromDocument?.ItemDetails?.ItemLabelImagePath)).ToString();\n                        data.ItemLabelDescription = UidDataFromDocument?.ItemDetails?.ItemLabelDescription;\n                        var uimExtension = _uniqueIdentifiableMarkerService.GetUIMExtension(UidDataFromDocument?.UniqueIdentifier);\n                        if (JsonConvert.DeserializeObject<List<Authentix.Digitrax.Model.Extensions.UniqueIdentifierExtensionModel>>(uimExtension)?.FirstOrDefault()?.CodeSchemaFieldName == \"Pin\")\n                        {\n                            data.IsPin = true;\n                            data.PinLength = JsonConvert.DeserializeObject<List<Authentix.Digitrax.Model.Extensions.UniqueIdentifierExtensionModel>>(uimExtension)?.FirstOrDefault()?.Value?.Length;\n                        }\n                        else\n                        {\n                            data.IsPin = false;\n                            data.PinLength = 0;\n                        }\n                        return StatusCode(StatusCodes.Status200OK, new BaseApiResponse(data));\n                    }\n                    else\n                    {\n                        if (UidDataFromDB != null && UidDataFromDB.Count > 0)\n                        {\n                            var uimDetails = UidDataFromDB.FirstOrDefault();\n\n                            if (string.IsNullOrEmpty(uimDetails.Product_Name))\n                            {\n                                return StatusCode(StatusCodes.Status404NotFound, new BaseApiResponse(ErrorCodes.NOT_FOUND, \"Product does not exist\"));\n                            }\n                            data.ItemName = uimDetails.Item_Name;\n                            data.IsConsumerAuthentication = uimDetails.Is_Consumer_Authentication_Enabled;\n                            data.UIM = uimDetails.Unique_Identifier;\n                            data.ItemId = uimDetails.Item_Id;\n                            data.ProductName = uimDetails.Product_Name;\n                            data.ItemPath = string.IsNullOrWhiteSpace(uimDetails.Item_Image_Path) ? null :\n                                                           new Uri(Path.Combine(_config.GetSection(\"Content\").GetSection(\"ProgramContentBaseUrl\").Value, _currentTenant.Tenant_Id,\n                                                                   _config.GetSection(\"Content\").GetSection(\"ItemsFolder\").Value, uimDetails.Item_Image_Path)).ToString();\n                            data.ItemLabelDescription = uimDetails.Item_Label_Description;\n                            if (JsonConvert.DeserializeObject<List<Authentix.Digitrax.Model.Extensions.UniqueIdentifierExtensionModel>>(uimDetails.Unique_Identifier_Extension)?.FirstOrDefault()?.CodeSchemaFieldName == \"Pin\")\n                            {\n                                data.IsPin = true;\n                                data.PinLength = JsonConvert.DeserializeObject<List<Authentix.Digitrax.Model.Extensions.UniqueIdentifierExtensionModel>>(uimDetails.Unique_Identifier_Extension)?.FirstOrDefault()?.Value?.Length;\n                            }\n                            else\n                            {\n                                data.IsPin = false;\n                                data.PinLength = 0;\n                            }\n\n                        }\n                        else\n                        {\n                            return StatusCode(StatusCodes.Status404NotFound, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"UID not found\"));\n                        }\n                        return StatusCode(StatusCodes.Status200OK, new BaseApiResponse(data));\n                    }\n                }\n                else\n                    return StatusCode(StatusCodes.Status401Unauthorized, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, \"Authentication Failed\"));\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxV2Permissions.UIM_Aggregation.Add + \",\" + DigitraxV2Permissions.ProgramManagement.Edit)]\n        [HttpPost(\"ImportUimAggregations\")]\n        [Consumes(\"multipart/form-data\")]\n        public IActionResult ImportUimAggregations([FromForm]UimAggregationsViewModel model)\n        {\n            try\n            {\n                var checkValidation = ValidateAggregationFile(model);\n\n                if (!checkValidation.isValid)\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_FORMAT, checkValidation.error));\n\n                var currentDateTime = DateTime.Now;\n                var aggregationRequest = _mapper.Map<UimAggregationRequests>(model);\n                aggregationRequest.TenantId = _currentTenant.Tenant_DB_Id;\n                aggregationRequest.JobName = model.JobName.Trim();\n                var file = UploadFileToAzure(model, _currentTenant.Tenant_Id);\n                aggregationRequest.T1FileName = file.fileName;\n                aggregationRequest.T1FilePath = file.filePath;\n                aggregationRequest.StatusLkpId = _lookupService.GetLookupByTypeAndValue(Constants.AGGREGATION_REQUEST_STATUS, Constants.AGGREGATION_REQUEST_STATUS_REQUESTED)?.MasterLookupId ?? 0;\n                aggregationRequest.ActiveFlag = true;\n                aggregationRequest.IsDeleted = false;\n                aggregationRequest.EffectiveStartDate = currentDateTime;\n                aggregationRequest.CreatedDate = currentDateTime;\n                aggregationRequest.CreatedBy = User.Identity.Name;\n\n                _uimAggregationService.SaveAggregationRequest(aggregationRequest);\n\n                return StatusCode(StatusCodes.Status200OK, new BaseApiResponse(\"Aggregations have been imported successfully\"));\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxV2Permissions.UIM_Aggregation.Get + \",\" + DigitraxV2Permissions.ProgramManagement.Edit)]\n        [HttpGet(\"GetUimAggregations\")]\n        public IActionResult GetUimAggregations([DataSourceRequest]DataSourceRequest request)\n        {\n            try\n            {\n                ModifyRequest(request);\n\n                var aggregations = _uimAggregationService.GetUimAggregations(request, _currentTenant.Tenant_DB_Id);\n\n\n                var dagg = _mapper.Map<IList<UimAggregationsListViewModel>>(aggregations.Data);\n                foreach (var agg in dagg)\n                {\n                    string defaultDB = _config.GetSection(\"Defaults\").GetSection(\"ProgramDBConnectionString\").Value;\n                    DigitraxDbContext db_context = new DigitraxDbContext(defaultDB);\n                    UnitOfWork _uow = new UnitOfWork(db_context, _config);\n                    var dataExchangeConfigurationService = new DataExchangeConfigurationService(_uow, _lookupService);\n\n                    var DataExchangeFormat = dataExchangeConfigurationService.GetExchangeConfigurationById(agg.DataExchangeFormatId);\n                    if (DataExchangeFormat != null)\n                        agg.DataExchangeFormat = DataExchangeFormat.Name;\n\n                    var PrintPartner = dataExchangeConfigurationService.GetPrintPartnerById(agg.PrintPartnerId);\n                    if (PrintPartner != null)\n                        agg.PrintPartner = PrintPartner.Name;\n                }\n\n                var responseModel = new\n                {\n                    data = _mapper.Map<IList<UimAggregationsListViewModel>>(dagg),\n                    total = aggregations.Total\n                };\n\n                return StatusCode(StatusCodes.Status200OK, responseModel);\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n        [Authorize(DigitraxV2Permissions.UIM_Aggregation.Get + \",\" + DigitraxV2Permissions.ProgramManagement.Edit)]\n        [HttpGet(\"GetUimAggregationsGrid\")]\n        public IActionResult GetUimAggregationsSP()\n        {\n            var ColumnsList = new List<ProgramEventGridSetupModel>()\n                {\n                                                // TITLE                  FIELD        IsJourneyDetails  IS_Heading      TYPE    IS_COL  IS_SEC   IS_REF   IS_DEF\n                    new ProgramEventGridSetupModel(\"JobName\"              ,\"JobName\"            ,false       ,true   , \"string\"  , true  , true  , false , true  ),\n                    new ProgramEventGridSetupModel(\"PrintPartner\"         ,\"PrintPartner\"       ,false       ,false  , \"string\"  , true  , true  , false , true  ),\n                    new ProgramEventGridSetupModel(\"DataExchangeFormat\"   ,\"DataExchangeFormat\" ,false       ,false  , \"string\"  , true  , true  , false , true  ),\n                    new ProgramEventGridSetupModel(\"FileName\"             ,\"FileName\"           ,false       ,false  , \"string\"  , true  , true  , false , true  ),\n                    new ProgramEventGridSetupModel(\"Status\"               ,\"Status\"             ,false       ,false  , \"string\"  , true  , true  , false , true  ),\n                    new ProgramEventGridSetupModel(\"Date\"                 ,\"Date\"               ,false       ,false  , \"date\"    , true  , true  , false , true  ),\n\n                };\n            var responseModel = new\n            {\n                data = ColumnsList,\n                total = ColumnsList.Count()\n            };\n\n            return StatusCode(StatusCodes.Status200OK, responseModel);\n        }\n\n        [Authorize(DigitraxV2Permissions.UIM_Aggregation.Get + \",\" + DigitraxV2Permissions.ProgramManagement.Edit)]\n        [HttpGet(\"GetUimAggregationsDataAll\")]\n        public IActionResult GetUimAggregationsSP(string JobName,\n            string PrintPartner,\n            string DataExchangeFormat,\n            string FileName,\n            string Status,\n            string StartDate,\n            string EndDate,\n            string page,\n            string pageSize)\n        {\n            try\n            {\n                var aggregations = _uimAggregationService.GetAggregationsDataAll(_currentTenant.Tenant_DB_Id, JobName,\n                                                       PrintPartner,\n                                                       DataExchangeFormat,\n                                                       FileName,\n                                                       Status,\n                                                       StartDate,\n                                                       EndDate,\n                                                       page,\n                                                       pageSize);\n                var gridData = _mapper.Map<IList<UimAggregationListSPViewModel>>(aggregations);\n                var responseModel = new\n                {\n                    data = gridData,\n                    total = aggregations?.FirstOrDefault()?.total ?? 0\n                };\n\n                return StatusCode(StatusCodes.Status200OK, responseModel);\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n\n\n        [Authorize(DigitraxV2Permissions.UIM_Orders.Get + \",\" + DigitraxV2Permissions.ProgramManagement.Edit)]\n        [HttpGet(\"UIDFormats\")]\n        public IActionResult GetUidFormats([DataSourceRequest] DataSourceRequest request, [FromQuery] bool ActiveOnly = false)\n        {\n            try\n            {\n                var result = _uniqueIdentifiableMarkerService.GetUIDFormats(request, _currentTenant.Tenant_DB_Id, ActiveOnly);\n                var uidFormats = _mapper.Map<List<UIDFormatViewModel>>(result.Data);\n\n                var responseModel = new\n                {\n                    data = uidFormats,\n                    total = result.Total\n                };\n                return Ok(responseModel);\n\n            }\n            catch (Exception ex)\n            {\n                var trackingId = Guid.NewGuid();\n                CommonFunctions.AddLogEntry(_logger, $\"trackingId: {trackingId}\", ex.ToString(), true);\n\n                return StatusCode(StatusCodes.Status500InternalServerError, new BaseApiResponse(ErrorCodes.SYSTEM_ERROR, $\"Some internal error has occurred. Your tracking id is: {trackingId}\"));\n            }\n        }\n        [Authorize(AuthenticationSchemes = \"B2CScheme\")]\n        [HttpGet(\"GetItemByUid\")]\n        public IActionResult GetItemByUid(string uid)\n        {\n            try\n            {\n                if (string.IsNullOrWhiteSpace(uid))\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"UID must not be empty\"));\n\n                var isURL = Regex.IsMatch(uid, @\"https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)\");\n\n                if (isURL)\n                {\n\n                    int indexOfEquals = uid.IndexOf('=');\n                    if (indexOfEquals != -1 && indexOfEquals < uid.Length - 1)\n                    {\n                        uid = uid.Substring(indexOfEquals + 1);\n                    }\n                    else\n                    {\n                        throw new Exception();\n                    }\n                }\n\n                var pattern = new Regex(Constants.UIM_VALIDATION_REGEX);\n\n                uid = System.Web.HttpUtility.UrlDecode(uid);\n                uid = uid.Replace(' ', '+');\n\n                if (!pattern.IsMatch(uid))\n                    return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"Invalid UID\"));\n\n                var itemId = _uniqueIdentifiableMarkerService.GetItemIdByUID(uid, _currentTenant.Tenant_DB_Id);\n\n                return StatusCode(StatusCodes.Status200OK, new BaseApiResponse(itemId));\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(StatusCodes.Status400BadRequest, new BaseApiResponse(ErrorCodes.INVALID_INPUT_PARAM, \"Unable to parse the requested UID/URL. Please check the UID Format Configuration\"));\n\n            }\n        }\n\n        #region InternalFunctions\n        private (bool isValid, string message, List<UIDDetailsForScanModel> data) GetUIMData(string uim)\n        {\n            if (string.IsNullOrWhiteSpace(uim))\n            {\n                return (false, \"UID must not be empty\", null);\n            }\n            var pattern = new Regex(\"^[a-zA-Z0-9-'_|/]*$\");\n            if (!pattern.IsMatch(uim))\n            {\n                return (false, \"Invalid UID\", null);\n            }\n            var uimDetailsForScan = _uniqueIdentifierService.GetUIDDetailsForScan(uim, _currentTenant.Tenant_DB_Id);\n            if (uimDetailsForScan?.Count > 0)\n            {\n                return (true, \"Success\", uimDetailsForScan);\n            }\n            else\n                return (false, $\"Data does not exist agsint UID: {uim}\", null);\n        }\n        private (bool, string) ValidateUIMFormatViewModel(UimFormatsViewModel uimFormatModel, bool editMode = false)\n        {\n            List<int> exists = new List<int>();\n            foreach (var item in uimFormatModel.AssociatedItems)\n            {\n                bool existence = false;\n\n                if (editMode == false)\n                    existence = _uniqueIdentifiableMarkerService.CheckItemAssociationWithUIMFormat(_currentTenant.Tenant_DB_Id, item.ItemId);\n                else\n                    existence = _uniqueIdentifiableMarkerService.CheckItemAssociationWithUIMFormat(_currentTenant.Tenant_DB_Id, item.ItemId, uimFormatModel.UimFormatId);\n                \n                if(existence == true)\n                    return (false, string.Format(\"Selected Item # {0} is already associated with another UID Format\", item.ItemNumber));\n\n                if (exists.Contains(item.ItemId))\n                {\n                    return (false, \"An item cannot be associated with UID Format more than once\");\n                }\n            }\n            return (true, null);\n        }\n\n        private (bool isValid, string error) ValidateAggregationFile(UimAggregationsViewModel model)\n        {\n            var line = string.Empty;\n            using (var reader = new StreamReader(model.AggregationFile.OpenReadStream()))\n            {\n                if (reader.Peek() >= 0)\n                {\n                    line = reader.ReadLine();\n                    var headings = line.Split(',');\n                    var actualCols = _config.GetSection(\"AggregationProcessingSettings\").GetValue<int>(\"ColumnsInAggregationRequestFile\");\n                    var headerIncluded = _config.GetSection(\"AggregationProcessingSettings\").GetValue<bool>(\"HeaderRowExistsInAggregationRequest\");\n\n                    if (headings.Length != actualCols)\n                        return (false, \"Invalid Aggregation File\");\n\n                    if (headerIncluded && (string.IsNullOrWhiteSpace(headings[0]) || headings[0].Trim().ToUpper() != Constants.T1_FILE_COLUMN_0 ||\n                        string.IsNullOrWhiteSpace(headings[1]) || headings[1].Trim().ToUpper() != Constants.T1_FILE_COLUMN_1 ||\n                        string.IsNullOrWhiteSpace(headings[2]) || headings[2].Trim().ToUpper() != Constants.T1_FILE_COLUMN_2 ||\n                        string.IsNullOrWhiteSpace(headings[3]) || headings[3].Trim().ToUpper() != Constants.T1_FILE_COLUMN_3 ||\n                        string.IsNullOrWhiteSpace(headings[4]) || headings[4].Trim().ToUpper() != Constants.T1_FILE_COLUMN_4 ||\n                        string.IsNullOrWhiteSpace(headings[5]) || headings[5].Trim().ToUpper() != Constants.T1_FILE_COLUMN_5 ||\n                        string.IsNullOrWhiteSpace(headings[6]) || headings[6].Trim().ToUpper() != Constants.T1_FILE_COLUMN_6 ||\n                        string.IsNullOrWhiteSpace(headings[7]) || headings[7].Trim().ToUpper() != Constants.T1_FILE_COLUMN_7 ||\n                        string.IsNullOrWhiteSpace(headings[8]) || headings[8].Trim().ToUpper() != Constants.T1_FILE_COLUMN_8 ||\n                        string.IsNullOrWhiteSpace(headings[9]) || headings[9].Trim().ToUpper() != Constants.T1_FILE_COLUMN_9))\n                        return (false, \"Columns are invalid or not present in correct order in the aggregation file\");\n                }\n                else\n                    return (false, \"File is empty\");\n            }\n\n            return (true, \"Valid\");\n        }\n\n        private (string fileName, string filePath) UploadFile(UimAggregationsViewModel model, string tenantGuid)\n        {\n            string uniqueFileName = null;\n            string filePath = null;\n\n            if (model.AggregationFile != null)\n            {\n                var rootFolder = Path.Combine(_webHostEnvironment.ContentRootPath, _config.GetSection(\"Content\").GetSection(\"ProgramFolder\").Value);\n                var folderName = Path.Combine(tenantGuid, _config.GetSection(\"Content\").GetSection(\"AggregationsFolder\").Value);\n\n                //Create folder if do not exist\n                Directory.CreateDirectory(Path.Combine(_config.GetSection(\"Content\").GetSection(\"ProgramFolder\").Value, folderName));\n\n                var fileBase = Path.GetFileNameWithoutExtension(model.AggregationFile.FileName).Replace(\" \", \"_\");\n                var ext = Path.GetExtension(model.AggregationFile.FileName);\n                uniqueFileName = Path.Combine(fileBase + \"_\" + Guid.NewGuid().ToString() + ext);\n                filePath = Path.Combine(folderName, uniqueFileName);\n\n                using (var fileStream = new FileStream(Path.Combine(rootFolder, filePath), FileMode.Create))\n                {\n                    model.AggregationFile.CopyTo(fileStream);\n                }\n            }\n\n            return (uniqueFileName, filePath);\n        }\n\n        private (string fileName, string filePath) UploadFileToAzure(UimAggregationsViewModel model, string tenantGuid)\n        {\n            string uniqueFileName = null;\n            string filePath = null;\n\n            if (model.AggregationFile != null)\n            {\n                var storageSettings = _config.GetSection(\"BlobStorageSettings\");\n                string connectionString = storageSettings.GetValue<string>(\"ConnectionString\");\n                string container = storageSettings.GetValue<string>(\"AggregationContainer\");\n                var containerClient = new BlobContainerClient(connectionString, container);\n\n                var fileBase = Path.GetFileNameWithoutExtension(model.AggregationFile.FileName).Replace(\" \", \"_\");\n                var ext = Path.GetExtension(model.AggregationFile.FileName);\n                uniqueFileName = Path.Combine(fileBase + \"_\" + Guid.NewGuid().ToString() + ext);\n\n                if (model.AggregationFile.Length > 0)\n                {\n                    using (var memoryStream = new MemoryStream())\n                    {\n                        model.AggregationFile.CopyTo(memoryStream);\n                        memoryStream.Position = 0;\n                        using (var stream = new StreamReader(memoryStream))\n                        {\n                            _logger.LogInformation($\"Uploading file {uniqueFileName} to Azure Blob Container {container}\");\n                            containerClient.UploadBlob(uniqueFileName, stream.BaseStream);\n                            filePath = containerClient.Uri.AbsoluteUri + \"/\" + uniqueFileName;\n                        }\n                    }\n                }\n            }\n\n            return (uniqueFileName, filePath);\n        }\n\n        private void ModifyRequest(DataSourceRequest request)\n        {\n            ModifyFilters(request.Filters);\n            ModifySorts(request.Sorts);\n        }\n\n        private void ModifyFilters(IList<IFilterDescriptor> filters)\n        {\n            if (filters != null && filters.Any())\n                foreach (var filter in filters)\n                {\n                    if (filter is CompositeFilterDescriptor)\n                        ModifyFilters(((CompositeFilterDescriptor)filter).FilterDescriptors);\n                    else\n                    {\n                        var descriptor = filter as FilterDescriptor;\n                        if (descriptor != null && descriptor.Member.Equals(\"FileName\"))\n                            descriptor.Member = \"T1FileName\";\n                        if (descriptor != null && descriptor.Member.Equals(\"Status\"))\n                            descriptor.Member = \"StatusLkp.VisibleValue\";\n                        if (descriptor != null && descriptor.Member.Equals(\"DataExchangeFormat\"))\n                            descriptor.Member = \"DataExchangeFormat.Name\";\n                        if (descriptor != null && descriptor.Member.Equals(\"PrintPartner\"))\n                            descriptor.Member = \"PrintPartner.Name\";\n                    }\n                }\n        }\n\n        private void ModifySorts(IList<SortDescriptor> sorts)\n        {\n            if (sorts != null && sorts.Any())\n                foreach (var sort in sorts)\n                {\n                    if (sort != null && sort.Member != null && sort.Member.Equals(\"FileName\"))\n                        sort.Member = \"T1FileName\";\n                    if (sort != null && sort.Member != null && sort.Member.Equals(\"Status\"))\n                        sort.Member = \"StatusLkp.VisibleValue\";\n                    if (sort != null && sort.Member != null && sort.Member.Equals(\"DataExchangeFormat\"))\n                        sort.Member = \"DataExchangeFormat.Name\";\n                    if (sort != null && sort.Member != null && sort.Member.Equals(\"PrintPartner\"))\n                        sort.Member = \"PrintPartner.Name\";\n                }\n        }\n\n        //private BaseDetailEventViewModel AddLocationDetails(BaseEventModel data)\n        //{\n        //    if (data != null)\n        //    {\n        //        var location = _locationService.GetLocation(data.LocationId);\n        //        var baseDetailModel = _mapper.Map<BaseDetailEventViewModel>(data);\n        //        baseDetailModel.LocationFullAddress = Utility.formatAddress(location?.Address?.AddressLine1 , location?.Address?.AddressLine2,\n        //            location?.Address?.CityName , \n        //            location?.Address?.PostalZipCode,\n        //            location?.Address?.State?.StateName,\n        //            location?.Address?.Country?.CountryName);\n        //        baseDetailModel.Coordinates = Utility.MapCoordinates(location.Address.Coordinate);\n        //        baseDetailModel.LocationName = location?.LocationName;\n        //        if (data.EventType.Equals(Constants.CODE_EVENT_DISPATCH))\n        //        {\n        //            var destinationlocation = _locationService.GetLocationByCode(data.DestinationLocationCode);\n        //            baseDetailModel.DestinationLocationFullAddress = Utility.formatAddress(destinationlocation?.Address?.AddressLine1,\n        //                destinationlocation?.Address?.AddressLine2,\n        //                destinationlocation?.Address?.CityName,\n        //                destinationlocation?.Address?.PostalZipCode,\n        //                destinationlocation?.Address?.State?.StateName,\n        //                destinationlocation?.Address?.Country?.CountryName);\n        //            baseDetailModel.Destination_LocationName = destinationlocation?.LocationName;\n        //            //baseDetailModel.Coordinates = Utility.MapCoordinates(destinationlocation.Address.Coordinate);\n        //        }\n        //        return baseDetailModel;\n        //    }\n        //    return null;\n        //}\n\n        //private (bool isSuccess, UID_DocumentViewModel data, string message) GetUID_Documents(string UID)\n        //{\n        //    UID_DocumentViewModel uniqueIdentifier = new UID_DocumentViewModel();\n        //    var UIDResponse = _UIDDocumentService.GetUIDDocument(UID, _currentTenant.Tenant_DB_Id);\n        //    if (UIDResponse.IsCompleted && !UIDResponse.IsFaulted)\n        //        uniqueIdentifier = _mapper.Map<Unique_Identifiers, UID_DocumentViewModel>(UIDResponse.Result);\n        //    else\n        //    {\n        //        string message = UIDResponse.Exception.Message;\n        //        return (false,new(), message);\n        //    }\n        //    var UIDDocument_Data = uniqueIdentifier;\n        //    if (UIDDocument_Data != null)\n        //    {\n        //        var itemResponse = _UIDDocumentService.GetItem(UIDDocument_Data.item_id, _currentTenant.Tenant_DB_Id);\n        //        if (itemResponse.IsCompleted && !itemResponse.IsFaulted)\n        //            UIDDocument_Data.item = itemResponse.Result;\n        //        else\n        //        {\n        //            string message = itemResponse.Exception.Message;\n        //            return (false,new(), message);\n        //        }\n        //    }\n        //    return (true,UIDDocument_Data, \"Completed Successfully\");\n        //}\n        //private UimDetailsViewModel MappUIDDocument(UID_DocumentViewModel data)\n        //{\n        //    UimDetailsViewModel responce = new UimDetailsViewModel();\n        //    responce.ItemId = data.item_id;\n        //    responce.UniqueIdentifierId = data.unique_identifier_id;\n        //    responce.UimOrderId = data.uim_order_id??0;\n        //    //responce.UniqueIdentifierTypeLkpId = data.\n        //    //responce.UniqueIdentifierTypeLkpValue = data.\n        //    responce.UniqueIdentifier = data.unique_identifier;\n        //    //responce.CurrentStatusLkpId\n        //    responce.CurrentStatusLkpValue = data.current_status;\n        //    //responce.SequenceValue = data\n        //    responce.RequestedDate = data.created_date;\n        //    responce.ProductName = data.product_name;\n        //    //responce.ProductMetadataDetails = data.\n\n        //    responce.ItemDetails = _mapper.Map<UIMItemDetailsViewModel>(data.item);\n        //    responce.Events = _mapper.Map<List<UimEventDetailsViewModel>>(data.uid_events);\n        //    if (responce.Events != null)\n        //    {\n        //        foreach (var events in data.uid_events)\n        //        {\n        //            if (events.Event_Details != null)\n        //            { \n        //                var eventForms = new List<EventFormValuesViewModel>();\n        //                foreach (var form in events.Event_Details)\n        //                {\n        //                    var EventDetailForm = new EventFormValuesViewModel();\n        //                    EventDetailForm.EventDetailId = 0; //currenly set to zero\n        //                    EventDetailForm.EventDetailName = form.Name;\n        //                    EventDetailForm.Value = form.Value;\n        //                    if (form.Value_MetaData != null)\n        //                    {\n        //                        var ListEventOptions = new List<EventOptionsViewModel>();\n        //                        var ListMetaData = new List<EventOptionsMetadataViewModel>();\n        //                        foreach (var metadata in form.Value_MetaData)\n        //                        {\n        //                            var OptionMetaData = new EventOptionsMetadataViewModel();\n        //                            OptionMetaData.Name = metadata.Name;\n        //                            OptionMetaData.Value = metadata.Value;\n        //                            ListMetaData.Add(OptionMetaData);\n        //                        }\n        //                        var EvetOption = new EventOptionsViewModel();\n        //                        EvetOption.EventDetailOptionsMetadata = ListMetaData;\n        //                        ListEventOptions.Add(EvetOption);\n        //                        var EventDetail = new EventDetailViewModel();\n        //                        EventDetail.EventDetailOptions = ListEventOptions;\n        //                        EventDetailForm.EventDetail = EventDetail;\n        //                    }\n        //                    eventForms.Add(EventDetailForm);\n        //                }\n        //                responce.Events.FirstOrDefault(x => x.EventId == events.Uim_Event_Id).Forms = new List<EventFormValuesViewModel>(eventForms);\n        //            }\n        //        }\n        //    }\n        //    responce.ScanHistory = _mapper.Map<List<ScanHistoriesViewModel>>(data.uid_scans);\n        //    responce.AggregationDetails = _mapper.Map<UimAggregationDetailsViewModel>(data);\n        //    responce.ContainerAggregations = data.container_aggregations;\n        //    //responce.Incidents =\n        //    var ttEvents = new List<dynamic>();\n        //    foreach (var TTEvent in data.TTEvents)\n        //    {\n        //        switch (TTEvent.Event_Type)\n        //        {\n        //            case Constants.CODE_EVENT_APPLICATION:\n        //                {\n        //                    var viewModel = _mapper.Map<ApplicationEventViewModel>(TTEvent);\n        //                    ttEvents.Add(viewModel);\n        //                    break;\n        //                }\n        //            case Constants.CODE_EVENT_AGGREGATION:\n        //                {\n        //                    var viewModel = _mapper.Map<AggregationEventViewModel>(TTEvent);\n        //                    ttEvents.Add(viewModel);\n        //                    break;\n        //                }\n        //            case Constants.CODE_EVENT_DISPATCH:\n        //                {\n        //                    var viewModel = _mapper.Map<DispatchEventViewModel>(TTEvent);\n        //                    ttEvents.Add(viewModel);\n        //                    break;\n        //                }\n        //            case Constants.CODE_EVENT_TRANSLOAD:\n        //                {\n        //                    var viewModel = _mapper.Map<TransloadEventViewModel>(TTEvent);\n        //                    ttEvents.Add(viewModel);\n        //                    break;\n        //                }\n        //            case Constants.CODE_EVENT_ARRIVAL:\n        //                {\n        //                    var viewModel = _mapper.Map<ArrivalEventViewModel>(TTEvent);\n        //                    ttEvents.Add(viewModel);\n        //                    break;\n        //                }\n        //            case Constants.CODE_EVENT_DELIVERY:\n        //                {\n        //                    var viewModel = _mapper.Map<DeliveryEventViewModel>(TTEvent);\n        //                    ttEvents.Add(viewModel);\n        //                    break;\n        //                }\n        //            case Constants.CODE_EVENT_DISAGGREGATION:\n        //                {\n        //                    var viewModel = _mapper.Map<DisaggregationEventViewModel>(TTEvent);\n        //                    ttEvents.Add(viewModel);\n        //                    break;\n        //                }\n        //            case Constants.CODE_EVENT_DEACTIVATION:\n        //                {\n        //                    var viewModel = _mapper.Map<DeactivationEventViewModel>(TTEvent);\n        //                    ttEvents.Add(viewModel);\n        //                    break;\n        //                }\n        //            default:\n        //                {\n        //                    //THE CHECK TO DETERMINE AN EXCEPTION\n        //                    if (TTEvent.Exception_ID != 0 && (TTEvent.Event_ID == TTEvent.Exception_ID))\n        //                    {\n        //                        ttEvents.Add(_mapper.Map<ExceptionEventViewModel>(TTEvent));\n        //                    }\n        //                    break;\n        //                }\n        //        }\n        //    }\n        //    responce.TNTEvents = ttEvents;\n        //    return responce;\n        //}\n        #endregion\n    }\n}\n"}
{"feature_name": "Events", "file_type": "Model", "file_name": "EventResponceViewModel.cs", "file_content": "using System.Collections.Generic;\n\nnamespace AuthentixDigitraxPlatform.Models\n{\n    public class EventResponceViewModel\n    {\n        public int StatusCode { get; set; }\n        public string Code { get; set; }\n        public string StatusUrl { get; set; }\n        public object Data { get; set; }\n        public bool Error { get; set; }\n        public string Message { get; set; }\n        public object  Errors { get; set; }\n    }\n}\n"}
{"feature_name": "Import Processing", "file_type": "Model", "file_name": "ImportDetailsViewModel.cs", "file_content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace AuthentixDigitraxPlatform.Models\n{\n    public class ImportDetailsViewModel\n    {\n        public long ImportId { get; set; }\n\n        public int ImportTypeId { get; set; }\n\n        public string ImportType { get; set; }\n\n        public string Status { get; set; }\n\n        public long DataExchangeFormatId { get; set; }\n\n        public string DataExchangeFormatName { get; set; }\n\n        public long ItemId { get; set; }\n\n        public string ItemName { get; set; }\n\n        public string ItemLabelImagePath { get; set; }\n\n        public int UIMFormatId { get; set; }\n\n        public string UIMFormatName { get; set; }\n\n        public bool IsProductAssociated { get; set; }\n\n        public int? ProductId { get; set; }\n\n        public string ProductName { get; set; }\n\n        public string ErrorCode { get; set; }\n\n        public string ErrorDescription { get; set; }\n\n        public DateTime CreatedDate { get; set; }\n\n        public string FileName { get; set; }\n\n        public int? EventConfigurationId { get; set; }\n\n        public int? LocationId { get; set; }\n\n        public DateTime? EventDate { get; set; }\n\n        public List<string> FileRecords { get; set; }\n        public int? UserTypeId { get; set; }\n\n        public List<EventDetailOptionsViewModel> EventDetailOptions { get; set; }\n    }\n}\n"}
{"feature_name": "Import Processing", "file_type": "Model", "file_name": "ImportsListViewModel.cs", "file_content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace AuthentixDigitraxPlatform.Models\n{\n    public class ImportsListViewModel\n    {\n        public long ImportId { get; set; }\n\n        public string Type { get; set; }\n\n        public string CreatedBy { get; set; }\n\n        public string Status { get; set; }\n\n        public string Method { get; set; }\n\n        public string FileName { get; set; }\n        public string FailedFileName { get; set; }\n        public string FailedFilePath { get; set; }\n        public string FilePath { get; set; }\n\n        public string ErrorCode { get; set; }\n\n        public string ErrorDescription { get; set; }\n\n        public DateTime CreatedDate { get; set; }\n    }\n}\n"}
{"feature_name": "Import Processing", "file_type": "Model", "file_name": "ImportsViewModel.cs", "file_content": "using AuthentixDigitraxPlatform.Validators;\nusing Microsoft.AspNetCore.Http;\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace AuthentixDigitraxPlatform.Models\n{\n    public class ImportsViewModel\n    {\n        //[Required(ErrorMessage = \"Import Type Id is required\")]\n        public long? ImportTypeId { get; set; }\n\n        //[Required(ErrorMessage = \"Data Exchange Format Id is required\")]\n        public long? DataExchangeFormatId { get; set; }\n\n        //[Required(ErrorMessage = \"Item Id is required\")]\n        public long? ItemId { get; set; }\n\n        //[Required(ErrorMessage = \"UIM Format Id is required\")]\n        public int? UIMFormatId { get; set; }\n\n        public bool IsProductAssociated { get; set; }\n\n        public int? ProductId { get; set; }\n\n        [Required(ErrorMessage = \"Import file is required\")]\n        [FileType(new string[] { \".csv\" }, \"csv\")]\n        public IFormFile ImportFile { get; set; }\n\n        public bool IsPortal { get; set; }\n\n       \n        public int? EventConfigurationId { get; set; }\n\n        public DateTime? EventDate { get; set; }\n\n        public long? LocationId { get; set; }\n\n        public bool IsByUid { get; set; } \n\n        public int? EventFormId { get; set; }\n\n        public bool IsLocationRequired { get; set; }\n        //for UserImport\n        public int? UserTypeId { get; set; }\n    }\n}\n"}
{"feature_name": "Order Processing", "file_type": "Model", "file_name": "OrderListViewModel.cs", "file_content": "using System;\n\nnamespace AuthentixDigitraxPlatform.Models\n{\n    public class OrderListViewModel\n    {\n        public long OrderId { get; set; }\n\n        public int TenantId { get; set; }\n\n        public long ProductId { get; set; }\n\n        public string OrderType { get; set; }\n\n        public string OrderNumber { get; set; }\n\n        public int IntendedMarket { get; set; }\n\n        public double Quantity { get; set; }\n\n        public int CodeFormat { get; set; }\n\n        public string CodeSource { get; set; }\n\n        public int OrderPriorityLkpId { get; set; }\n\n        public string OrderPriority { get; set; }\n\n        public int OrderStatusLkpId { get; set; }\n\n        public string OrderStatus { get; set; }\n\n        public bool? OtherCountryShipmentFlag { get; set; }\n\n        public int? FirstShipmentCountryID { get; set; }\n\n        public DateTime RequestedOn { get; set; }\n\n        public double? Fee { get; set; }\n\n        public ProductDataViewModel ProductData { get; set; }\n        public string OrderedItem { get; set; }\n    }\n}"}
{"feature_name": "UID Management", "file_type": "Model", "file_name": "UniqueIdentifierAppLessViewModel.cs", "file_content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace AuthentixDigitraxPlatform.Models\n{\n    public class UniqueIdentifierAppLessViewModel\n    {\n        public string UniqueIdentifier { get; set; }\n        public string ValidationScheme { get; set; }\n        public List<UimEventDetailViewModel> UimEvents { get; set; }\n        //public ProductAppLessViewModel Product { get; set; }\n        public TenantAppLessViewModel Tenant { get; set; }\n    }\n}\n"}
{"feature_name": "UID Management", "file_type": "Model", "file_name": "UniqueIdentifierExtensionModel.cs", "file_content": "using Authentix.Digitrax.Model.Extensions;\nusing AuthentixDigitraxPlatform.Validators;\nusing Microsoft.AspNetCore.Http;\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace AuthentixDigitraxPlatform.Models\n{\n    public class UniqueIdentifierExtensionModel\n    {\n        public string Value { get; set; }\n        public long CodeSchemaFieldId { get; set; }\n        public string CodeSchemaFieldName { get; set; }\n    }\n}\n"}
{"feature_name": "UID Management", "file_type": "Model", "file_name": "UniqueIdentifierViewModel.cs", "file_content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace AuthentixDigitraxPlatform.Models\n{\n    public class UniqueIdentifierViewModel\n    {\n        public class OrderDetail\n        {\n            public string OrderNumber { get; set; }\n            public string RetailCountry { get; set; }\n            public string OrderStatus { get; set; }\n            public string OrderType { get; set; }\n            public string OrderPriority { get; set; }\n            public int Quantity { get; set; }\n            public DateTime OrderRequestTimestamp { get; set; }\n            public bool? ImportedProductFlag { get; set; }\n            public bool? OtherCountryShipmentFlag { get; set; }\n            public string ShipmentCountry { get; set; }\n            public string RecallReason { get; set; }\n            public string AdditionalRecallReason { get; set; }\n            \n        }\n\n        public class ProductDetail\n        {\n            public string ProductGTIN { get; set; }\n            public long? ProductID { get; set; }\n            public string ProductName { get; set; }\n            public string ProductIdentifier { get; set; }\n            public string ProductDescription { get; set; }\n            public double? ProductWeight { get; set; }\n            public string ProductOrigin { get; set; }\n            public string ProductFamily { get; set; }\n            public string ProductClass { get; set; }\n            public string ProductType { get; set; }\n            public string NetContent { get; set; }\n            public string UnitOfMeasure { get; set; }\n            public string TargetMarket { get; set; }\n            public string ProductLogo { get; set; }\n        }\n\n        public class CodeDetail\n        {\n            public long? UniqueIdentifierId { get; set; }\n            public string UniqueIdentifierType { get; set; }\n            public string UniqueIdentifierStatus { get; set; }\n            public string UniqueIdentifier { get; set; }\n            public DateTime RequestedDate { get; set; }\n            public DateTime? GeneratedDate { get; set; }\n        }\n\n        public class ProgramDetail\n        {\n            public string ProgramName { get; set; }\n\n            public string ProgramLogo { get; set; }\n\n            public string BrandOwnerName { get; set; }\n\n            public string BrandOwnerEmail { get; set; }\n        }\n\n        public OrderDetail Order { get; set; }\n        public ProductDetail Product { get; set; }\n\n        public CodeDetail Code { get; set; }\n\n        public ProgramDetail Program { get; set; }\n\n    }\n}\n"}
{"feature_name": "Events", "file_type": "SRS Document", "file_name": "Event Management Flows.docx", "file_content": "Event Management Flows\nBackground\nThis document outlines the requirements for recording product journey movements against Unique Identifiers (UIDs). It aims to provide a comprehensive overview of the event management features within the DigiTrax system.\nUser Story\nThe goal of this user story is to define event management within the DigiTrax system, enabling users to record, manage, and track various events associated with product journeys.\nRequirement Details\nAccess Control\nDescription:\nEvents will be accessible off the DigiTrax main menu. A user\u2019s access to Events should be controlled through a permission 'Manage Events' (Get/View/Edit/Delete/Add). This permission will control a user\u2019s access to all events.\nTypical Course of Events:\nThe user logs in.\nThe user's access to Events is determined by permissions.\nEvent Listing\nPre-Conditions:\nThe user must be logged in.\nActors:\nATX User/Personnel\nActor Actions and System Responses:\nThe user logs in.\nThe user will be logged into the assigned program. If more than one program is assigned, the user can switch programs through a drop-down menu.\nThe user navigates to the side menu and selects Events.\nA listing screen will appear with the following fields: Event Name, Event Date, User, Method, Actions.\nPost-Condition:\nThe Events listing screen shows the correct fields.\nAdd Event\nPre-Conditions:\nThe user must be logged in.\nActors:\nATX User/Personnel\nActor Actions and System Responses:\nThe user logs in.\nThe user will be logged into the assigned program. If more than one program is assigned, the user can switch programs through a drop-down menu.\nThe user navigates to the side menu and selects Events.\nA listing screen will appear with the following fields: Event Name, Event Date, User, Method, Actions.\nThe user clicks on the Add new button.\nThe following fields will appear: Event, Event Date, Location, Type, Beginning UID, Ending UID, UID, Event Form fields, Geocode Enforce, Geocode Fence, Alert Type, Threshold.\nThe user fills in the information and clicks Save. The Event will now appear in the Event Listing Screen.\nPost-Condition:\nEvents are added.\nData Dictionary\nEvent: Drop down, UX Sequence 1, Editable, Mandatory. User will only be able to select from a list of active custom events. System events (like Created, Exported, Printed, Shipped) cannot be selected nor shown to the user.\nEvent Date: Date field, UX Sequence 2, Editable, Mandatory. The Event Date represents the date that the event being recorded took place. It defaults to {Today} but is editable. A user can select the current date or up to 30 days prior. Future dates are not selectable.\nEvent Transaction Date: Date field, not editable by the user, always set to {Today}. Represents the date the event was recorded by the user in DigiTrax. This field is not displayed to the user.\nLocation: Drop down, UX Sequence 3, Editable, Mandatory if the event has 'Location Required' enabled. Shows a list of active locations for selection.\nType: Drop down, UX Sequence 4, Editable, Mandatory. Values include UID Range and Container ID.\nBeginning UID: Text box, UX Sequence 5, Editable, Mandatory if Type is UID Range. Alphanumeric.\nEnding UID: Text box, UX Sequence 6, Editable, Mandatory if Type is UID Range. Alphanumeric.\nUID: Text Box, UX Sequence 7, Editable, Mandatory if Type is Container ID. Alphanumeric. Users can add multiple UID ranges and Container IDs before saving the event. Entries can be edited or deleted before saving.\nEvent Form fields: Display varies based on the selected event. Existing form data is shown and not editable.\nEnforce Geocode: Check Box, UX Sequence 8, Editable. Allows activation of geocode enforcing for the event transaction. If checked, Geocode Fence, Alert Type, and Threshold fields become mandatory.\nGeocode Fence: Drop down, UX Sequence 8, Editable, Mandatory if Enforce Geocode is checked. Allows selection from a list of active Geocode zones.\nAlert Type: Drop down, UX Sequence 9, Editable, Mandatory if Enforce Geocode is checked. Values are Inside and Outside.\nThreshold: Number Selector, UX Sequence 10, Editable, Mandatory if Enforce Geocode is checked. Allows setting a threshold for scan attempts before an incident is created.\nBusiness Rules\nOnly active locations will be displayed in the Location drop-down.\nOnly active locations will be displayed if the linked event has LOCATION REQUIRED toggled ON; otherwise, the location field will be empty and non-mandatory.\nUsers can add multiple types in a single event (e.g., UID Range and Container in one table).\nUsers cannot add multiple events against one event and location having different types (this needs to be confirmed with the client).\nEvent Search\nPre-Conditions:\nThe user must be logged in.\nActors:\nATX User/Personnel\nActor Actions and System Responses:\nThe user logs in.\nThe user will be logged into the assigned program. If more than one program is assigned, the user can switch programs through a drop-down menu.\nThe user navigates to the side menu and selects Events.\nA listing screen will appear with the following fields: Event Name, Event Date, User, Method, Actions.\nThe user selects the filter icons next to the column heads or types information in the search bar.\nResults will be fetched based on the Event Name in the search bar.\nPost-Condition:\nThe user is able to search the desired records.\n"}
{"feature_name": "Order Processing", "file_type": "SRS Document", "file_name": "Orders.docx", "file_content": "Software Requirements Specification (SRS) for the \"Order\" Feature\n1. Introduction\n1.1 Purpose The purpose of this document is to provide a detailed specification of the \"Order\" feature in the application. It outlines the requirements and expected behavior to ensure the feature meets user needs and integrates seamlessly with existing systems.\n1.2 Scope The \"Order\" feature allows users to create, edit, search, and manage orders related to unique identifier management (UIM). This feature includes generating order numbers, selecting items, managing UIM formats, and handling various order statuses.\n1.3 Definitions, Acronyms, and Abbreviations\nUIM: Unique Identifier Management\nPO Number: Purchase Order Number\n2. Overall Description\n2.1 User Needs Users need a robust system to manage orders efficiently, including the ability to generate unique order numbers, select specific items for orders, preview UIM formats, and track order status through its lifecycle.\n2.2 Assumptions and Dependencies\nUsers must be logged in to access the Order feature.\nThe system relies on pre-configured data such as Print Partner details and Data Exchange Formats.\n3. System Features\n3.1 Order Creation\nAuto-generation of Order Number: The system will automatically generate a unique order number using the format [Program Name Initials]-[Print Partner]-[Timestamp].\nAuto-population of Order Date: The order date is auto-populated with the current date and is not editable.\nSelection of Print Partner and Data Exchange Format: Users must select a Print Partner and a corresponding Data Exchange Format from dropdown menus. These fields are mandatory and editable.\n3.2 Item and Quantity Management\nItem Selection: Users select an item from a dropdown, which is mandatory. The selected item determines the UIM format and associated image displayed.\nNumber of Programs: Users enter the number of programs, which reflects the quantity of UIMs to be generated. This field is numeric and mandatory.\n3.3 UIM Preview and Product Association\nUIM Preview: After selecting an item, the system displays a UIM preview textbox showing what the generated UIMs will look like.\nAssociate Product to UIMs: Users can optionally link a product to the UIMs, selecting from a dropdown populated with products from the Event Detail.\n3.4 Order Management\nEditing Orders: Users can edit orders but are limited to changing the PO Number once an order has been submitted.\nOrder Status Management: Orders progress through several statuses including REQUESTED, QUEUED, PROCESSING, CREATED, and EXPORTED, each triggering specific system behaviors such as enabling downloads.\n3.5 Order Searching\nUsers can search for orders based on order number, item, quantity, status, creation date, and PO Number.\n3.6 Detailed Field Descriptions for \"Order\" Feature\n3.6.1 Order Number\nType: Text box\nSequence: 1\nEditable: No\nMandatory: Yes\nValidation: Auto-generated field. The system generates a unique order number using the format [Program Name Initials]-[Print Partner]-[Timestamp] (e.g., AUT-SPS-070521-1280816-1), which incorporates elements such as program initials, print partner, and a timestamp.\n3.6.2 Order Date\nType: Text box or Date field\nSequence: 2\nEditable: No\nMandatory: Yes\nValidation: Auto-generated field. The order date is automatically populated with the current date to reflect when the order was initiated.\n3.6.3 Print Partner\nType: Drop down\nSequence: 3\nEditable: Yes\nMandatory: Yes\nValidation: The user must select a Print Partner from a dropdown menu. This field is populated with partners associated with the user\u2019s account and relevant to the UIM order.\n3.6.4 Data Exchange Format\nType: Drop down\nSequence: 4\nEditable: Yes\nMandatory: Yes\nValidation: The user must select a Data Exchange Format from a dropdown that is dynamically populated based on the selected Print Partner. The formats listed are those previously configured as \"UIM Export\".\n3.6.5 Number of Programs\nType: Number\nSequence: 5\nEditable: Yes\nMandatory: Yes\nValidation: Numeric. Users must enter the number of programs for which identifiers will be generated. This quantifies how many distinct identifiers need to be produced.\n3.6.6 PO Number\nType: Text box\nSequence: 6\nEditable: Yes\nMandatory: Yes\nValidation: Alphanumeric. The user has the option to input a purchase order number, which can be used for internal tracking and management.\n3.6.7 Item\nType: Drop down\nSequence: 7\nEditable: Yes\nMandatory: Yes\nValidation: The user must select an item from a dropdown list. These items are pre-configured in the system and relate to specific DigiTrax products or services for which the order is being placed.\n3.6.8 UIM Format\nType: Text Box\nSequence: 5 (Note: Sequence might need adjustment to avoid conflict with 'Number of Programs')\nEditable: No\nMandatory: Yes\nValidation: Auto-generated field. This field displays the UIM (Unique Identifier Management) code format linked to the selected item, providing clarity on the identifier format being used.\n3.6.9 Image\nType: Image Box\nSequence: 6 (Note: Sequence might need adjustment to avoid conflict with 'PO Number')\nEditable: No\nMandatory: Yes\nValidation: Auto-generated field. An image related to the selected item\u2019s UIM format is displayed for visual verification by the user.\n3.6.10 UIM Preview\nType: Text Box\nSequence: 7 (Note: Sequence might need adjustment to avoid conflict with 'Item')\nEditable: No\nMandatory: Yes\nValidation: Auto-generated field. A preview textbox shows what the generated UIM identifiers will look like, offering a pre-creation glimpse to ensure accuracy.\n3.6.11 Associate Product to UIMs\nType: Toggle\nSequence: 8\nEditable: Yes\nMandatory: No\nValidation: If enabled, users select a product to associate with the UIMs from a dropdown menu filled with options from the Product List configured in the Event Details.\n3.6.12 Choose Product\nType: Drop down\nSequence: 9\nEditable: Yes\nMandatory: No\nValidation: Populated with products from the Event Detail\u2019s Product List, allowing users to choose specific products linked to the UIMs.\n3.6.13 Product Fields/Attributes\nType: Varies\nSequence: 10 and onwards\nEditable: No\nMandatory: No\nValidation: Auto-generated fields. Displays a preview of product attributes once a product is selected, informed by Master List and Product List\n\n"}
{"feature_name": "UID Management", "file_type": "SRS Document", "file_name": "Unique Identifiers.docx", "file_content": "Unique Identifiers\nBackground\nOur current system is based on band protection, where QR codes are placed on items and later scanned. The main component of Quality Assurance (QA) is a unique code, referred to as a Unique Identifier Marker (UIM). The format of this code can be customized by the user, for instance, 3 letters followed by 8 numbers, with or without special characters, or completely random. This unique code is used to track each product and item within the system.\nUnique Identifier Markers (UIM)\nUIMs are essential to the system and are produced upon placing an order. These markers serve as the primary identifier for tracking products and items throughout their lifecycle.\nUIM Format\nCustomizable Format: The format of the UIM can be selected by the user. Examples include:\nThree letters followed by eight numbers (e.g., ABC12345678)\nInclusion of special characters\nCompletely random sequences\nPurpose: The UIM is used to track each product and item in the system, ensuring accurate tracking and management of inventory.\nProcess Flow\nQR Code Placement:\nQR codes are placed on items as part of the band protection system.\nThese QR codes are linked to UIMs in the system.\nScanning QR Codes:\nItems with QR codes are scanned.\nThe system reads the QR code and retrieves the corresponding UIM.\nQuality Assurance (QA):\nQA processes are based on the UIM.\nThe UIM determines where the item belongs in the system.\nTracking Products and Items:\nThe unique UIM allows for tracking each product and item.\nThe system maintains a record of each UIM and its associated item.\nUIM Generation\nOrder Placement:\nUIMs are generated when an order is placed for them.\nThe system ensures that each UIM is unique and follows the selected format.\nBenefits\nAccurate Tracking: UIMs ensure accurate tracking of products and items throughout their lifecycle.\nCustomizable: Users can select the format of UIMs to meet their specific needs.\nQuality Assurance: UIMs are integral to the QA process, ensuring that items are correctly identified and managed within the system.\nExample\nFormat: ABC12345678\nTracking: The UIM \"ABC12345678\" is linked to a specific item. Scanning the QR code retrieves this UIM, allowing the system to track the item's journey and status.\nThis document provides an overview of how Unique Identifier Markers (UIMs) are used in our system to track and manage items effectively.\n"}
{"feature_name": "Events", "file_type": "Model", "file_name": "dbo.Event_Configurations.Table.sql", "file_content": "/****** Object:  Table [dbo].[Event_Configurations]    Script Date: 6/12/2024 11:37:20 AM ******/\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE TABLE [dbo].[Event_Configurations](\n\t[Event_Configuration_Id] [int] IDENTITY(1,1) NOT NULL,\n\t[Configuration_Type_Lkp_Id] [int] NOT NULL,\n\t[Tenant_ID] [int] NOT NULL,\n\t[Name] [nvarchar](255) NOT NULL,\n\t[Icon_Style] [nvarchar](255) NULL,\n\t[Icon_Style_Unicode] [nvarchar](20) NULL,\n\t[Event_Status_Lkp_Id] [int] NOT NULL,\n\t[Event_Form_Id] [int] NOT NULL,\n\t[Requires_Location] [bit] NOT NULL,\n\t[User_Defined_Flag] [bit] NOT NULL,\n\t[Created_By] [nvarchar](255) NOT NULL,\n\t[Created_Date] [datetime] NOT NULL,\n\t[Effective_Start_Date] [datetime] NOT NULL,\n\t[Effective_End_Date] [datetime] NULL,\n\t[Last_Updated_By] [nvarchar](255) NULL,\n\t[Last_Updated_Date] [datetime] NULL,\n CONSTRAINT [PK_Events] PRIMARY KEY CLUSTERED \n(\n\t[Event_Configuration_Id] ASC\n)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]\n) ON [PRIMARY]\nGO\nALTER TABLE [dbo].[Event_Configurations] ADD  CONSTRAINT [DF_Event_Configurations_User_Defined_Flag]  DEFAULT ((1)) FOR [User_Defined_Flag]\nGO\nALTER TABLE [dbo].[Event_Configurations]  WITH CHECK ADD  CONSTRAINT [FK_Event_Configurations_Config_Type_Lookup] FOREIGN KEY([Configuration_Type_Lkp_Id])\nREFERENCES [Common].[Master_Lookup] ([Master_Lookup_ID])\nGO\nALTER TABLE [dbo].[Event_Configurations] CHECK CONSTRAINT [FK_Event_Configurations_Config_Type_Lookup]\nGO\nALTER TABLE [dbo].[Event_Configurations]  WITH CHECK ADD  CONSTRAINT [FK_Events_Event_Forms] FOREIGN KEY([Event_Form_Id])\nREFERENCES [dbo].[Event_Forms] ([Event_Form_Id])\nGO\nALTER TABLE [dbo].[Event_Configurations] CHECK CONSTRAINT [FK_Events_Event_Forms]\nGO\nALTER TABLE [dbo].[Event_Configurations]  WITH CHECK ADD  CONSTRAINT [FK_Events_Event_Status_Lookup] FOREIGN KEY([Event_Status_Lkp_Id])\nREFERENCES [dbo].[Event_Status_Lookup] ([Event_Status_Lookup_Id])\nGO\nALTER TABLE [dbo].[Event_Configurations] CHECK CONSTRAINT [FK_Events_Event_Status_Lookup]\nGO\nALTER TABLE [dbo].[Event_Configurations]  WITH CHECK ADD  CONSTRAINT [FK_Events_Tenant] FOREIGN KEY([Tenant_ID])\nREFERENCES [dbo].[Tenant] ([Tenant_ID])\nGO\nALTER TABLE [dbo].[Event_Configurations] CHECK CONSTRAINT [FK_Events_Tenant]\nGO\n"}
{"feature_name": "Events", "file_type": "Model", "file_name": "dbo.Event_Detail_Options.Table.sql", "file_content": "/****** Object:  Table [dbo].[Event_Detail_Options]    Script Date: 6/12/2024 11:37:20 AM ******/\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE TABLE [dbo].[Event_Detail_Options](\n\t[Event_Detail_Options_Id] [int] IDENTITY(1,1) NOT NULL,\n\t[Event_Details_Id] [int] NOT NULL,\n\t[Tenant_ID] [int] NOT NULL,\n\t[Name] [nvarchar](255) NOT NULL,\n\t[Active_Flag] [bit] NOT NULL,\n\t[Sort_Order] [int] NULL,\n\t[Metadata_Json] [nvarchar](max) NULL,\n CONSTRAINT [PK_Event_Detail_Options] PRIMARY KEY CLUSTERED \n(\n\t[Event_Detail_Options_Id] ASC\n)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]\n) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\nGO\nALTER TABLE [dbo].[Event_Detail_Options] ADD  CONSTRAINT [DF_Event_Detail_Options_Active_Flag]  DEFAULT ((1)) FOR [Active_Flag]\nGO\nALTER TABLE [dbo].[Event_Detail_Options]  WITH CHECK ADD  CONSTRAINT [FK_Event_Detail_Options_Event_Details] FOREIGN KEY([Event_Details_Id])\nREFERENCES [dbo].[Event_Details] ([Event_Detail_Id])\nON DELETE CASCADE\nGO\nALTER TABLE [dbo].[Event_Detail_Options] CHECK CONSTRAINT [FK_Event_Detail_Options_Event_Details]\nGO\nALTER TABLE [dbo].[Event_Detail_Options]  WITH CHECK ADD  CONSTRAINT [FK_Event_Detail_Options_Tenant] FOREIGN KEY([Tenant_ID])\nREFERENCES [dbo].[Tenant] ([Tenant_ID])\nGO\nALTER TABLE [dbo].[Event_Detail_Options] CHECK CONSTRAINT [FK_Event_Detail_Options_Tenant]\nGO\n"}
{"feature_name": "Events", "file_type": "Model", "file_name": "dbo.Event_Detail_Options_Metadata.Table.sql", "file_content": "/****** Object:  Table [dbo].[Event_Detail_Options_Metadata]    Script Date: 6/12/2024 11:37:20 AM ******/\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE TABLE [dbo].[Event_Detail_Options_Metadata](\n\t[Event_Detail_Options_Metadata_Id] [int] IDENTITY(1,1) NOT NULL,\n\t[Tenant_ID] [int] NOT NULL,\n\t[Event_Detail_Options_Id] [int] NOT NULL,\n\t[Event_Details_Id] [int] NOT NULL,\n\t[Value] [nvarchar](max) NULL,\n\t[Sort_Order] [int] NULL,\n CONSTRAINT [PK_Event_Detail_Options_Metadata] PRIMARY KEY CLUSTERED \n(\n\t[Event_Detail_Options_Metadata_Id] ASC\n)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]\n) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\nGO\nALTER TABLE [dbo].[Event_Detail_Options_Metadata]  WITH CHECK ADD  CONSTRAINT [FK_Event_Detail_Options_Metadata_Event_Detail_Options] FOREIGN KEY([Event_Detail_Options_Id])\nREFERENCES [dbo].[Event_Detail_Options] ([Event_Detail_Options_Id])\nON DELETE CASCADE\nGO\nALTER TABLE [dbo].[Event_Detail_Options_Metadata] CHECK CONSTRAINT [FK_Event_Detail_Options_Metadata_Event_Detail_Options]\nGO\nALTER TABLE [dbo].[Event_Detail_Options_Metadata]  WITH CHECK ADD  CONSTRAINT [FK_Event_Detail_Options_Metadata_Event_Details] FOREIGN KEY([Event_Details_Id])\nREFERENCES [dbo].[Event_Details] ([Event_Detail_Id])\nGO\nALTER TABLE [dbo].[Event_Detail_Options_Metadata] CHECK CONSTRAINT [FK_Event_Detail_Options_Metadata_Event_Details]\nGO\nALTER TABLE [dbo].[Event_Detail_Options_Metadata]  WITH CHECK ADD  CONSTRAINT [FK_Event_Detail_Options_Metadata_Tenant] FOREIGN KEY([Tenant_ID])\nREFERENCES [dbo].[Tenant] ([Tenant_ID])\nGO\nALTER TABLE [dbo].[Event_Detail_Options_Metadata] CHECK CONSTRAINT [FK_Event_Detail_Options_Metadata_Tenant]\nGO\n"}
{"feature_name": "Events", "file_type": "Model", "file_name": "dbo.Event_Forms.Table.sql", "file_content": "/****** Object:  Table [dbo].[Event_Forms]    Script Date: 6/12/2024 11:37:20 AM ******/\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE TABLE [dbo].[Event_Forms](\n\t[Event_Form_Id] [int] IDENTITY(1,1) NOT NULL,\n\t[Tenant_ID] [int] NOT NULL,\n\t[Name] [nvarchar](255) NOT NULL,\n\t[Description] [nvarchar](255) NULL,\n\t[Active_Flag] [bit] NOT NULL,\n\t[Created_By] [nvarchar](255) NOT NULL,\n\t[Created_Date] [datetime] NOT NULL,\n\t[Effective_Start_Date] [datetime] NOT NULL,\n\t[Effective_End_Date] [datetime] NULL,\n\t[Last_Updated_By] [nvarchar](255) NULL,\n\t[Last_Updated_Date] [datetime] NULL,\n\t[FormSchema] [nvarchar](max) NULL,\n\t[FormTypeLookupId] [int] NULL,\n\t[PlaceTags] [nvarchar](max) NULL,\n CONSTRAINT [PK_Event_Forms] PRIMARY KEY CLUSTERED \n(\n\t[Event_Form_Id] ASC\n)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]\n) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\nGO\nALTER TABLE [dbo].[Event_Forms] ADD  CONSTRAINT [DF_Event_Forms_Active_Flag]  DEFAULT ((1)) FOR [Active_Flag]\nGO\nALTER TABLE [dbo].[Event_Forms]  WITH CHECK ADD  CONSTRAINT [FK_Event_Forms_Master_Lookup] FOREIGN KEY([FormTypeLookupId])\nREFERENCES [Common].[Master_Lookup] ([Master_Lookup_ID])\nGO\nALTER TABLE [dbo].[Event_Forms] CHECK CONSTRAINT [FK_Event_Forms_Master_Lookup]\nGO\nALTER TABLE [dbo].[Event_Forms]  WITH CHECK ADD  CONSTRAINT [FK_Event_Forms_Tenant] FOREIGN KEY([Tenant_ID])\nREFERENCES [dbo].[Tenant] ([Tenant_ID])\nGO\nALTER TABLE [dbo].[Event_Forms] CHECK CONSTRAINT [FK_Event_Forms_Tenant]\nGO\n"}
{"feature_name": "Events", "file_type": "Model", "file_name": "dbo.Event_Form_Fields.Table.sql", "file_content": "/****** Object:  Table [dbo].[Event_Form_Fields]    Script Date: 6/12/2024 11:37:20 AM ******/\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE TABLE [dbo].[Event_Form_Fields](\n\t[Event_Form_Field_Id] [int] IDENTITY(1,1) NOT NULL,\n\t[Event_Form_Section_Id] [int] NULL,\n\t[Tenant_ID] [int] NOT NULL,\n\t[Event_Detail_Id] [int] NOT NULL,\n\t[Active_Flag] [bit] NOT NULL,\n\t[Sort_Order] [int] NULL,\n\t[Required] [bit] NOT NULL,\n\t[Created_By] [nvarchar](255) NOT NULL,\n\t[Created_Date] [datetime] NOT NULL,\n\t[Effective_Start_Date] [datetime] NOT NULL,\n\t[Effective_End_Date] [datetime] NULL,\n\t[Last_Updated_By] [nvarchar](255) NULL,\n\t[Last_Updated_Date] [datetime] NULL,\n CONSTRAINT [PK_Event_Form_Fields] PRIMARY KEY CLUSTERED \n(\n\t[Event_Form_Field_Id] ASC\n)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]\n) ON [PRIMARY]\nGO\nALTER TABLE [dbo].[Event_Form_Fields] ADD  CONSTRAINT [DF_Event_Form_Fields_Active_Flag]  DEFAULT ((1)) FOR [Active_Flag]\nGO\nALTER TABLE [dbo].[Event_Form_Fields] ADD  CONSTRAINT [DF_Event_Form_Fields_Required]  DEFAULT ((1)) FOR [Required]\nGO\nALTER TABLE [dbo].[Event_Form_Fields]  WITH CHECK ADD  CONSTRAINT [FK_Event_Form_Fields_Event_Details] FOREIGN KEY([Event_Detail_Id])\nREFERENCES [dbo].[Event_Details] ([Event_Detail_Id])\nGO\nALTER TABLE [dbo].[Event_Form_Fields] CHECK CONSTRAINT [FK_Event_Form_Fields_Event_Details]\nGO\nALTER TABLE [dbo].[Event_Form_Fields]  WITH CHECK ADD  CONSTRAINT [FK_Event_Form_Fields_Event_Form_Sections] FOREIGN KEY([Event_Form_Section_Id])\nREFERENCES [dbo].[Event_Form_Sections] ([Event_Form_Section_Id])\nON DELETE CASCADE\nGO\nALTER TABLE [dbo].[Event_Form_Fields] CHECK CONSTRAINT [FK_Event_Form_Fields_Event_Form_Sections]\nGO\nALTER TABLE [dbo].[Event_Form_Fields]  WITH CHECK ADD  CONSTRAINT [FK_Event_Form_Fields_Tenant] FOREIGN KEY([Tenant_ID])\nREFERENCES [dbo].[Tenant] ([Tenant_ID])\nGO\nALTER TABLE [dbo].[Event_Form_Fields] CHECK CONSTRAINT [FK_Event_Form_Fields_Tenant]\nGO\n"}
{"feature_name": "Events", "file_type": "Model", "file_name": "dbo.Event_Form_Sections.Table.sql", "file_content": "/****** Object:  Table [dbo].[Event_Form_Sections]    Script Date: 6/12/2024 11:37:20 AM ******/\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE TABLE [dbo].[Event_Form_Sections](\n\t[Event_Form_Section_Id] [int] IDENTITY(1,1) NOT NULL,\n\t[Tenant_ID] [int] NOT NULL,\n\t[Event_Form_Id] [int] NOT NULL,\n\t[Name] [nvarchar](255) NOT NULL,\n\t[Sort_Order] [int] NOT NULL,\n\t[Active_Flag] [bit] NOT NULL,\n\t[Created_By] [nvarchar](255) NOT NULL,\n\t[Created_Date] [datetime] NOT NULL,\n\t[Effective_Start_Date] [datetime] NOT NULL,\n\t[Effective_End_Date] [datetime] NULL,\n\t[Last_Updated_By] [nvarchar](255) NULL,\n\t[Last_Updated_Date] [datetime] NULL,\n CONSTRAINT [PK_Event_Form_Sections] PRIMARY KEY CLUSTERED \n(\n\t[Event_Form_Section_Id] ASC\n)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]\n) ON [PRIMARY]\nGO\nALTER TABLE [dbo].[Event_Form_Sections] ADD  CONSTRAINT [DF_Event_Form_Sections_Active_Flag]  DEFAULT ((1)) FOR [Active_Flag]\nGO\nALTER TABLE [dbo].[Event_Form_Sections]  WITH CHECK ADD  CONSTRAINT [FK_Event_Form_Sections_Event_Forms] FOREIGN KEY([Event_Form_Id])\nREFERENCES [dbo].[Event_Forms] ([Event_Form_Id])\nON DELETE CASCADE\nGO\nALTER TABLE [dbo].[Event_Form_Sections] CHECK CONSTRAINT [FK_Event_Form_Sections_Event_Forms]\nGO\nALTER TABLE [dbo].[Event_Form_Sections]  WITH CHECK ADD  CONSTRAINT [FK_Event_Form_Sections_Tenant] FOREIGN KEY([Tenant_ID])\nREFERENCES [dbo].[Tenant] ([Tenant_ID])\nGO\nALTER TABLE [dbo].[Event_Form_Sections] CHECK CONSTRAINT [FK_Event_Form_Sections_Tenant]\nGO\n"}
{"feature_name": "Events", "file_type": "Model", "file_name": "dbo.Event_Status_Lookup.Table.sql", "file_content": "/****** Object:  Table [dbo].[Event_Status_Lookup]    Script Date: 6/12/2024 11:37:20 AM ******/\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE TABLE [dbo].[Event_Status_Lookup](\n\t[Event_Status_Lookup_Id] [int] IDENTITY(1,1) NOT NULL,\n\t[Tenant_ID] [int] NOT NULL,\n\t[Name] [nvarchar](255) NOT NULL,\n\t[Color] [nvarchar](255) NOT NULL,\n\t[User_Defined_Flag] [bit] NOT NULL,\n\t[Product_Journey_Flag] [bit] NOT NULL,\n\t[Active_Flag] [bit] NOT NULL,\n\t[Created_Date] [datetime] NOT NULL,\n\t[Created_By] [nvarchar](255) NOT NULL,\n\t[Effective_Start_Date] [datetime] NOT NULL,\n\t[Effective_End_Date] [datetime] NULL,\n\t[Last_Updated_By] [nvarchar](255) NULL,\n\t[Last_Updated_Date] [datetime] NULL,\n CONSTRAINT [PK_Event_Status_1] PRIMARY KEY CLUSTERED \n(\n\t[Event_Status_Lookup_Id] ASC\n)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]\n) ON [PRIMARY]\nGO\nALTER TABLE [dbo].[Event_Status_Lookup] ADD  CONSTRAINT [DF_Event_Status_Lookup_User_Defined_Flag]  DEFAULT ((1)) FOR [User_Defined_Flag]\nGO\nALTER TABLE [dbo].[Event_Status_Lookup] ADD  CONSTRAINT [DF_Event_Status_Lookup_Product_Journey_Flag]  DEFAULT ((0)) FOR [Product_Journey_Flag]\nGO\nALTER TABLE [dbo].[Event_Status_Lookup] ADD  CONSTRAINT [DF_Event_Status_Active_Flag]  DEFAULT ((1)) FOR [Active_Flag]\nGO\nALTER TABLE [dbo].[Event_Status_Lookup]  WITH CHECK ADD  CONSTRAINT [FK_Event_Status_Lookup_Tenant] FOREIGN KEY([Tenant_ID])\nREFERENCES [dbo].[Tenant] ([Tenant_ID])\nGO\nALTER TABLE [dbo].[Event_Status_Lookup] CHECK CONSTRAINT [FK_Event_Status_Lookup_Tenant]\nGO\n"}
{"feature_name": "Events", "file_type": "Model", "file_name": "dbo.Program_Events.Table.sql", "file_content": "/****** Object:  Table [dbo].[Program_Events]    Script Date: 6/12/2024 11:37:20 AM ******/\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE TABLE [dbo].[Program_Events](\n\t[Id] [bigint] IDENTITY(1,1) NOT NULL,\n\t[Tenant_ID] [int] NOT NULL,\n\t[Event_Configuration_Id] [int] NOT NULL,\n\t[Location_Id] [bigint] NULL,\n\t[GeoFence_Id] [int] NULL,\n\t[Alert_Type_Lkp_Id] [int] NULL,\n\t[Threshold] [int] NULL,\n\t[Method_Type_Lkp_Id] [int] NOT NULL,\n\t[Status_Lkp_Id] [int] NOT NULL,\n\t[Event_Date] [datetime] NOT NULL,\n\t[Error_Code] [nvarchar](50) NULL,\n\t[Error_Description] [nvarchar](max) NULL,\n\t[Active_Flag] [bit] NOT NULL,\n\t[Is_Deleted] [bit] NOT NULL,\n\t[Effective_Start_Date] [datetime] NOT NULL,\n\t[Effective_End_Date] [datetime] NULL,\n\t[Created_By] [nvarchar](256) NOT NULL,\n\t[Created_Date] [datetime] NOT NULL,\n\t[Last_Updated_By] [nvarchar](256) NULL,\n\t[Last_Updated_Date] [datetime] NULL,\n CONSTRAINT [PK_Program_Events] PRIMARY KEY CLUSTERED \n(\n\t[Id] ASC\n)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]\n) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\nGO\nALTER TABLE [dbo].[Program_Events]  WITH CHECK ADD  CONSTRAINT [FK_ProgramEvents_AlertType] FOREIGN KEY([Alert_Type_Lkp_Id])\nREFERENCES [Common].[Master_Lookup] ([Master_Lookup_ID])\nGO\nALTER TABLE [dbo].[Program_Events] CHECK CONSTRAINT [FK_ProgramEvents_AlertType]\nGO\nALTER TABLE [dbo].[Program_Events]  WITH CHECK ADD  CONSTRAINT [FK_ProgramEvents_EventConfiguration] FOREIGN KEY([Event_Configuration_Id])\nREFERENCES [dbo].[Event_Configurations] ([Event_Configuration_Id])\nGO\nALTER TABLE [dbo].[Program_Events] CHECK CONSTRAINT [FK_ProgramEvents_EventConfiguration]\nGO\nALTER TABLE [dbo].[Program_Events]  WITH CHECK ADD  CONSTRAINT [FK_ProgramEvents_GeoFence] FOREIGN KEY([GeoFence_Id])\nREFERENCES [dbo].[GeoFence] ([Id])\nGO\nALTER TABLE [dbo].[Program_Events] CHECK CONSTRAINT [FK_ProgramEvents_GeoFence]\nGO\nALTER TABLE [dbo].[Program_Events]  WITH CHECK ADD  CONSTRAINT [FK_ProgramEvents_Location] FOREIGN KEY([Location_Id])\nREFERENCES [dbo].[Location] ([Location_Id])\nGO\nALTER TABLE [dbo].[Program_Events] CHECK CONSTRAINT [FK_ProgramEvents_Location]\nGO\nALTER TABLE [dbo].[Program_Events]  WITH CHECK ADD  CONSTRAINT [FK_ProgramEvents_MethodType] FOREIGN KEY([Method_Type_Lkp_Id])\nREFERENCES [Common].[Master_Lookup] ([Master_Lookup_ID])\nGO\nALTER TABLE [dbo].[Program_Events] CHECK CONSTRAINT [FK_ProgramEvents_MethodType]\nGO\nALTER TABLE [dbo].[Program_Events]  WITH CHECK ADD  CONSTRAINT [FK_ProgramEvents_Status] FOREIGN KEY([Status_Lkp_Id])\nREFERENCES [Common].[Master_Lookup] ([Master_Lookup_ID])\nGO\nALTER TABLE [dbo].[Program_Events] CHECK CONSTRAINT [FK_ProgramEvents_Status]\nGO\nALTER TABLE [dbo].[Program_Events]  WITH CHECK ADD  CONSTRAINT [FK_ProgramEvents_Tenant] FOREIGN KEY([Tenant_ID])\nREFERENCES [dbo].[Tenant] ([Tenant_ID])\nGO\nALTER TABLE [dbo].[Program_Events] CHECK CONSTRAINT [FK_ProgramEvents_Tenant]\nGO\n"}
{"feature_name": "Events", "file_type": "Model", "file_name": "dbo.Program_Event_Details.Table.sql", "file_content": "/****** Object:  Table [dbo].[Program_Event_Details]    Script Date: 6/12/2024 11:37:20 AM ******/\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE TABLE [dbo].[Program_Event_Details](\n\t[Id] [bigint] IDENTITY(1,1) NOT NULL,\n\t[Tenant_ID] [int] NOT NULL,\n\t[Program_Event_Id] [bigint] NOT NULL,\n\t[Event_UID_Type_Lkp_Id] [int] NOT NULL,\n\t[Starting_UID] [nvarchar](100) NULL,\n\t[Ending_UID] [nvarchar](100) NULL,\n\t[Container_UID] [nvarchar](100) NULL,\n\t[Container_UID_Collection] [nvarchar](max) NULL,\n\t[UID_Collection] [nvarchar](max) NULL,\n\t[Active_Flag] [bit] NOT NULL,\n\t[Is_Deleted] [bit] NOT NULL,\n\t[Effective_Start_Date] [datetime] NOT NULL,\n\t[Effective_End_Date] [datetime] NULL,\n\t[Created_By] [nvarchar](256) NOT NULL,\n\t[Created_Date] [datetime] NOT NULL,\n\t[Last_Updated_By] [nvarchar](256) NULL,\n\t[Last_Updated_Date] [datetime] NULL,\n CONSTRAINT [PK_Program_Event_Details] PRIMARY KEY CLUSTERED \n(\n\t[Id] ASC\n)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]\n) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\nGO\nALTER TABLE [dbo].[Program_Event_Details]  WITH CHECK ADD  CONSTRAINT [FK_ProgramEventDetails_EventUIDType] FOREIGN KEY([Event_UID_Type_Lkp_Id])\nREFERENCES [Common].[Master_Lookup] ([Master_Lookup_ID])\nGO\nALTER TABLE [dbo].[Program_Event_Details] CHECK CONSTRAINT [FK_ProgramEventDetails_EventUIDType]\nGO\nALTER TABLE [dbo].[Program_Event_Details]  WITH CHECK ADD  CONSTRAINT [FK_ProgramEventDetails_ProgramEvents] FOREIGN KEY([Program_Event_Id])\nREFERENCES [dbo].[Program_Events] ([Id])\nGO\nALTER TABLE [dbo].[Program_Event_Details] CHECK CONSTRAINT [FK_ProgramEventDetails_ProgramEvents]\nGO\nALTER TABLE [dbo].[Program_Event_Details]  WITH CHECK ADD  CONSTRAINT [FK_ProgramEventDetails_Tenant] FOREIGN KEY([Tenant_ID])\nREFERENCES [dbo].[Tenant] ([Tenant_ID])\nGO\nALTER TABLE [dbo].[Program_Event_Details] CHECK CONSTRAINT [FK_ProgramEventDetails_Tenant]\nGO\n"}
{"feature_name": "Events", "file_type": "Model", "file_name": "dbo.Program_Event_Form_Values.Table.sql", "file_content": "/****** Object:  Table [dbo].[Program_Event_Form_Values]    Script Date: 6/12/2024 11:37:20 AM ******/\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE TABLE [dbo].[Program_Event_Form_Values](\n\t[Id] [bigint] IDENTITY(1,1) NOT NULL,\n\t[Tenant_ID] [int] NOT NULL,\n\t[Program_Event_Id] [bigint] NOT NULL,\n\t[Event_Detail_Id] [int] NOT NULL,\n\t[Value] [nvarchar](max) NULL,\n\t[Active_Flag] [bit] NOT NULL,\n\t[Is_Deleted] [bit] NOT NULL,\n\t[Effective_Start_Date] [datetime] NOT NULL,\n\t[Effective_End_Date] [datetime] NULL,\n\t[Created_By] [nvarchar](256) NOT NULL,\n\t[Created_Date] [datetime] NOT NULL,\n\t[Last_Updated_By] [nvarchar](256) NULL,\n\t[Last_Updated_Date] [datetime] NULL,\n CONSTRAINT [PK_Program_Event_Form_Values] PRIMARY KEY CLUSTERED \n(\n\t[Id] ASC\n)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]\n) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\nGO\nALTER TABLE [dbo].[Program_Event_Form_Values]  WITH CHECK ADD  CONSTRAINT [FK_ProgramEventFormValues_EventDetails] FOREIGN KEY([Event_Detail_Id])\nREFERENCES [dbo].[Event_Details] ([Event_Detail_Id])\nGO\nALTER TABLE [dbo].[Program_Event_Form_Values] CHECK CONSTRAINT [FK_ProgramEventFormValues_EventDetails]\nGO\nALTER TABLE [dbo].[Program_Event_Form_Values]  WITH CHECK ADD  CONSTRAINT [FK_ProgramEventFormValues_ProgramEvents] FOREIGN KEY([Program_Event_Id])\nREFERENCES [dbo].[Program_Events] ([Id])\nGO\nALTER TABLE [dbo].[Program_Event_Form_Values] CHECK CONSTRAINT [FK_ProgramEventFormValues_ProgramEvents]\nGO\nALTER TABLE [dbo].[Program_Event_Form_Values]  WITH CHECK ADD  CONSTRAINT [FK_ProgramEventFormValues_Tenant] FOREIGN KEY([Tenant_ID])\nREFERENCES [dbo].[Tenant] ([Tenant_ID])\nGO\nALTER TABLE [dbo].[Program_Event_Form_Values] CHECK CONSTRAINT [FK_ProgramEventFormValues_Tenant]\nGO\n"}
{"feature_name": "Events", "file_type": "Model", "file_name": "dbo.UIM_Events.Table.sql", "file_content": "/****** Object:  Table [dbo].[UIM_Events]    Script Date: 6/12/2024 11:37:20 AM ******/\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE TABLE [dbo].[UIM_Events](\n\t[UIM_Event_Id] [bigint] IDENTITY(1,1) NOT NULL,\n\t[Tenant_ID] [int] NOT NULL,\n\t[UIM_Id] [bigint] NOT NULL,\n\t[Program_Event_Id] [bigint] NOT NULL,\n\t[Active_Flag] [bit] NOT NULL,\n\t[Is_Deleted] [bit] NOT NULL,\n\t[Effective_Start_Date] [datetime] NOT NULL,\n\t[Effective_End_Date] [datetime] NULL,\n\t[Created_By] [nvarchar](256) NOT NULL,\n\t[Created_Date] [datetime] NOT NULL,\n\t[Last_Updated_By] [nvarchar](256) NULL,\n\t[Last_Updated_Date] [datetime] NULL,\n\t[Aggregated_UID_Id] [bigint] NULL,\n\t[UID_Aggregated_History] [nvarchar](max) NULL,\n CONSTRAINT [PK_UIM_Events] PRIMARY KEY CLUSTERED \n(\n\t[UIM_Event_Id] ASC\n)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]\n) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\nGO\nALTER TABLE [dbo].[UIM_Events]  WITH CHECK ADD  CONSTRAINT [FK_UIMEvents_ProgramEvents] FOREIGN KEY([Program_Event_Id])\nREFERENCES [dbo].[Program_Events] ([Id])\nGO\nALTER TABLE [dbo].[UIM_Events] CHECK CONSTRAINT [FK_UIMEvents_ProgramEvents]\nGO\nALTER TABLE [dbo].[UIM_Events]  WITH CHECK ADD  CONSTRAINT [FK_UIMEvents_Tenant] FOREIGN KEY([Tenant_ID])\nREFERENCES [dbo].[Tenant] ([Tenant_ID])\nGO\nALTER TABLE [dbo].[UIM_Events] CHECK CONSTRAINT [FK_UIMEvents_Tenant]\nGO\nALTER TABLE [dbo].[UIM_Events]  WITH CHECK ADD  CONSTRAINT [FK_UIMEvents_UniqueIdentifiableMarkers] FOREIGN KEY([UIM_Id])\nREFERENCES [dbo].[Unique_Identifiable_Markers] ([Unique_Identifier_ID])\nGO\nALTER TABLE [dbo].[UIM_Events] CHECK CONSTRAINT [FK_UIMEvents_UniqueIdentifiableMarkers]\nGO\n"}
{"feature_name": "Order Processing", "file_type": "Model", "file_name": "dbo.UIM_Orders.Table.sql", "file_content": "/****** Object:  Table [dbo].[UIM_Orders]    Script Date: 6/12/2024 11:37:20 AM ******/\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE TABLE [dbo].[UIM_Orders](\n\t[Id] [bigint] IDENTITY(1,1) NOT NULL,\n\t[Tenant_ID] [int] NOT NULL,\n\t[Order_Number] [nvarchar](100) NOT NULL,\n\t[Order_Status_Lkp_Id] [int] NOT NULL,\n\t[Print_Partner_Id] [bigint] NOT NULL,\n\t[Data_Exchange_Format_Id] [bigint] NOT NULL,\n\t[Quantity] [bigint] NOT NULL,\n\t[PO_Number] [nvarchar](100) NULL,\n\t[Item_Id] [bigint] NOT NULL,\n\t[UIM_Format_Id] [int] NOT NULL,\n\t[Product_Id] [int] NULL,\n\t[Active_Flag] [bit] NOT NULL,\n\t[Is_Deleted] [bit] NOT NULL,\n\t[Effective_Start_Date] [datetime] NOT NULL,\n\t[Effective_End_Date] [datetime] NULL,\n\t[Created_By] [nvarchar](256) NOT NULL,\n\t[Created_Date] [datetime] NOT NULL,\n\t[Last_Updated_By] [nvarchar](256) NULL,\n\t[Last_Updated_Date] [datetime] NULL,\n\t[No_Of_Batch] [int] NULL,\n\t[File_Name] [nvarchar](100) NULL,\n\t[Is_Exported] [bit] NOT NULL,\n CONSTRAINT [PK_UIM_Orders] PRIMARY KEY CLUSTERED \n(\n\t[Id] ASC\n)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]\n) ON [PRIMARY]\nGO\nALTER TABLE [dbo].[UIM_Orders] ADD  CONSTRAINT [DF_UIM_Orders_Is_Exported]  DEFAULT ((0)) FOR [Is_Exported]\nGO\nALTER TABLE [dbo].[UIM_Orders]  WITH CHECK ADD  CONSTRAINT [FK_UIMOrders_EventDetailOptions] FOREIGN KEY([Product_Id])\nREFERENCES [dbo].[Event_Detail_Options] ([Event_Detail_Options_Id])\nGO\nALTER TABLE [dbo].[UIM_Orders] CHECK CONSTRAINT [FK_UIMOrders_EventDetailOptions]\nGO\nALTER TABLE [dbo].[UIM_Orders]  WITH CHECK ADD  CONSTRAINT [FK_UIMOrders_Items] FOREIGN KEY([Item_Id])\nREFERENCES [dbo].[Items] ([Id])\nGO\nALTER TABLE [dbo].[UIM_Orders] CHECK CONSTRAINT [FK_UIMOrders_Items]\nGO\nALTER TABLE [dbo].[UIM_Orders]  WITH CHECK ADD  CONSTRAINT [FK_UIMOrders_OrderStatus] FOREIGN KEY([Order_Status_Lkp_Id])\nREFERENCES [Common].[Master_Lookup] ([Master_Lookup_ID])\nGO\nALTER TABLE [dbo].[UIM_Orders] CHECK CONSTRAINT [FK_UIMOrders_OrderStatus]\nGO\nALTER TABLE [dbo].[UIM_Orders]  WITH CHECK ADD  CONSTRAINT [FK_UIMOrders_Tenant] FOREIGN KEY([Tenant_ID])\nREFERENCES [dbo].[Tenant] ([Tenant_ID])\nGO\nALTER TABLE [dbo].[UIM_Orders] CHECK CONSTRAINT [FK_UIMOrders_Tenant]\nGO\nALTER TABLE [dbo].[UIM_Orders]  WITH CHECK ADD  CONSTRAINT [FK_UIMOrders_UimFormats] FOREIGN KEY([UIM_Format_Id])\nREFERENCES [dbo].[UIM_Formats] ([UIM_Format_Id])\nGO\nALTER TABLE [dbo].[UIM_Orders] CHECK CONSTRAINT [FK_UIMOrders_UimFormats]\nGO\n"}
{"feature_name": "UID Management", "file_type": "Model", "file_name": "dbo.UniqueIdentifier_Formats.Table.sql", "file_content": "/****** Object:  Table [dbo].[UIM_Formats]    Script Date: 6/12/2024 11:37:20 AM ******/\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE TABLE [dbo].[UIM_Formats](\n\t[UIM_Format_Id] [int] IDENTITY(1,1) NOT NULL,\n\t[Tenant_ID] [int] NOT NULL,\n\t[Format_Name] [nvarchar](200) NOT NULL,\n\t[Description] [nvarchar](450) NULL,\n\t[Type] [int] NOT NULL,\n\t[Excluded_Characters] [nvarchar](255) NULL,\n\t[Active_Flag] [bit] NOT NULL,\n\t[IsDeleted] [bit] NOT NULL,\n\t[CodeGeneratorAssembly] [nvarchar](500) NULL,\n\t[CodeGeneratorFullyQualifiedClassName] [nvarchar](500) NULL,\n\t[Code_Format_Implementation_Lkp_Id] [int] NULL,\n\t[Code_Schema_Settings] [nvarchar](max) NULL,\n\t[Code_Schema_Id] [int] NULL,\n\t[Effective_Start_Date] [datetime] NOT NULL,\n\t[Effective_End_Date] [datetime] NULL,\n\t[Created_By] [nvarchar](256) NOT NULL,\n\t[Created_Date] [datetime] NOT NULL,\n\t[Last_Updated_By] [nvarchar](256) NULL,\n\t[Last_Updated_Date] [datetime] NULL,\n\t[Sequence_Value] [bigint] NOT NULL,\n CONSTRAINT [PK_UIM_Format] PRIMARY KEY CLUSTERED \n(\n\t[UIM_Format_Id] ASC\n)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]\n) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\nGO\nALTER TABLE [dbo].[UIM_Formats] ADD  CONSTRAINT [DF__UIM_Formats_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]\nGO\nALTER TABLE [dbo].[UIM_Formats] ADD  DEFAULT ((0)) FOR [Sequence_Value]\nGO\nALTER TABLE [dbo].[UIM_Formats]  WITH CHECK ADD  CONSTRAINT [FK_UIM_Formats_Code_Schema] FOREIGN KEY([Code_Schema_Id])\nREFERENCES [dbo].[Code_Schemas] ([Code_Schema_Id])\nON DELETE CASCADE\nGO\nALTER TABLE [dbo].[UIM_Formats] CHECK CONSTRAINT [FK_UIM_Formats_Code_Schema]\nGO\nALTER TABLE [dbo].[UIM_Formats]  WITH CHECK ADD  CONSTRAINT [FK_UIM_Formats_Implementation_LKP] FOREIGN KEY([Code_Format_Implementation_Lkp_Id])\nREFERENCES [Common].[Master_Lookup] ([Master_Lookup_ID])\nGO\nALTER TABLE [dbo].[UIM_Formats] CHECK CONSTRAINT [FK_UIM_Formats_Implementation_LKP]\nGO\nALTER TABLE [dbo].[UIM_Formats]  WITH CHECK ADD  CONSTRAINT [FK_UIM_Formats_Tenant] FOREIGN KEY([Tenant_ID])\nREFERENCES [dbo].[Tenant] ([Tenant_ID])\nGO\nALTER TABLE [dbo].[UIM_Formats] CHECK CONSTRAINT [FK_UIM_Formats_Tenant]\nGO\nALTER TABLE [dbo].[UIM_Formats]  WITH CHECK ADD  CONSTRAINT [FK_UIM_Formats_TypeLkp] FOREIGN KEY([Type])\nREFERENCES [Common].[Master_Lookup] ([Master_Lookup_ID])\nGO\nALTER TABLE [dbo].[UIM_Formats] CHECK CONSTRAINT [FK_UIM_Formats_TypeLkp]\nGO\n"}
{"feature_name": "UID Management", "file_type": "Model", "file_name": "dbo.Unique_Identifiable_Markers.Table.sql", "file_content": "/****** Object:  Table [dbo].[Unique_Identifiable_Markers]    Script Date: 6/12/2024 11:37:20 AM ******/\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE TABLE [dbo].[Unique_Identifiable_Markers](\n\t[Unique_Identifier_ID] [bigint] IDENTITY(1,1) NOT NULL,\n\t[Tenant_ID] [int] NOT NULL,\n\t[UIM_Order_ID] [bigint] NULL,\n\t[Unique_Identifier_Type_LKP_ID] [int] NOT NULL,\n\t[Current_Status_LKP_ID] [int] NOT NULL,\n\t[Unique_Identifier] [nvarchar](100) NOT NULL,\n\t[Sequence_Value] [int] NULL,\n\t[Unique_Identifier_Extension] [nvarchar](max) NULL,\n\t[Requested_Date] [datetime] NOT NULL,\n\t[Generated_Date] [datetime] NULL,\n\t[Unique_Identifier_Generator_JobId] [bigint] NULL,\n\t[Active_Flag] [bit] NOT NULL,\n\t[Effective_Start_Date] [datetime] NOT NULL,\n\t[Effective_End_Date] [datetime] NULL,\n\t[Created_By] [nvarchar](256) NOT NULL,\n\t[Created_Date] [datetime] NOT NULL,\n\t[Last_Updated_By] [nvarchar](256) NULL,\n\t[Last_Updated_Date] [datetime] NULL,\n\t[coil_id] [bigint] NULL,\n\t[coil_serial_no] [bigint] NULL,\n\t[Date_Of_Mfg] [datetime] NULL,\n\t[Event_Status_Lookup_Id] [int] NULL,\n\t[Batch_No] [int] NULL,\n\t[Import_Id] [bigint] NULL,\n CONSTRAINT [PK_Unique_Identifiable_Markers] PRIMARY KEY CLUSTERED \n(\n\t[Unique_Identifier_ID] ASC\n)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],\n CONSTRAINT [IX_Unique_Identifiable_Markers] UNIQUE NONCLUSTERED \n(\n\t[Unique_Identifier] ASC\n)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]\n) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\nGO\nALTER TABLE [dbo].[Unique_Identifiable_Markers]  WITH CHECK ADD  CONSTRAINT [FK_Unique_Identifiable_Markers_Coils] FOREIGN KEY([coil_id])\nREFERENCES [dbo].[Coils] ([id])\nGO\nALTER TABLE [dbo].[Unique_Identifiable_Markers] CHECK CONSTRAINT [FK_Unique_Identifiable_Markers_Coils]\nGO\nALTER TABLE [dbo].[Unique_Identifiable_Markers]  WITH CHECK ADD  CONSTRAINT [FK_Unique_Identifiable_Markers_Event_Status_Lookup] FOREIGN KEY([Event_Status_Lookup_Id])\nREFERENCES [dbo].[Event_Status_Lookup] ([Event_Status_Lookup_Id])\nGO\nALTER TABLE [dbo].[Unique_Identifiable_Markers] CHECK CONSTRAINT [FK_Unique_Identifiable_Markers_Event_Status_Lookup]\nGO\nALTER TABLE [dbo].[Unique_Identifiable_Markers]  WITH CHECK ADD  CONSTRAINT [FK_Unique_Identifiable_Markers_Imports] FOREIGN KEY([Import_Id])\nREFERENCES [dbo].[Imports] ([Import_Id])\nGO\nALTER TABLE [dbo].[Unique_Identifiable_Markers] CHECK CONSTRAINT [FK_Unique_Identifiable_Markers_Imports]\nGO\nALTER TABLE [dbo].[Unique_Identifiable_Markers]  WITH CHECK ADD  CONSTRAINT [FK_Unique_Identifiable_Markers_Status_Lookup] FOREIGN KEY([Current_Status_LKP_ID])\nREFERENCES [Common].[Master_Lookup] ([Master_Lookup_ID])\nGO\nALTER TABLE [dbo].[Unique_Identifiable_Markers] CHECK CONSTRAINT [FK_Unique_Identifiable_Markers_Status_Lookup]\nGO\nALTER TABLE [dbo].[Unique_Identifiable_Markers]  WITH CHECK ADD  CONSTRAINT [FK_Unique_Identifiable_Markers_Tenant] FOREIGN KEY([Tenant_ID])\nREFERENCES [dbo].[Tenant] ([Tenant_ID])\nGO\nALTER TABLE [dbo].[Unique_Identifiable_Markers] CHECK CONSTRAINT [FK_Unique_Identifiable_Markers_Tenant]\nGO\nALTER TABLE [dbo].[Unique_Identifiable_Markers]  WITH CHECK ADD  CONSTRAINT [FK_Unique_Identifiable_Markers_Type_Lookup] FOREIGN KEY([Unique_Identifier_Type_LKP_ID])\nREFERENCES [Common].[Master_Lookup] ([Master_Lookup_ID])\nGO\nALTER TABLE [dbo].[Unique_Identifiable_Markers] CHECK CONSTRAINT [FK_Unique_Identifiable_Markers_Type_Lookup]\nGO\nALTER TABLE [dbo].[Unique_Identifiable_Markers]  WITH CHECK ADD  CONSTRAINT [FK_Unique_Identifiable_Markers_UIM_Orders] FOREIGN KEY([UIM_Order_ID])\nREFERENCES [dbo].[UIM_Orders] ([Id])\nGO\nALTER TABLE [dbo].[Unique_Identifiable_Markers] CHECK CONSTRAINT [FK_Unique_Identifiable_Markers_UIM_Orders]\nGO\n"}
{"feature_name": "UID Management", "file_type": "Model", "file_name": "dbo.Unique_Identifiable_Marker_Status_History.Table.sql", "file_content": "/****** Object:  Table [dbo].[Unique_Identifiable_Marker_Status_History]    Script Date: 6/12/2024 11:37:20 AM ******/\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE TABLE [dbo].[Unique_Identifiable_Marker_Status_History](\n\t[Unique_Identifier_Marker_Status_History_ID] [bigint] IDENTITY(1,1) NOT NULL,\n\t[Tenant_ID] [int] NOT NULL,\n\t[Unique_Identifier_ID] [bigint] NOT NULL,\n\t[Status_LKP_ID] [int] NOT NULL,\n\t[Status_Date] [datetime] NOT NULL,\n\t[Active_Flag] [bit] NOT NULL,\n\t[Effective_Start_Date] [datetime] NOT NULL,\n\t[Effective_End_Date] [datetime] NULL,\n\t[Created_By] [nvarchar](256) NOT NULL,\n\t[Created_Date] [datetime] NOT NULL,\n\t[Last_Updated_By] [nvarchar](256) NULL,\n\t[Last_Updated_Date] [datetime] NULL,\n\t[Request_Json] [nvarchar](max) NULL,\n CONSTRAINT [PK_Unique_Identifier_Marker_Status_History] PRIMARY KEY CLUSTERED \n(\n\t[Unique_Identifier_Marker_Status_History_ID] ASC\n)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]\n) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\nGO\nALTER TABLE [dbo].[Unique_Identifiable_Marker_Status_History] ADD  CONSTRAINT [DF_Unique_Identifier_Marker_Status_History_Created_Date]  DEFAULT (getdate()) FOR [Created_Date]\nGO\nALTER TABLE [dbo].[Unique_Identifiable_Marker_Status_History]  WITH CHECK ADD  CONSTRAINT [FK_Unique_Identifiable_Marker_Status_History_Event_Status_Lookup] FOREIGN KEY([Status_LKP_ID])\nREFERENCES [dbo].[Event_Status_Lookup] ([Event_Status_Lookup_Id])\nGO\nALTER TABLE [dbo].[Unique_Identifiable_Marker_Status_History] CHECK CONSTRAINT [FK_Unique_Identifiable_Marker_Status_History_Event_Status_Lookup]\nGO\nALTER TABLE [dbo].[Unique_Identifiable_Marker_Status_History]  WITH CHECK ADD  CONSTRAINT [FK_Unique_Identifiable_Marker_Status_History_Unique_Identifiable_Markers] FOREIGN KEY([Unique_Identifier_ID])\nREFERENCES [dbo].[Unique_Identifiable_Markers] ([Unique_Identifier_ID])\nGO\nALTER TABLE [dbo].[Unique_Identifiable_Marker_Status_History] CHECK CONSTRAINT [FK_Unique_Identifiable_Marker_Status_History_Unique_Identifiable_Markers]\nGO\nALTER TABLE [dbo].[Unique_Identifiable_Marker_Status_History]  WITH CHECK ADD  CONSTRAINT [FK_Unique_Identifier_Marker_Status_History_Tenant] FOREIGN KEY([Tenant_ID])\nREFERENCES [dbo].[Tenant] ([Tenant_ID])\nGO\nALTER TABLE [dbo].[Unique_Identifiable_Marker_Status_History] CHECK CONSTRAINT [FK_Unique_Identifier_Marker_Status_History_Tenant]\nGO\n"}
